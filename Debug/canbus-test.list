
canbus-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08009968  08009968  0000a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009a98  08009a98  0000aa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009aa0  08009aa0  0000aaa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009aa4  08009aa4  0000aaa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  24000000  08009aa8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000042b4  24000070  08009b18  0000b070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24004324  08009b18  0000b324  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a529  00000000  00000000  0000b09e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00003491  00000000  00000000  000255c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001418  00000000  00000000  00028a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000f76  00000000  00000000  00029e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039752  00000000  00000000  0002ade6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017c11  00000000  00000000  00064538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016b2af  00000000  00000000  0007c149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e73f8  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005cc4  00000000  00000000  001e743c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  001ed100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08009950 	.word	0x08009950

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08009950 	.word	0x08009950

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006ac:	b480      	push	{r7}
 80006ae:	b085      	sub	sp, #20
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4a07      	ldr	r2, [pc, #28]	@ (80006d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80006bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	4a06      	ldr	r2, [pc, #24]	@ (80006dc <vApplicationGetIdleTaskMemory+0x30>)
 80006c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2280      	movs	r2, #128	@ 0x80
 80006c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	2400008c 	.word	0x2400008c
 80006dc:	240000e0 	.word	0x240000e0

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b5b0      	push	{r4, r5, r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006e6:	f000 fa61 	bl	8000bac <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ea:	f000 fd13 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ee:	f000 f845 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f2:	f000 f971 	bl	80009d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006f6:	f000 f923 	bl	8000940 <MX_USART1_UART_Init>
  MX_FDCAN1_Init();
 80006fa:	f000 f8bd 	bl	8000878 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80006fe:	481b      	ldr	r0, [pc, #108]	@ (800076c <main+0x8c>)
 8000700:	f001 f90c 	bl	800191c <HAL_FDCAN_Start>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <main+0x2e>
	  Error_Handler();
 800070a:	f000 fa7b 	bl	8000c04 <Error_Handler>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 800070e:	2200      	movs	r2, #0
 8000710:	2101      	movs	r1, #1
 8000712:	4816      	ldr	r0, [pc, #88]	@ (800076c <main+0x8c>)
 8000714:	f001 faf4 	bl	8001d00 <HAL_FDCAN_ActivateNotification>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <main+0x42>
	  Error_Handler();
 800071e:	f000 fa71 	bl	8000c04 <Error_Handler>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of serialSemaphore */
  osSemaphoreDef(serialSemaphore);
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
  serialSemaphoreHandle = osSemaphoreCreate(osSemaphore(serialSemaphore), 1);
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2101      	movs	r1, #1
 8000730:	4618      	mov	r0, r3
 8000732:	f006 fa52 	bl	8006bda <osSemaphoreCreate>
 8000736:	4603      	mov	r3, r0
 8000738:	4a0d      	ldr	r2, [pc, #52]	@ (8000770 <main+0x90>)
 800073a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of CANSenderTask */
  osThreadDef(CANSenderTask, StartCANSenderTask, osPriorityHigh, 0, 1280);
 800073c:	4b0d      	ldr	r3, [pc, #52]	@ (8000774 <main+0x94>)
 800073e:	1d3c      	adds	r4, r7, #4
 8000740:	461d      	mov	r5, r3
 8000742:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000744:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000746:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800074a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CANSenderTaskHandle = osThreadCreate(osThread(CANSenderTask), NULL);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f006 f9e1 	bl	8006b1a <osThreadCreate>
 8000758:	4603      	mov	r3, r0
 800075a:	4a07      	ldr	r2, [pc, #28]	@ (8000778 <main+0x98>)
 800075c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800075e:	f006 f9d5 	bl	8006b0c <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  osDelay(1);
 8000762:	2001      	movs	r0, #1
 8000764:	f006 fa25 	bl	8006bb2 <osDelay>
 8000768:	e7fb      	b.n	8000762 <main+0x82>
 800076a:	bf00      	nop
 800076c:	2400033c 	.word	0x2400033c
 8000770:	24000474 	.word	0x24000474
 8000774:	08009978 	.word	0x08009978
 8000778:	24000470 	.word	0x24000470

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b09c      	sub	sp, #112	@ 0x70
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	224c      	movs	r2, #76	@ 0x4c
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f008 fb1c 	bl	8008dc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	1d3b      	adds	r3, r7, #4
 8000792:	2220      	movs	r2, #32
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f008 fb16 	bl	8008dc8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800079c:	2002      	movs	r0, #2
 800079e:	f002 f9e7 	bl	8002b70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a2:	2300      	movs	r3, #0
 80007a4:	603b      	str	r3, [r7, #0]
 80007a6:	4b32      	ldr	r3, [pc, #200]	@ (8000870 <SystemClock_Config+0xf4>)
 80007a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007aa:	4a31      	ldr	r2, [pc, #196]	@ (8000870 <SystemClock_Config+0xf4>)
 80007ac:	f023 0301 	bic.w	r3, r3, #1
 80007b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007b2:	4b2f      	ldr	r3, [pc, #188]	@ (8000870 <SystemClock_Config+0xf4>)
 80007b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000874 <SystemClock_Config+0xf8>)
 80007be:	699b      	ldr	r3, [r3, #24]
 80007c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007c4:	4a2b      	ldr	r2, [pc, #172]	@ (8000874 <SystemClock_Config+0xf8>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007ca:	6193      	str	r3, [r2, #24]
 80007cc:	4b29      	ldr	r3, [pc, #164]	@ (8000874 <SystemClock_Config+0xf8>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007d4:	603b      	str	r3, [r7, #0]
 80007d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007d8:	bf00      	nop
 80007da:	4b26      	ldr	r3, [pc, #152]	@ (8000874 <SystemClock_Config+0xf8>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007e6:	d1f8      	bne.n	80007da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80007ec:	2301      	movs	r3, #1
 80007ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2340      	movs	r3, #64	@ 0x40
 80007f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007fc:	2304      	movs	r3, #4
 80007fe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000800:	2309      	movs	r3, #9
 8000802:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000804:	2302      	movs	r3, #2
 8000806:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000808:	2303      	movs	r3, #3
 800080a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000810:	230c      	movs	r3, #12
 8000812:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000814:	2302      	movs	r3, #2
 8000816:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000818:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800081c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800081e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000822:	4618      	mov	r0, r3
 8000824:	f002 f9de 	bl	8002be4 <HAL_RCC_OscConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800082e:	f000 f9e9 	bl	8000c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000832:	233f      	movs	r3, #63	@ 0x3f
 8000834:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800084a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2101      	movs	r1, #1
 8000858:	4618      	mov	r0, r3
 800085a:	f002 fe1d 	bl	8003498 <HAL_RCC_ClockConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8000864:	f000 f9ce 	bl	8000c04 <Error_Handler>
  }
}
 8000868:	bf00      	nop
 800086a:	3770      	adds	r7, #112	@ 0x70
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	58000400 	.word	0x58000400
 8000874:	58024800 	.word	0x58024800

08000878 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800087c:	4b2e      	ldr	r3, [pc, #184]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 800087e:	4a2f      	ldr	r2, [pc, #188]	@ (800093c <MX_FDCAN1_Init+0xc4>)
 8000880:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000882:	4b2d      	ldr	r3, [pc, #180]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_INTERNAL_LOOPBACK;
 8000888:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 800088a:	2203      	movs	r2, #3
 800088c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800088e:	4b2a      	ldr	r3, [pc, #168]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000894:	4b28      	ldr	r3, [pc, #160]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800089a:	4b27      	ldr	r3, [pc, #156]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 800089c:	2200      	movs	r2, #0
 800089e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80008a0:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 13;
 80008a6:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008a8:	220d      	movs	r2, #13
 80008aa:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 86;
 80008ac:	4b22      	ldr	r3, [pc, #136]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008ae:	2256      	movs	r2, #86	@ 0x56
 80008b0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 13;
 80008b2:	4b21      	ldr	r3, [pc, #132]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008b4:	220d      	movs	r2, #13
 80008b6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 25;
 80008b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008ba:	2219      	movs	r2, #25
 80008bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80008be:	4b1e      	ldr	r3, [pc, #120]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 2;
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008c6:	2202      	movs	r2, #2
 80008c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80008ca:	4b1b      	ldr	r3, [pc, #108]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80008d0:	4b19      	ldr	r3, [pc, #100]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008d8:	2201      	movs	r2, #1
 80008da:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008ea:	2204      	movs	r2, #4
 80008ec:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008ee:	4b12      	ldr	r3, [pc, #72]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008f4:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000900:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 8000902:	2204      	movs	r2, #4
 8000904:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000906:	4b0c      	ldr	r3, [pc, #48]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 8000908:	2200      	movs	r2, #0
 800090a:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800090c:	4b0a      	ldr	r3, [pc, #40]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 800090e:	2200      	movs	r2, #0
 8000910:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 8000914:	2201      	movs	r2, #1
 8000916:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000918:	4b07      	ldr	r3, [pc, #28]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 800091a:	2200      	movs	r2, #0
 800091c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 8000920:	2204      	movs	r2, #4
 8000922:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000924:	4804      	ldr	r0, [pc, #16]	@ (8000938 <MX_FDCAN1_Init+0xc0>)
 8000926:	f000 fe1b 	bl	8001560 <HAL_FDCAN_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000930:	f000 f968 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2400033c 	.word	0x2400033c
 800093c:	4000a000 	.word	0x4000a000

08000940 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000944:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000946:	4a23      	ldr	r2, [pc, #140]	@ (80009d4 <MX_USART1_UART_Init+0x94>)
 8000948:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094a:	4b21      	ldr	r3, [pc, #132]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 800094c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000950:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000952:	4b1f      	ldr	r3, [pc, #124]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000958:	4b1d      	ldr	r3, [pc, #116]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 800095a:	2200      	movs	r2, #0
 800095c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095e:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000960:	2200      	movs	r2, #0
 8000962:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000964:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000966:	220c      	movs	r2, #12
 8000968:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096a:	4b19      	ldr	r3, [pc, #100]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000970:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000972:	2200      	movs	r2, #0
 8000974:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000988:	4811      	ldr	r0, [pc, #68]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 800098a:	f004 ff3d 	bl	8005808 <HAL_UART_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000994:	f000 f936 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000998:	2100      	movs	r1, #0
 800099a:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 800099c:	f005 ffd3 	bl	8006946 <HAL_UARTEx_SetTxFifoThreshold>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80009a6:	f000 f92d 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 80009ae:	f006 f808 	bl	80069c2 <HAL_UARTEx_SetRxFifoThreshold>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 f924 	bl	8000c04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_USART1_UART_Init+0x90>)
 80009be:	f005 ff89 	bl	80068d4 <HAL_UARTEx_DisableFifoMode>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80009c8:	f000 f91c 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	240003dc 	.word	0x240003dc
 80009d4:	40011000 	.word	0x40011000

080009d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <MX_GPIO_Init+0x30>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e4:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <MX_GPIO_Init+0x30>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ee:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <MX_GPIO_Init+0x30>)
 80009f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	58024400 	.word	0x58024400

08000a0c <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000a14:	1d39      	adds	r1, r7, #4
 8000a16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4803      	ldr	r0, [pc, #12]	@ (8000a2c <__io_putchar+0x20>)
 8000a1e:	f004 ff43 	bl	80058a8 <HAL_UART_Transmit>

  return ch;
 8000a22:	687b      	ldr	r3, [r7, #4]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	240003dc 	.word	0x240003dc

08000a30 <handle_data_received>:

void handle_data_received(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0

	printf("<- Recv CAN Data = ");
 8000a36:	480d      	ldr	r0, [pc, #52]	@ (8000a6c <handle_data_received+0x3c>)
 8000a38:	f008 f876 	bl	8008b28 <iprintf>

	for (int i = 0; i < sizeof(RxData); i++)
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	e00a      	b.n	8000a58 <handle_data_received+0x28>
		printf("0x%x ",RxData[i]);
 8000a42:	4a0b      	ldr	r2, [pc, #44]	@ (8000a70 <handle_data_received+0x40>)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <handle_data_received+0x44>)
 8000a4e:	f008 f86b 	bl	8008b28 <iprintf>
	for (int i = 0; i < sizeof(RxData); i++)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3301      	adds	r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b07      	cmp	r3, #7
 8000a5c:	d9f1      	bls.n	8000a42 <handle_data_received+0x12>

	printf("\n\n");
 8000a5e:	4806      	ldr	r0, [pc, #24]	@ (8000a78 <handle_data_received+0x48>)
 8000a60:	f008 f8d2 	bl	8008c08 <puts>

}
 8000a64:	bf00      	nop
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	08009994 	.word	0x08009994
 8000a70:	24000334 	.word	0x24000334
 8000a74:	080099a8 	.word	0x080099a8
 8000a78:	080099b0 	.word	0x080099b0

08000a7c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) == RESET)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d017      	beq.n	8000ac0 <HAL_FDCAN_RxFifo0Callback+0x44>
	  return;

  /* Retreive Rx messages from RX FIFO0 */
  if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8000a90:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8000a92:	4a0e      	ldr	r2, [pc, #56]	@ (8000acc <HAL_FDCAN_RxFifo0Callback+0x50>)
 8000a94:	2140      	movs	r1, #64	@ 0x40
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f000 ffc6 	bl	8001a28 <HAL_FDCAN_GetRxMessage>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <HAL_FDCAN_RxFifo0Callback+0x2a>
	  Error_Handler();
 8000aa2:	f000 f8af 	bl	8000c04 <Error_Handler>
  if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2101      	movs	r1, #1
 8000aaa:	6878      	ldr	r0, [r7, #4]
 8000aac:	f001 f928 	bl	8001d00 <HAL_FDCAN_ActivateNotification>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <HAL_FDCAN_RxFifo0Callback+0x3e>
	  Error_Handler();
 8000ab6:	f000 f8a5 	bl	8000c04 <Error_Handler>

  handle_data_received();
 8000aba:	f7ff ffb9 	bl	8000a30 <handle_data_received>
 8000abe:	e000      	b.n	8000ac2 <HAL_FDCAN_RxFifo0Callback+0x46>
	  return;
 8000ac0:	bf00      	nop
}
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	24000334 	.word	0x24000334
 8000acc:	24000304 	.word	0x24000304

08000ad0 <send_can_data>:

void send_can_data(void){
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
	static uint8_t dummy;

	TxHeader.Identifier = 0x11;
 8000ad6:	4b25      	ldr	r3, [pc, #148]	@ (8000b6c <send_can_data+0x9c>)
 8000ad8:	2211      	movs	r2, #17
 8000ada:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <send_can_data+0x9c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000ae2:	4b22      	ldr	r3, [pc, #136]	@ (8000b6c <send_can_data+0x9c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000ae8:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <send_can_data+0x9c>)
 8000aea:	2208      	movs	r2, #8
 8000aec:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <send_can_data+0x9c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000af4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <send_can_data+0x9c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_FD_CAN;
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <send_can_data+0x9c>)
 8000afc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b00:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <send_can_data+0x9c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <send_can_data+0x9c>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	621a      	str	r2, [r3, #32]

	printf("-> Send CAN Data = ");
 8000b0e:	4818      	ldr	r0, [pc, #96]	@ (8000b70 <send_can_data+0xa0>)
 8000b10:	f008 f80a 	bl	8008b28 <iprintf>
	for (int i = 0; i < sizeof(TxData); i++){
 8000b14:	2300      	movs	r3, #0
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	e014      	b.n	8000b44 <send_can_data+0x74>
		TxData[i] = dummy++;
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <send_can_data+0xa4>)
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	1c5a      	adds	r2, r3, #1
 8000b20:	b2d1      	uxtb	r1, r2
 8000b22:	4a14      	ldr	r2, [pc, #80]	@ (8000b74 <send_can_data+0xa4>)
 8000b24:	7011      	strb	r1, [r2, #0]
 8000b26:	4914      	ldr	r1, [pc, #80]	@ (8000b78 <send_can_data+0xa8>)
 8000b28:	687a      	ldr	r2, [r7, #4]
 8000b2a:	440a      	add	r2, r1
 8000b2c:	7013      	strb	r3, [r2, #0]
		printf("0x%x ",TxData[i]);
 8000b2e:	4a12      	ldr	r2, [pc, #72]	@ (8000b78 <send_can_data+0xa8>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4413      	add	r3, r2
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	4619      	mov	r1, r3
 8000b38:	4810      	ldr	r0, [pc, #64]	@ (8000b7c <send_can_data+0xac>)
 8000b3a:	f007 fff5 	bl	8008b28 <iprintf>
	for (int i = 0; i < sizeof(TxData); i++){
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	3301      	adds	r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2b07      	cmp	r3, #7
 8000b48:	d9e7      	bls.n	8000b1a <send_can_data+0x4a>
	}
	printf("\n");
 8000b4a:	200a      	movs	r0, #10
 8000b4c:	f007 fffe 	bl	8008b4c <putchar>

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData)!= HAL_OK)
 8000b50:	4a09      	ldr	r2, [pc, #36]	@ (8000b78 <send_can_data+0xa8>)
 8000b52:	4906      	ldr	r1, [pc, #24]	@ (8000b6c <send_can_data+0x9c>)
 8000b54:	480a      	ldr	r0, [pc, #40]	@ (8000b80 <send_can_data+0xb0>)
 8000b56:	f000 ff0c 	bl	8001972 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <send_can_data+0x94>
		Error_Handler();
 8000b60:	f000 f850 	bl	8000c04 <Error_Handler>
}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	240002e0 	.word	0x240002e0
 8000b70:	080099b4 	.word	0x080099b4
 8000b74:	24000478 	.word	0x24000478
 8000b78:	2400032c 	.word	0x2400032c
 8000b7c:	080099a8 	.word	0x080099a8
 8000b80:	2400033c 	.word	0x2400033c

08000b84 <StartCANSenderTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCANSenderTask */
void StartCANSenderTask(void const * argument)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  send_can_data();
 8000b8c:	f7ff ffa0 	bl	8000ad0 <send_can_data>

	  memset(TxData, 0, sizeof(TxData));
 8000b90:	2208      	movs	r2, #8
 8000b92:	2100      	movs	r1, #0
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <StartCANSenderTask+0x24>)
 8000b96:	f008 f917 	bl	8008dc8 <memset>

	  osDelay(pdMS_TO_TICKS(1000));
 8000b9a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b9e:	f006 f808 	bl	8006bb2 <osDelay>
	  send_can_data();
 8000ba2:	bf00      	nop
 8000ba4:	e7f2      	b.n	8000b8c <StartCANSenderTask+0x8>
 8000ba6:	bf00      	nop
 8000ba8:	2400032c 	.word	0x2400032c

08000bac <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bb2:	463b      	mov	r3, r7
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000bbe:	f000 fc57 	bl	8001470 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bce:	231f      	movs	r3, #31
 8000bd0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bd2:	2387      	movs	r3, #135	@ 0x87
 8000bd4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bde:	2301      	movs	r3, #1
 8000be0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000be2:	2301      	movs	r3, #1
 8000be4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bee:	463b      	mov	r3, r7
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f000 fc75 	bl	80014e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bf6:	2004      	movs	r0, #4
 8000bf8:	f000 fc52 	bl	80014a0 <HAL_MPU_Enable>

}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
}
 8000c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <Error_Handler+0x8>

08000c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c16:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <HAL_MspInit+0x38>)
 8000c18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c48 <HAL_MspInit+0x38>)
 8000c1e:	f043 0302 	orr.w	r3, r3, #2
 8000c22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <HAL_MspInit+0x38>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c34:	2200      	movs	r2, #0
 8000c36:	210f      	movs	r1, #15
 8000c38:	f06f 0001 	mvn.w	r0, #1
 8000c3c:	f000 fbe3 	bl	8001406 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	58024400 	.word	0x58024400

08000c4c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0ba      	sub	sp, #232	@ 0xe8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	22c0      	movs	r2, #192	@ 0xc0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f008 f8ab 	bl	8008dc8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a2b      	ldr	r2, [pc, #172]	@ (8000d24 <HAL_FDCAN_MspInit+0xd8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d14f      	bne.n	8000d1c <HAL_FDCAN_MspInit+0xd0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000c7c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000c88:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c90:	f107 0310 	add.w	r3, r7, #16
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 ff8b 	bl	8003bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000ca0:	f7ff ffb0 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ca4:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <HAL_FDCAN_MspInit+0xdc>)
 8000ca6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000caa:	4a1f      	ldr	r2, [pc, #124]	@ (8000d28 <HAL_FDCAN_MspInit+0xdc>)
 8000cac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cb0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8000cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <HAL_FDCAN_MspInit+0xdc>)
 8000cb6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8000cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <HAL_FDCAN_MspInit+0xdc>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	4a17      	ldr	r2, [pc, #92]	@ (8000d28 <HAL_FDCAN_MspInit+0xdc>)
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_FDCAN_MspInit+0xdc>)
 8000cd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd8:	f003 0301 	and.w	r3, r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000ce0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ce4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000cfa:	2309      	movs	r3, #9
 8000cfc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <HAL_FDCAN_MspInit+0xe0>)
 8000d08:	f001 fd82 	bl	8002810 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	2013      	movs	r0, #19
 8000d12:	f000 fb78 	bl	8001406 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000d16:	2013      	movs	r0, #19
 8000d18:	f000 fb8f 	bl	800143a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	37e8      	adds	r7, #232	@ 0xe8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	4000a000 	.word	0x4000a000
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	58020000 	.word	0x58020000

08000d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0ba      	sub	sp, #232	@ 0xe8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	22c0      	movs	r2, #192	@ 0xc0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f008 f839 	bl	8008dc8 <memset>
  if(huart->Instance==USART1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a27      	ldr	r2, [pc, #156]	@ (8000df8 <HAL_UART_MspInit+0xc8>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d146      	bne.n	8000dee <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d60:	f04f 0201 	mov.w	r2, #1
 8000d64:	f04f 0300 	mov.w	r3, #0
 8000d68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d72:	f107 0310 	add.w	r3, r7, #16
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 ff1a 	bl	8003bb0 <HAL_RCCEx_PeriphCLKConfig>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d82:	f7ff ff3f 	bl	8000c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d86:	4b1d      	ldr	r3, [pc, #116]	@ (8000dfc <HAL_UART_MspInit+0xcc>)
 8000d88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dfc <HAL_UART_MspInit+0xcc>)
 8000d8e:	f043 0310 	orr.w	r3, r3, #16
 8000d92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d96:	4b19      	ldr	r3, [pc, #100]	@ (8000dfc <HAL_UART_MspInit+0xcc>)
 8000d98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d9c:	f003 0310 	and.w	r3, r3, #16
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <HAL_UART_MspInit+0xcc>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000daa:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <HAL_UART_MspInit+0xcc>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db4:	4b11      	ldr	r3, [pc, #68]	@ (8000dfc <HAL_UART_MspInit+0xcc>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dc2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ddc:	2307      	movs	r3, #7
 8000dde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	@ (8000e00 <HAL_UART_MspInit+0xd0>)
 8000dea:	f001 fd11 	bl	8002810 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000dee:	bf00      	nop
 8000df0:	37e8      	adds	r7, #232	@ 0xe8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40011000 	.word	0x40011000
 8000dfc:	58024400 	.word	0x58024400
 8000e00:	58020000 	.word	0x58020000

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <NMI_Handler+0x4>

08000e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <HardFault_Handler+0x4>

08000e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <MemManage_Handler+0x4>

08000e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <BusFault_Handler+0x4>

08000e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <UsageFault_Handler+0x4>

08000e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e3e:	f000 f9db 	bl	80011f8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e42:	f007 f8a1 	bl	8007f88 <xTaskGetSchedulerState>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d001      	beq.n	8000e50 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e4c:	f007 fb6c 	bl	8008528 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <FDCAN1_IT0_IRQHandler+0x10>)
 8000e5a:	f000 ffcb 	bl	8001df4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2400033c 	.word	0x2400033c

08000e68 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
 8000e78:	e00a      	b.n	8000e90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e7a:	f3af 8000 	nop.w
 8000e7e:	4601      	mov	r1, r0
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	1c5a      	adds	r2, r3, #1
 8000e84:	60ba      	str	r2, [r7, #8]
 8000e86:	b2ca      	uxtb	r2, r1
 8000e88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	697a      	ldr	r2, [r7, #20]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbf0      	blt.n	8000e7a <_read+0x12>
  }

  return len;
 8000e98:	687b      	ldr	r3, [r7, #4]
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b086      	sub	sp, #24
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	60f8      	str	r0, [r7, #12]
 8000eaa:	60b9      	str	r1, [r7, #8]
 8000eac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	e009      	b.n	8000ec8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	1c5a      	adds	r2, r3, #1
 8000eb8:	60ba      	str	r2, [r7, #8]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fda5 	bl	8000a0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf1      	blt.n	8000eb4 <_write+0x12>
  }
  return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_close>:

int _close(int file)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b083      	sub	sp, #12
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f02:	605a      	str	r2, [r3, #4]
  return 0;
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr

08000f12 <_isatty>:

int _isatty(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f1a:	2301      	movs	r3, #1
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	370c      	adds	r7, #12
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f4c:	4a14      	ldr	r2, [pc, #80]	@ (8000fa0 <_sbrk+0x5c>)
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <_sbrk+0x60>)
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <_sbrk+0x64>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d102      	bne.n	8000f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <_sbrk+0x64>)
 8000f62:	4a12      	ldr	r2, [pc, #72]	@ (8000fac <_sbrk+0x68>)
 8000f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <_sbrk+0x64>)
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d207      	bcs.n	8000f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f74:	f007 ff76 	bl	8008e64 <__errno>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	220c      	movs	r2, #12
 8000f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e009      	b.n	8000f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f84:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	@ (8000fa8 <_sbrk+0x64>)
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4413      	add	r3, r2
 8000f92:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <_sbrk+0x64>)
 8000f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f96:	68fb      	ldr	r3, [r7, #12]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3718      	adds	r7, #24
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	24080000 	.word	0x24080000
 8000fa4:	00000400 	.word	0x00000400
 8000fa8:	2400047c 	.word	0x2400047c
 8000fac:	24004328 	.word	0x24004328

08000fb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fb4:	4b37      	ldr	r3, [pc, #220]	@ (8001094 <SystemInit+0xe4>)
 8000fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fba:	4a36      	ldr	r2, [pc, #216]	@ (8001094 <SystemInit+0xe4>)
 8000fbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fc4:	4b34      	ldr	r3, [pc, #208]	@ (8001098 <SystemInit+0xe8>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 030f 	and.w	r3, r3, #15
 8000fcc:	2b06      	cmp	r3, #6
 8000fce:	d807      	bhi.n	8000fe0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fd0:	4b31      	ldr	r3, [pc, #196]	@ (8001098 <SystemInit+0xe8>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f023 030f 	bic.w	r3, r3, #15
 8000fd8:	4a2f      	ldr	r2, [pc, #188]	@ (8001098 <SystemInit+0xe8>)
 8000fda:	f043 0307 	orr.w	r3, r3, #7
 8000fde:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800109c <SystemInit+0xec>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a2d      	ldr	r2, [pc, #180]	@ (800109c <SystemInit+0xec>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fec:	4b2b      	ldr	r3, [pc, #172]	@ (800109c <SystemInit+0xec>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ff2:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <SystemInit+0xec>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	4929      	ldr	r1, [pc, #164]	@ (800109c <SystemInit+0xec>)
 8000ff8:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <SystemInit+0xf0>)
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ffe:	4b26      	ldr	r3, [pc, #152]	@ (8001098 <SystemInit+0xe8>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 0308 	and.w	r3, r3, #8
 8001006:	2b00      	cmp	r3, #0
 8001008:	d007      	beq.n	800101a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800100a:	4b23      	ldr	r3, [pc, #140]	@ (8001098 <SystemInit+0xe8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f023 030f 	bic.w	r3, r3, #15
 8001012:	4a21      	ldr	r2, [pc, #132]	@ (8001098 <SystemInit+0xe8>)
 8001014:	f043 0307 	orr.w	r3, r3, #7
 8001018:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800101a:	4b20      	ldr	r3, [pc, #128]	@ (800109c <SystemInit+0xec>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001020:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <SystemInit+0xec>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001026:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <SystemInit+0xec>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <SystemInit+0xec>)
 800102e:	4a1d      	ldr	r2, [pc, #116]	@ (80010a4 <SystemInit+0xf4>)
 8001030:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001032:	4b1a      	ldr	r3, [pc, #104]	@ (800109c <SystemInit+0xec>)
 8001034:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <SystemInit+0xf8>)
 8001036:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001038:	4b18      	ldr	r3, [pc, #96]	@ (800109c <SystemInit+0xec>)
 800103a:	4a1c      	ldr	r2, [pc, #112]	@ (80010ac <SystemInit+0xfc>)
 800103c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800103e:	4b17      	ldr	r3, [pc, #92]	@ (800109c <SystemInit+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <SystemInit+0xec>)
 8001046:	4a19      	ldr	r2, [pc, #100]	@ (80010ac <SystemInit+0xfc>)
 8001048:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800104a:	4b14      	ldr	r3, [pc, #80]	@ (800109c <SystemInit+0xec>)
 800104c:	2200      	movs	r2, #0
 800104e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <SystemInit+0xec>)
 8001052:	4a16      	ldr	r2, [pc, #88]	@ (80010ac <SystemInit+0xfc>)
 8001054:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001056:	4b11      	ldr	r3, [pc, #68]	@ (800109c <SystemInit+0xec>)
 8001058:	2200      	movs	r2, #0
 800105a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800105c:	4b0f      	ldr	r3, [pc, #60]	@ (800109c <SystemInit+0xec>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a0e      	ldr	r2, [pc, #56]	@ (800109c <SystemInit+0xec>)
 8001062:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001066:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001068:	4b0c      	ldr	r3, [pc, #48]	@ (800109c <SystemInit+0xec>)
 800106a:	2200      	movs	r2, #0
 800106c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800106e:	4b10      	ldr	r3, [pc, #64]	@ (80010b0 <SystemInit+0x100>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	4b10      	ldr	r3, [pc, #64]	@ (80010b4 <SystemInit+0x104>)
 8001074:	4013      	ands	r3, r2
 8001076:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800107a:	d202      	bcs.n	8001082 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800107c:	4b0e      	ldr	r3, [pc, #56]	@ (80010b8 <SystemInit+0x108>)
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <SystemInit+0x10c>)
 8001084:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001088:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800108a:	bf00      	nop
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000ed00 	.word	0xe000ed00
 8001098:	52002000 	.word	0x52002000
 800109c:	58024400 	.word	0x58024400
 80010a0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010a4:	02020200 	.word	0x02020200
 80010a8:	01ff0000 	.word	0x01ff0000
 80010ac:	01010280 	.word	0x01010280
 80010b0:	5c001000 	.word	0x5c001000
 80010b4:	ffff0000 	.word	0xffff0000
 80010b8:	51008108 	.word	0x51008108
 80010bc:	52004000 	.word	0x52004000

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010c4:	f7ff ff74 	bl	8000fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480c      	ldr	r0, [pc, #48]	@ (80010fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010ca:	490d      	ldr	r1, [pc, #52]	@ (8001100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0a      	ldr	r2, [pc, #40]	@ (8001108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010e0:	4c0a      	ldr	r4, [pc, #40]	@ (800110c <LoopFillZerobss+0x22>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ee:	f007 febf 	bl	8008e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f2:	f7ff faf5 	bl	80006e0 <main>
  bx  lr
 80010f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010f8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001100:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001104:	08009aa8 	.word	0x08009aa8
  ldr r2, =_sbss
 8001108:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 800110c:	24004324 	.word	0x24004324

08001110 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC3_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111a:	2003      	movs	r0, #3
 800111c:	f000 f968 	bl	80013f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001120:	f002 fb70 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8001124:	4602      	mov	r2, r0
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <HAL_Init+0x68>)
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	0a1b      	lsrs	r3, r3, #8
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	4913      	ldr	r1, [pc, #76]	@ (8001180 <HAL_Init+0x6c>)
 8001132:	5ccb      	ldrb	r3, [r1, r3]
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	fa22 f303 	lsr.w	r3, r2, r3
 800113c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800113e:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <HAL_Init+0x68>)
 8001140:	699b      	ldr	r3, [r3, #24]
 8001142:	f003 030f 	and.w	r3, r3, #15
 8001146:	4a0e      	ldr	r2, [pc, #56]	@ (8001180 <HAL_Init+0x6c>)
 8001148:	5cd3      	ldrb	r3, [r2, r3]
 800114a:	f003 031f 	and.w	r3, r3, #31
 800114e:	687a      	ldr	r2, [r7, #4]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	4a0b      	ldr	r2, [pc, #44]	@ (8001184 <HAL_Init+0x70>)
 8001156:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001158:	4a0b      	ldr	r2, [pc, #44]	@ (8001188 <HAL_Init+0x74>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115e:	200f      	movs	r0, #15
 8001160:	f000 f814 	bl	800118c <HAL_InitTick>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e002      	b.n	8001174 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800116e:	f7ff fd4f 	bl	8000c10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	58024400 	.word	0x58024400
 8001180:	08009a1c 	.word	0x08009a1c
 8001184:	24000004 	.word	0x24000004
 8001188:	24000000 	.word	0x24000000

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <HAL_InitTick+0x60>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	e021      	b.n	80011e4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <HAL_InitTick+0x64>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_InitTick+0x60>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80011b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f94d 	bl	8001456 <HAL_SYSTICK_Config>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00e      	b.n	80011e4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b0f      	cmp	r3, #15
 80011ca:	d80a      	bhi.n	80011e2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011cc:	2200      	movs	r2, #0
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f000 f917 	bl	8001406 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011d8:	4a06      	ldr	r2, [pc, #24]	@ (80011f4 <HAL_InitTick+0x68>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	e000      	b.n	80011e4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2400000c 	.word	0x2400000c
 80011f0:	24000000 	.word	0x24000000
 80011f4:	24000008 	.word	0x24000008

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	@ (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	2400000c 	.word	0x2400000c
 800121c:	24000480 	.word	0x24000480

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	@ (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	24000480 	.word	0x24000480

08001238 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <HAL_GetREVID+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	0c1b      	lsrs	r3, r3, #16
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	5c001000 	.word	0x5c001000

08001250 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800126c:	4013      	ands	r3, r2
 800126e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <__NVIC_SetPriorityGrouping+0x44>)
 800127a:	4313      	orrs	r3, r2
 800127c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800127e:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <__NVIC_SetPriorityGrouping+0x40>)
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	60d3      	str	r3, [r2, #12]
}
 8001284:	bf00      	nop
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00
 8001294:	05fa0000 	.word	0x05fa0000

08001298 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800129c:	4b04      	ldr	r3, [pc, #16]	@ (80012b0 <__NVIC_GetPriorityGrouping+0x18>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 0307 	and.w	r3, r3, #7
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db0b      	blt.n	80012de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012c6:	88fb      	ldrh	r3, [r7, #6]
 80012c8:	f003 021f 	and.w	r2, r3, #31
 80012cc:	4907      	ldr	r1, [pc, #28]	@ (80012ec <__NVIC_EnableIRQ+0x38>)
 80012ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012d2:	095b      	lsrs	r3, r3, #5
 80012d4:	2001      	movs	r0, #1
 80012d6:	fa00 f202 	lsl.w	r2, r0, r2
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000e100 	.word	0xe000e100

080012f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001300:	2b00      	cmp	r3, #0
 8001302:	db0a      	blt.n	800131a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	b2da      	uxtb	r2, r3
 8001308:	490c      	ldr	r1, [pc, #48]	@ (800133c <__NVIC_SetPriority+0x4c>)
 800130a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800130e:	0112      	lsls	r2, r2, #4
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	440b      	add	r3, r1
 8001314:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001318:	e00a      	b.n	8001330 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4908      	ldr	r1, [pc, #32]	@ (8001340 <__NVIC_SetPriority+0x50>)
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	f003 030f 	and.w	r3, r3, #15
 8001326:	3b04      	subs	r3, #4
 8001328:	0112      	lsls	r2, r2, #4
 800132a:	b2d2      	uxtb	r2, r2
 800132c:	440b      	add	r3, r1
 800132e:	761a      	strb	r2, [r3, #24]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000e100 	.word	0xe000e100
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001344:	b480      	push	{r7}
 8001346:	b089      	sub	sp, #36	@ 0x24
 8001348:	af00      	add	r7, sp, #0
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	60b9      	str	r1, [r7, #8]
 800134e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	f1c3 0307 	rsb	r3, r3, #7
 800135e:	2b04      	cmp	r3, #4
 8001360:	bf28      	it	cs
 8001362:	2304      	movcs	r3, #4
 8001364:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	3304      	adds	r3, #4
 800136a:	2b06      	cmp	r3, #6
 800136c:	d902      	bls.n	8001374 <NVIC_EncodePriority+0x30>
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	3b03      	subs	r3, #3
 8001372:	e000      	b.n	8001376 <NVIC_EncodePriority+0x32>
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	f04f 32ff 	mov.w	r2, #4294967295
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	401a      	ands	r2, r3
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800138c:	f04f 31ff 	mov.w	r1, #4294967295
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	43d9      	mvns	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800139c:	4313      	orrs	r3, r2
         );
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3724      	adds	r7, #36	@ 0x24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013bc:	d301      	bcc.n	80013c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013be:	2301      	movs	r3, #1
 80013c0:	e00f      	b.n	80013e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013c2:	4a0a      	ldr	r2, [pc, #40]	@ (80013ec <SysTick_Config+0x40>)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013ca:	210f      	movs	r1, #15
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f7ff ff8e 	bl	80012f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <SysTick_Config+0x40>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013da:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <SysTick_Config+0x40>)
 80013dc:	2207      	movs	r2, #7
 80013de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	e000e010 	.word	0xe000e010

080013f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ff29 	bl	8001250 <__NVIC_SetPriorityGrouping>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b086      	sub	sp, #24
 800140a:	af00      	add	r7, sp, #0
 800140c:	4603      	mov	r3, r0
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	607a      	str	r2, [r7, #4]
 8001412:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001414:	f7ff ff40 	bl	8001298 <__NVIC_GetPriorityGrouping>
 8001418:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	68b9      	ldr	r1, [r7, #8]
 800141e:	6978      	ldr	r0, [r7, #20]
 8001420:	f7ff ff90 	bl	8001344 <NVIC_EncodePriority>
 8001424:	4602      	mov	r2, r0
 8001426:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <__NVIC_SetPriority>
}
 8001432:	bf00      	nop
 8001434:	3718      	adds	r7, #24
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ff33 	bl	80012b4 <__NVIC_EnableIRQ>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ffa4 	bl	80013ac <SysTick_Config>
 8001464:	4603      	mov	r3, r0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
	...

08001470 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001474:	f3bf 8f5f 	dmb	sy
}
 8001478:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800147a:	4b07      	ldr	r3, [pc, #28]	@ (8001498 <HAL_MPU_Disable+0x28>)
 800147c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800147e:	4a06      	ldr	r2, [pc, #24]	@ (8001498 <HAL_MPU_Disable+0x28>)
 8001480:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001484:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001486:	4b05      	ldr	r3, [pc, #20]	@ (800149c <HAL_MPU_Disable+0x2c>)
 8001488:	2200      	movs	r2, #0
 800148a:	605a      	str	r2, [r3, #4]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	e000ed00 	.word	0xe000ed00
 800149c:	e000ed90 	.word	0xe000ed90

080014a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80014a8:	4a0b      	ldr	r2, [pc, #44]	@ (80014d8 <HAL_MPU_Enable+0x38>)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_MPU_Enable+0x3c>)
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	4a09      	ldr	r2, [pc, #36]	@ (80014dc <HAL_MPU_Enable+0x3c>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80014be:	f3bf 8f4f 	dsb	sy
}
 80014c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80014c4:	f3bf 8f6f 	isb	sy
}
 80014c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed90 	.word	0xe000ed90
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	785a      	ldrb	r2, [r3, #1]
 80014ec:	4b1b      	ldr	r3, [pc, #108]	@ (800155c <HAL_MPU_ConfigRegion+0x7c>)
 80014ee:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80014f0:	4b1a      	ldr	r3, [pc, #104]	@ (800155c <HAL_MPU_ConfigRegion+0x7c>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a19      	ldr	r2, [pc, #100]	@ (800155c <HAL_MPU_ConfigRegion+0x7c>)
 80014f6:	f023 0301 	bic.w	r3, r3, #1
 80014fa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80014fc:	4a17      	ldr	r2, [pc, #92]	@ (800155c <HAL_MPU_ConfigRegion+0x7c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7b1b      	ldrb	r3, [r3, #12]
 8001508:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7adb      	ldrb	r3, [r3, #11]
 800150e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001510:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7a9b      	ldrb	r3, [r3, #10]
 8001516:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001518:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7b5b      	ldrb	r3, [r3, #13]
 800151e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001520:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7b9b      	ldrb	r3, [r3, #14]
 8001526:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001528:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	7bdb      	ldrb	r3, [r3, #15]
 800152e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001530:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	7a5b      	ldrb	r3, [r3, #9]
 8001536:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001538:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	7a1b      	ldrb	r3, [r3, #8]
 800153e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001540:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001548:	4a04      	ldr	r2, [pc, #16]	@ (800155c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800154a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800154c:	6113      	str	r3, [r2, #16]
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
 800155a:	bf00      	nop
 800155c:	e000ed90 	.word	0xe000ed90

08001560 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b098      	sub	sp, #96	@ 0x60
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001568:	4a84      	ldr	r2, [pc, #528]	@ (800177c <HAL_FDCAN_Init+0x21c>)
 800156a:	f107 030c 	add.w	r3, r7, #12
 800156e:	4611      	mov	r1, r2
 8001570:	224c      	movs	r2, #76	@ 0x4c
 8001572:	4618      	mov	r0, r3
 8001574:	f007 fca3 	bl	8008ebe <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e1c6      	b.n	8001910 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a7e      	ldr	r2, [pc, #504]	@ (8001780 <HAL_FDCAN_Init+0x220>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d106      	bne.n	800159a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001594:	461a      	mov	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d106      	bne.n	80015b4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fb4c 	bl	8000c4c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	699a      	ldr	r2, [r3, #24]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0210 	bic.w	r2, r2, #16
 80015c2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7ff fe2c 	bl	8001220 <HAL_GetTick>
 80015c8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80015ca:	e014      	b.n	80015f6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80015cc:	f7ff fe28 	bl	8001220 <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d90d      	bls.n	80015f6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e18c      	b.n	8001910 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	699b      	ldr	r3, [r3, #24]
 80015fc:	f003 0308 	and.w	r3, r3, #8
 8001600:	2b08      	cmp	r3, #8
 8001602:	d0e3      	beq.n	80015cc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	699a      	ldr	r2, [r3, #24]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f042 0201 	orr.w	r2, r2, #1
 8001612:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001614:	f7ff fe04 	bl	8001220 <HAL_GetTick>
 8001618:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800161a:	e014      	b.n	8001646 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800161c:	f7ff fe00 	bl	8001220 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b0a      	cmp	r3, #10
 8001628:	d90d      	bls.n	8001646 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001630:	f043 0201 	orr.w	r2, r3, #1
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2203      	movs	r2, #3
 800163e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e164      	b.n	8001910 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	2b00      	cmp	r3, #0
 8001652:	d0e3      	beq.n	800161c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	699a      	ldr	r2, [r3, #24]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f042 0202 	orr.w	r2, r2, #2
 8001662:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	7c1b      	ldrb	r3, [r3, #16]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d108      	bne.n	800167e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800167a:	619a      	str	r2, [r3, #24]
 800167c:	e007      	b.n	800168e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800168c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	7c5b      	ldrb	r3, [r3, #17]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d108      	bne.n	80016a8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	699a      	ldr	r2, [r3, #24]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016a4:	619a      	str	r2, [r3, #24]
 80016a6:	e007      	b.n	80016b8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699a      	ldr	r2, [r3, #24]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80016b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7c9b      	ldrb	r3, [r3, #18]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	699a      	ldr	r2, [r3, #24]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80016ce:	619a      	str	r2, [r3, #24]
 80016d0:	e007      	b.n	80016e2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699a      	ldr	r2, [r3, #24]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80016e0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689a      	ldr	r2, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	430a      	orrs	r2, r1
 80016f6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	699a      	ldr	r2, [r3, #24]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001706:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691a      	ldr	r2, [r3, #16]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0210 	bic.w	r2, r2, #16
 8001716:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	699a      	ldr	r2, [r3, #24]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0204 	orr.w	r2, r2, #4
 800172e:	619a      	str	r2, [r3, #24]
 8001730:	e030      	b.n	8001794 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d02c      	beq.n	8001794 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d020      	beq.n	8001784 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	699a      	ldr	r2, [r3, #24]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001750:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0210 	orr.w	r2, r2, #16
 8001760:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	2b03      	cmp	r3, #3
 8001768:	d114      	bne.n	8001794 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	699a      	ldr	r2, [r3, #24]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f042 0220 	orr.w	r2, r2, #32
 8001778:	619a      	str	r2, [r3, #24]
 800177a:	e00b      	b.n	8001794 <HAL_FDCAN_Init+0x234>
 800177c:	080099c8 	.word	0x080099c8
 8001780:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	699a      	ldr	r2, [r3, #24]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f042 0220 	orr.w	r2, r2, #32
 8001792:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	3b01      	subs	r3, #1
 800179a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
 80017a0:	3b01      	subs	r3, #1
 80017a2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017a4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a1b      	ldr	r3, [r3, #32]
 80017aa:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80017ac:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80017bc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80017be:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80017c8:	d115      	bne.n	80017f6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ce:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d4:	3b01      	subs	r3, #1
 80017d6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017d8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	3b01      	subs	r3, #1
 80017e0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80017e2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	3b01      	subs	r3, #1
 80017ec:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80017f2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80017f4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00a      	beq.n	8001814 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800181c:	4413      	add	r3, r2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d011      	beq.n	8001846 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800182a:	f023 0107 	bic.w	r1, r3, #7
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	3360      	adds	r3, #96	@ 0x60
 8001836:	443b      	add	r3, r7
 8001838:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	430a      	orrs	r2, r1
 8001842:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800184a:	2b00      	cmp	r3, #0
 800184c:	d011      	beq.n	8001872 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001856:	f023 0107 	bic.w	r1, r3, #7
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	3360      	adds	r3, #96	@ 0x60
 8001862:	443b      	add	r3, r7
 8001864:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	430a      	orrs	r2, r1
 800186e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001876:	2b00      	cmp	r3, #0
 8001878:	d012      	beq.n	80018a0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8001882:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	3360      	adds	r3, #96	@ 0x60
 800188e:	443b      	add	r3, r7
 8001890:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001894:	011a      	lsls	r2, r3, #4
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d012      	beq.n	80018ce <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80018b0:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	3360      	adds	r3, #96	@ 0x60
 80018bc:	443b      	add	r3, r7
 80018be:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80018c2:	021a      	lsls	r2, r3, #8
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a11      	ldr	r2, [pc, #68]	@ (8001918 <HAL_FDCAN_Init+0x3b8>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d107      	bne.n	80018e8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	689a      	ldr	r2, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f022 0203 	bic.w	r2, r2, #3
 80018e6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 fd81 	bl	8002408 <FDCAN_CalcultateRamBlockAddresses>
 8001906:	4603      	mov	r3, r0
 8001908:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 800190c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8001910:	4618      	mov	r0, r3
 8001912:	3760      	adds	r7, #96	@ 0x60
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	4000a000 	.word	0x4000a000

0800191c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d111      	bne.n	8001954 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	e008      	b.n	8001966 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800195a:	f043 0204 	orr.w	r2, r3, #4
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
  }
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b086      	sub	sp, #24
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d141      	bne.n	8001a0e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001992:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d109      	bne.n	80019ae <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019a0:	f043 0220 	orr.w	r2, r3, #32
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e038      	b.n	8001a20 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80019b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d009      	beq.n	80019d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80019c4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e026      	b.n	8001a20 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	f000 fe93 	bl	8002714 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2101      	movs	r1, #1
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	fa01 f202 	lsl.w	r2, r1, r2
 80019fa:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80019fe:	2201      	movs	r2, #1
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	e008      	b.n	8001a20 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a14:	f043 0208 	orr.w	r2, r3, #8
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
  }
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3718      	adds	r7, #24
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b08b      	sub	sp, #44	@ 0x2c
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001a40:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001a42:	7efb      	ldrb	r3, [r7, #27]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	f040 8149 	bne.w	8001cdc <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b40      	cmp	r3, #64	@ 0x40
 8001a4e:	d14c      	bne.n	8001aea <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001a58:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d109      	bne.n	8001a74 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a66:	f043 0220 	orr.w	r2, r3, #32
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e13c      	b.n	8001cee <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001a7c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001a8a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e12a      	b.n	8001cee <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001aa0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aa8:	d10a      	bne.n	8001ac0 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8001ab2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001aba:	d101      	bne.n	8001ac0 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8001ac8:	0a1b      	lsrs	r3, r3, #8
 8001aca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001adc:	69f9      	ldr	r1, [r7, #28]
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	4413      	add	r3, r2
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae8:	e068      	b.n	8001bbc <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	2b41      	cmp	r3, #65	@ 0x41
 8001aee:	d14c      	bne.n	8001b8a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001af8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b06:	f043 0220 	orr.w	r2, r3, #32
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0ec      	b.n	8001cee <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001b1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d109      	bne.n	8001b38 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b2a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0da      	b.n	8001cee <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001b40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b48:	d10a      	bne.n	8001b60 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001b52:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001b56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b5a:	d101      	bne.n	8001b60 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b6e:	69fa      	ldr	r2, [r7, #28]
 8001b70:	4413      	add	r3, r2
 8001b72:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7c:	69f9      	ldr	r1, [r7, #28]
 8001b7e:	fb01 f303 	mul.w	r3, r1, r3
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	4413      	add	r3, r2
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b88:	e018      	b.n	8001bbc <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d309      	bcc.n	8001ba8 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001b9a:	f043 0220 	orr.w	r2, r3, #32
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0a2      	b.n	8001cee <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	4413      	add	r3, r2
 8001bba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8001bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	0c9b      	lsrs	r3, r3, #18
 8001bd6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	e005      	b.n	8001bec <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c06:	3304      	adds	r3, #4
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	0c1b      	lsrs	r3, r3, #16
 8001c1a:	f003 020f 	and.w	r2, r3, #15
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	0e1b      	lsrs	r3, r3, #24
 8001c40:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8001c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0fda      	lsrs	r2, r3, #31
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	3304      	adds	r3, #4
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
 8001c60:	e00a      	b.n	8001c78 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	6a3b      	ldr	r3, [r7, #32]
 8001c66:	441a      	add	r2, r3
 8001c68:	6839      	ldr	r1, [r7, #0]
 8001c6a:	6a3b      	ldr	r3, [r7, #32]
 8001c6c:	440b      	add	r3, r1
 8001c6e:	7812      	ldrb	r2, [r2, #0]
 8001c70:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	3301      	adds	r3, #1
 8001c76:	623b      	str	r3, [r7, #32]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cfc <HAL_FDCAN_GetRxMessage+0x2d4>)
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	461a      	mov	r2, r3
 8001c82:	6a3b      	ldr	r3, [r7, #32]
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d3ec      	bcc.n	8001c62 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b40      	cmp	r3, #64	@ 0x40
 8001c8c:	d105      	bne.n	8001c9a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8001c98:	e01e      	b.n	8001cd8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b41      	cmp	r3, #65	@ 0x41
 8001c9e:	d105      	bne.n	8001cac <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69fa      	ldr	r2, [r7, #28]
 8001ca6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 8001caa:	e015      	b.n	8001cd8 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	2b1f      	cmp	r3, #31
 8001cb0:	d808      	bhi.n	8001cc4 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2101      	movs	r1, #1
 8001cb8:	68ba      	ldr	r2, [r7, #8]
 8001cba:	fa01 f202 	lsl.w	r2, r1, r2
 8001cbe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8001cc2:	e009      	b.n	8001cd8 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f003 021f 	and.w	r2, r3, #31
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2101      	movs	r1, #1
 8001cd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e008      	b.n	8001cee <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001ce2:	f043 0208 	orr.w	r2, r3, #8
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
  }
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	372c      	adds	r7, #44	@ 0x2c
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	08009a2c 	.word	0x08009a2c

08001d00 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b087      	sub	sp, #28
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8001d12:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d002      	beq.n	8001d20 <HAL_FDCAN_ActivateNotification+0x20>
 8001d1a:	7dfb      	ldrb	r3, [r7, #23]
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d155      	bne.n	8001dcc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d108      	bne.n	8001d40 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d3e:	e014      	b.n	8001d6a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	68ba      	ldr	r2, [r7, #8]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d108      	bne.n	8001d62 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0202 	orr.w	r2, r2, #2
 8001d5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d60:	e003      	b.n	8001d6a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2203      	movs	r2, #3
 8001d68:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d009      	beq.n	8001d88 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	430a      	orrs	r2, r1
 8001d84:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d009      	beq.n	8001da6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	430a      	orrs	r2, r1
 8001da2:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <HAL_FDCAN_ActivateNotification+0xec>)
 8001db0:	4013      	ands	r3, r2
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	430b      	orrs	r3, r1
 8001db8:	6553      	str	r3, [r2, #84]	@ 0x54
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	0f9b      	lsrs	r3, r3, #30
 8001dc2:	490b      	ldr	r1, [pc, #44]	@ (8001df0 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e008      	b.n	8001dde <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001dd2:	f043 0202 	orr.w	r2, r3, #2
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	3fcfffff 	.word	0x3fcfffff
 8001df0:	4000a800 	.word	0x4000a800

08001df4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b096      	sub	sp, #88	@ 0x58
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8001dfc:	4b9a      	ldr	r3, [pc, #616]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	079b      	lsls	r3, r3, #30
 8001e02:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001e04:	4b98      	ldr	r3, [pc, #608]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	079b      	lsls	r3, r3, #30
 8001e0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e16:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8001e1a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e24:	4013      	ands	r3, r2
 8001e26:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e3a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e46:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e54:	4013      	ands	r3, r2
 8001e56:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e5e:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 8001e62:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e76:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 8001e7a:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e84:	4013      	ands	r3, r2
 8001e86:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e9a:	0a1b      	lsrs	r3, r3, #8
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d010      	beq.n	8001ec6 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d00a      	beq.n	8001ec6 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001eb8:	651a      	str	r2, [r3, #80]	@ 0x50
 8001eba:	4b6b      	ldr	r3, [pc, #428]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fa54 	bl	800236e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ec8:	0a9b      	lsrs	r3, r3, #10
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d01d      	beq.n	8001f0e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ed4:	0a9b      	lsrs	r3, r3, #10
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d017      	beq.n	8001f0e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8001ee6:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8001ef0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001efe:	651a      	str	r2, [r3, #80]	@ 0x50
 8001f00:	4b59      	ldr	r3, [pc, #356]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001f06:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 fa07 	bl	800231c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8001f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f1a:	4b54      	ldr	r3, [pc, #336]	@ (800206c <HAL_FDCAN_IRQHandler+0x278>)
 8001f1c:	400b      	ands	r3, r1
 8001f1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8001f20:	4a51      	ldr	r2, [pc, #324]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8001f22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f24:	0f9b      	lsrs	r3, r3, #30
 8001f26:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001f28:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f9c0 	bl	80022b0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001f30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00d      	beq.n	8001f52 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	@ (800206c <HAL_FDCAN_IRQHandler+0x278>)
 8001f3e:	400b      	ands	r3, r1
 8001f40:	6513      	str	r3, [r2, #80]	@ 0x50
 8001f42:	4a49      	ldr	r2, [pc, #292]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8001f44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001f46:	0f9b      	lsrs	r3, r3, #30
 8001f48:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001f4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f9ba 	bl	80022c6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8001f52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001f5e:	4b43      	ldr	r3, [pc, #268]	@ (800206c <HAL_FDCAN_IRQHandler+0x278>)
 8001f60:	400b      	ands	r3, r1
 8001f62:	6513      	str	r3, [r2, #80]	@ 0x50
 8001f64:	4a40      	ldr	r2, [pc, #256]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8001f66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001f68:	0f9b      	lsrs	r3, r3, #30
 8001f6a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001f6c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7fe fd84 	bl	8000a7c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00d      	beq.n	8001f96 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f80:	4b3a      	ldr	r3, [pc, #232]	@ (800206c <HAL_FDCAN_IRQHandler+0x278>)
 8001f82:	400b      	ands	r3, r1
 8001f84:	6513      	str	r3, [r2, #80]	@ 0x50
 8001f86:	4a38      	ldr	r2, [pc, #224]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8001f88:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001f8a:	0f9b      	lsrs	r3, r3, #30
 8001f8c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8001f8e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f9a3 	bl	80022dc <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f98:	0adb      	lsrs	r3, r3, #11
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d010      	beq.n	8001fc4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8001fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fa4:	0adb      	lsrs	r3, r3, #11
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fb6:	651a      	str	r2, [r3, #80]	@ 0x50
 8001fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f997 	bl	80022f2 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001fc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fc6:	0a5b      	lsrs	r3, r3, #9
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01d      	beq.n	800200c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fd2:	0a5b      	lsrs	r3, r3, #9
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d017      	beq.n	800200c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fe4:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ffc:	651a      	str	r2, [r3, #80]	@ 0x50
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002004:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f97d 	bl	8002306 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800200c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800200e:	0cdb      	lsrs	r3, r3, #19
 8002010:	f003 0301 	and.w	r3, r3, #1
 8002014:	2b00      	cmp	r3, #0
 8002016:	d010      	beq.n	800203a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800201a:	0cdb      	lsrs	r3, r3, #19
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00a      	beq.n	800203a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800202c:	651a      	str	r2, [r3, #80]	@ 0x50
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f000 f97c 	bl	8002332 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800203a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800203c:	0c1b      	lsrs	r3, r3, #16
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d016      	beq.n	8002074 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002048:	0c1b      	lsrs	r3, r3, #16
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d010      	beq.n	8002074 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800205a:	651a      	str	r2, [r3, #80]	@ 0x50
 800205c:	4b02      	ldr	r3, [pc, #8]	@ (8002068 <HAL_FDCAN_IRQHandler+0x274>)
 800205e:	2200      	movs	r2, #0
 8002060:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	e004      	b.n	8002070 <HAL_FDCAN_IRQHandler+0x27c>
 8002066:	bf00      	nop
 8002068:	4000a800 	.word	0x4000a800
 800206c:	3fcfffff 	.word	0x3fcfffff
 8002070:	f000 f969 	bl	8002346 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002076:	0c9b      	lsrs	r3, r3, #18
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d010      	beq.n	80020a2 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002082:	0c9b      	lsrs	r3, r3, #18
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00a      	beq.n	80020a2 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8002094:	651a      	str	r2, [r3, #80]	@ 0x50
 8002096:	4b83      	ldr	r3, [pc, #524]	@ (80022a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f95c 	bl	800235a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80020a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80020a4:	0c5b      	lsrs	r3, r3, #17
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d015      	beq.n	80020da <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80020ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020b0:	0c5b      	lsrs	r3, r3, #17
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00f      	beq.n	80020da <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020c2:	651a      	str	r2, [r3, #80]	@ 0x50
 80020c4:	4b77      	ldr	r3, [pc, #476]	@ (80022a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80020d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80020da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020e6:	4b70      	ldr	r3, [pc, #448]	@ (80022a8 <HAL_FDCAN_IRQHandler+0x4b4>)
 80020e8:	400b      	ands	r3, r1
 80020ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80020ec:	4a6d      	ldr	r2, [pc, #436]	@ (80022a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80020ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f0:	0f9b      	lsrs	r3, r3, #30
 80020f2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80020f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f94d 	bl	8002396 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80020fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d011      	beq.n	8002126 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002108:	4b67      	ldr	r3, [pc, #412]	@ (80022a8 <HAL_FDCAN_IRQHandler+0x4b4>)
 800210a:	400b      	ands	r3, r1
 800210c:	6513      	str	r3, [r2, #80]	@ 0x50
 800210e:	4a65      	ldr	r2, [pc, #404]	@ (80022a4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002112:	0f9b      	lsrs	r3, r3, #30
 8002114:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800211c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a60      	ldr	r2, [pc, #384]	@ (80022ac <HAL_FDCAN_IRQHandler+0x4b8>)
 800212c:	4293      	cmp	r3, r2
 800212e:	f040 80ac 	bne.w	800228a <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a4 	beq.w	800228a <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002154:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002156:	4013      	ands	r3, r2
 8002158:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002164:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800216e:	4013      	ands	r3, r2
 8002170:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002186:	4013      	ands	r3, r2
 8002188:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8002194:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	6a3a      	ldr	r2, [r7, #32]
 800219e:	4013      	ands	r3, r2
 80021a0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 80021ac:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80021ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d007      	beq.n	80021e0 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021d6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80021d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f8e6 	bl	80023ac <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80021e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d007      	beq.n	80021f6 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80021ec:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80021ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f8e6 	bl	80023c2 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	099b      	lsrs	r3, r3, #6
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01a      	beq.n	8002238 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d014      	beq.n	8002238 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	b29b      	uxth	r3, r3
 8002218:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002224:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2240      	movs	r2, #64	@ 0x40
 800222c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	6939      	ldr	r1, [r7, #16]
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f8d0 	bl	80023d8 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002244:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002246:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f000 f8d1 	bl	80023f0 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d00b      	beq.n	800226c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	6a3a      	ldr	r2, [r7, #32]
 800225a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	69fa      	ldr	r2, [r7, #28]
 8002278:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002290:	2b00      	cmp	r3, #0
 8002292:	d002      	beq.n	800229a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f874 	bl	8002382 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800229a:	bf00      	nop
 800229c:	3758      	adds	r7, #88	@ 0x58
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	4000a800 	.word	0x4000a800
 80022a8:	3fcfffff 	.word	0x3fcfffff
 80022ac:	4000a000 	.word	0x4000a000

080022b0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80022c6:	b480      	push	{r7}
 80022c8:	b083      	sub	sp, #12
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
 80022ce:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002306:	b480      	push	{r7}
 8002308:	b083      	sub	sp, #12
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002376:	bf00      	nop
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr

08002396 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
 800239e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80023c2:	b480      	push	{r7}
 80023c4:	b083      	sub	sp, #12
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
 80023ca:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002414:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800241e:	4ba7      	ldr	r3, [pc, #668]	@ (80026bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002420:	4013      	ands	r3, r2
 8002422:	68ba      	ldr	r2, [r7, #8]
 8002424:	0091      	lsls	r1, r2, #2
 8002426:	687a      	ldr	r2, [r7, #4]
 8002428:	6812      	ldr	r2, [r2, #0]
 800242a:	430b      	orrs	r3, r1
 800242c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002438:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002440:	041a      	lsls	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	4413      	add	r3, r2
 8002454:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800245e:	4b97      	ldr	r3, [pc, #604]	@ (80026bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002460:	4013      	ands	r3, r2
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	0091      	lsls	r1, r2, #2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	430b      	orrs	r3, r1
 800246c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002478:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	4413      	add	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80024a0:	4b86      	ldr	r3, [pc, #536]	@ (80026bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	0091      	lsls	r1, r2, #2
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6812      	ldr	r2, [r2, #0]
 80024ac:	430b      	orrs	r3, r1
 80024ae:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80024ba:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c2:	041a      	lsls	r2, r3, #16
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80024d6:	fb02 f303 	mul.w	r3, r2, r3
 80024da:	68ba      	ldr	r2, [r7, #8]
 80024dc:	4413      	add	r3, r2
 80024de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80024e8:	4b74      	ldr	r3, [pc, #464]	@ (80026bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	0091      	lsls	r1, r2, #2
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	430b      	orrs	r3, r1
 80024f6:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002502:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800250a:	041a      	lsls	r2, r3, #16
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	4413      	add	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 8002530:	4b62      	ldr	r3, [pc, #392]	@ (80026bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002532:	4013      	ands	r3, r2
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	0091      	lsls	r1, r2, #2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	430b      	orrs	r3, r1
 800253e:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800254a:	fb02 f303 	mul.w	r3, r2, r3
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	4413      	add	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800255c:	4b57      	ldr	r3, [pc, #348]	@ (80026bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800255e:	4013      	ands	r3, r2
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	0091      	lsls	r1, r2, #2
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	430b      	orrs	r3, r1
 800256a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002576:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800257e:	041a      	lsls	r2, r3, #16
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	430a      	orrs	r2, r1
 8002586:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	68ba      	ldr	r2, [r7, #8]
 8002592:	4413      	add	r3, r2
 8002594:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800259e:	4b47      	ldr	r3, [pc, #284]	@ (80026bc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	0091      	lsls	r1, r2, #2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6812      	ldr	r2, [r2, #0]
 80025aa:	430b      	orrs	r3, r1
 80025ac:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025b8:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c0:	041a      	lsls	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80025d4:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025dc:	061a      	lsls	r2, r3, #24
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025ec:	4b34      	ldr	r3, [pc, #208]	@ (80026c0 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80025ee:	4413      	add	r3, r2
 80025f0:	009a      	lsls	r2, r3, #2
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	441a      	add	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	441a      	add	r2, r3
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 8002622:	fb01 f303 	mul.w	r3, r1, r3
 8002626:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 8002640:	441a      	add	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 8002652:	fb01 f303 	mul.w	r3, r1, r3
 8002656:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 8002658:	441a      	add	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	441a      	add	r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	441a      	add	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800269e:	fb01 f303 	mul.w	r3, r1, r3
 80026a2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 80026a4:	441a      	add	r2, r3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026b2:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d915      	bls.n	80026e4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80026b8:	e006      	b.n	80026c8 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80026ba:	bf00      	nop
 80026bc:	ffff0003 	.word	0xffff0003
 80026c0:	10002b00 	.word	0x10002b00
 80026c4:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026ce:	f043 0220 	orr.w	r2, r3, #32
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2203      	movs	r2, #3
 80026dc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e010      	b.n	8002706 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	e005      	b.n	80026f8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	3304      	adds	r3, #4
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	429a      	cmp	r2, r3
 8002702:	d3f3      	bcc.n	80026ec <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3714      	adds	r7, #20
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop

08002714 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002714:	b480      	push	{r7}
 8002716:	b089      	sub	sp, #36	@ 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
 8002720:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002732:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800273a:	4313      	orrs	r3, r2
 800273c:	61fb      	str	r3, [r7, #28]
 800273e:	e00a      	b.n	8002756 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002748:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800274e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002750:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002754:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002760:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002766:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800276c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002782:	6839      	ldr	r1, [r7, #0]
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	69fa      	ldr	r2, [r7, #28]
 8002792:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	3304      	adds	r3, #4
 8002798:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	3304      	adds	r3, #4
 80027a4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80027a6:	2300      	movs	r3, #0
 80027a8:	617b      	str	r3, [r7, #20]
 80027aa:	e020      	b.n	80027ee <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3303      	adds	r3, #3
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	3302      	adds	r3, #2
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	440b      	add	r3, r1
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80027c4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	440b      	add	r3, r1
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80027d2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	440a      	add	r2, r1
 80027da:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80027dc:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	3304      	adds	r3, #4
 80027e6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3304      	adds	r3, #4
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	4a06      	ldr	r2, [pc, #24]	@ (800280c <FDCAN_CopyMessageToRAM+0xf8>)
 80027f4:	5cd3      	ldrb	r3, [r2, r3]
 80027f6:	461a      	mov	r2, r3
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d3d6      	bcc.n	80027ac <FDCAN_CopyMessageToRAM+0x98>
  }
}
 80027fe:	bf00      	nop
 8002800:	bf00      	nop
 8002802:	3724      	adds	r7, #36	@ 0x24
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	08009a2c 	.word	0x08009a2c

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800281e:	4b89      	ldr	r3, [pc, #548]	@ (8002a44 <HAL_GPIO_Init+0x234>)
 8002820:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002822:	e194      	b.n	8002b4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	2101      	movs	r1, #1
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	4013      	ands	r3, r2
 8002832:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f000 8186 	beq.w	8002b48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0303 	and.w	r3, r3, #3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d005      	beq.n	8002854 <HAL_GPIO_Init+0x44>
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d130      	bne.n	80028b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	68da      	ldr	r2, [r3, #12]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800288a:	2201      	movs	r2, #1
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	091b      	lsrs	r3, r3, #4
 80028a0:	f003 0201 	and.w	r2, r3, #1
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d017      	beq.n	80028f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d123      	bne.n	8002946 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	08da      	lsrs	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	3208      	adds	r2, #8
 8002906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	220f      	movs	r2, #15
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	4013      	ands	r3, r2
 8002920:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	691a      	ldr	r2, [r3, #16]
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	08da      	lsrs	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3208      	adds	r2, #8
 8002940:	69b9      	ldr	r1, [r7, #24]
 8002942:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f003 0203 	and.w	r2, r3, #3
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002982:	2b00      	cmp	r3, #0
 8002984:	f000 80e0 	beq.w	8002b48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002988:	4b2f      	ldr	r3, [pc, #188]	@ (8002a48 <HAL_GPIO_Init+0x238>)
 800298a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800298e:	4a2e      	ldr	r2, [pc, #184]	@ (8002a48 <HAL_GPIO_Init+0x238>)
 8002990:	f043 0302 	orr.w	r3, r3, #2
 8002994:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002998:	4b2b      	ldr	r3, [pc, #172]	@ (8002a48 <HAL_GPIO_Init+0x238>)
 800299a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029a6:	4a29      	ldr	r2, [pc, #164]	@ (8002a4c <HAL_GPIO_Init+0x23c>)
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	089b      	lsrs	r3, r3, #2
 80029ac:	3302      	adds	r3, #2
 80029ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	220f      	movs	r2, #15
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a20      	ldr	r2, [pc, #128]	@ (8002a50 <HAL_GPIO_Init+0x240>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d052      	beq.n	8002a78 <HAL_GPIO_Init+0x268>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1f      	ldr	r2, [pc, #124]	@ (8002a54 <HAL_GPIO_Init+0x244>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d031      	beq.n	8002a3e <HAL_GPIO_Init+0x22e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002a58 <HAL_GPIO_Init+0x248>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d02b      	beq.n	8002a3a <HAL_GPIO_Init+0x22a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a1d      	ldr	r2, [pc, #116]	@ (8002a5c <HAL_GPIO_Init+0x24c>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d025      	beq.n	8002a36 <HAL_GPIO_Init+0x226>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002a60 <HAL_GPIO_Init+0x250>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d01f      	beq.n	8002a32 <HAL_GPIO_Init+0x222>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <HAL_GPIO_Init+0x254>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d019      	beq.n	8002a2e <HAL_GPIO_Init+0x21e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002a68 <HAL_GPIO_Init+0x258>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d013      	beq.n	8002a2a <HAL_GPIO_Init+0x21a>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a19      	ldr	r2, [pc, #100]	@ (8002a6c <HAL_GPIO_Init+0x25c>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d00d      	beq.n	8002a26 <HAL_GPIO_Init+0x216>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a18      	ldr	r2, [pc, #96]	@ (8002a70 <HAL_GPIO_Init+0x260>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d007      	beq.n	8002a22 <HAL_GPIO_Init+0x212>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a17      	ldr	r2, [pc, #92]	@ (8002a74 <HAL_GPIO_Init+0x264>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_GPIO_Init+0x20e>
 8002a1a:	2309      	movs	r3, #9
 8002a1c:	e02d      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a1e:	230a      	movs	r3, #10
 8002a20:	e02b      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a22:	2308      	movs	r3, #8
 8002a24:	e029      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a26:	2307      	movs	r3, #7
 8002a28:	e027      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a2a:	2306      	movs	r3, #6
 8002a2c:	e025      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a2e:	2305      	movs	r3, #5
 8002a30:	e023      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a32:	2304      	movs	r3, #4
 8002a34:	e021      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a36:	2303      	movs	r3, #3
 8002a38:	e01f      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e01d      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e01b      	b.n	8002a7a <HAL_GPIO_Init+0x26a>
 8002a42:	bf00      	nop
 8002a44:	58000080 	.word	0x58000080
 8002a48:	58024400 	.word	0x58024400
 8002a4c:	58000400 	.word	0x58000400
 8002a50:	58020000 	.word	0x58020000
 8002a54:	58020400 	.word	0x58020400
 8002a58:	58020800 	.word	0x58020800
 8002a5c:	58020c00 	.word	0x58020c00
 8002a60:	58021000 	.word	0x58021000
 8002a64:	58021400 	.word	0x58021400
 8002a68:	58021800 	.word	0x58021800
 8002a6c:	58021c00 	.word	0x58021c00
 8002a70:	58022000 	.word	0x58022000
 8002a74:	58022400 	.word	0x58022400
 8002a78:	2300      	movs	r3, #0
 8002a7a:	69fa      	ldr	r2, [r7, #28]
 8002a7c:	f002 0203 	and.w	r2, r2, #3
 8002a80:	0092      	lsls	r2, r2, #2
 8002a82:	4093      	lsls	r3, r2
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a8a:	4938      	ldr	r1, [pc, #224]	@ (8002b6c <HAL_GPIO_Init+0x35c>)
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	089b      	lsrs	r3, r3, #2
 8002a90:	3302      	adds	r3, #2
 8002a92:	69ba      	ldr	r2, [r7, #24]
 8002a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002abe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002ac6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d003      	beq.n	8002aec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ae4:	69ba      	ldr	r2, [r7, #24]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002aec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	f47f ae63 	bne.w	8002824 <HAL_GPIO_Init+0x14>
  }
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	3724      	adds	r7, #36	@ 0x24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	58000400 	.word	0x58000400

08002b70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002b78:	4b19      	ldr	r3, [pc, #100]	@ (8002be0 <HAL_PWREx_ConfigSupply+0x70>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d00a      	beq.n	8002b9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b84:	4b16      	ldr	r3, [pc, #88]	@ (8002be0 <HAL_PWREx_ConfigSupply+0x70>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d001      	beq.n	8002b96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e01f      	b.n	8002bd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e01d      	b.n	8002bd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b9a:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_PWREx_ConfigSupply+0x70>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f023 0207 	bic.w	r2, r3, #7
 8002ba2:	490f      	ldr	r1, [pc, #60]	@ (8002be0 <HAL_PWREx_ConfigSupply+0x70>)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002baa:	f7fe fb39 	bl	8001220 <HAL_GetTick>
 8002bae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bb0:	e009      	b.n	8002bc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002bb2:	f7fe fb35 	bl	8001220 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002bc0:	d901      	bls.n	8002bc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e007      	b.n	8002bd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_PWREx_ConfigSupply+0x70>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bd2:	d1ee      	bne.n	8002bb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	58024800 	.word	0x58024800

08002be4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08c      	sub	sp, #48	@ 0x30
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d102      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	f000 bc48 	b.w	8003488 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 8088 	beq.w	8002d16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c06:	4b99      	ldr	r3, [pc, #612]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002c10:	4b96      	ldr	r3, [pc, #600]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c14:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c18:	2b10      	cmp	r3, #16
 8002c1a:	d007      	beq.n	8002c2c <HAL_RCC_OscConfig+0x48>
 8002c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c1e:	2b18      	cmp	r3, #24
 8002c20:	d111      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62>
 8002c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c24:	f003 0303 	and.w	r3, r3, #3
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	4b8f      	ldr	r3, [pc, #572]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d06d      	beq.n	8002d14 <HAL_RCC_OscConfig+0x130>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d169      	bne.n	8002d14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f000 bc21 	b.w	8003488 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c4e:	d106      	bne.n	8002c5e <HAL_RCC_OscConfig+0x7a>
 8002c50:	4b86      	ldr	r3, [pc, #536]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a85      	ldr	r2, [pc, #532]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5a:	6013      	str	r3, [r2, #0]
 8002c5c:	e02e      	b.n	8002cbc <HAL_RCC_OscConfig+0xd8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x9c>
 8002c66:	4b81      	ldr	r3, [pc, #516]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a80      	ldr	r2, [pc, #512]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b7e      	ldr	r3, [pc, #504]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a7d      	ldr	r2, [pc, #500]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c78:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e01d      	b.n	8002cbc <HAL_RCC_OscConfig+0xd8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c88:	d10c      	bne.n	8002ca4 <HAL_RCC_OscConfig+0xc0>
 8002c8a:	4b78      	ldr	r3, [pc, #480]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a77      	ldr	r2, [pc, #476]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	4b75      	ldr	r3, [pc, #468]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a74      	ldr	r2, [pc, #464]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002c9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ca0:	6013      	str	r3, [r2, #0]
 8002ca2:	e00b      	b.n	8002cbc <HAL_RCC_OscConfig+0xd8>
 8002ca4:	4b71      	ldr	r3, [pc, #452]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a70      	ldr	r2, [pc, #448]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cae:	6013      	str	r3, [r2, #0]
 8002cb0:	4b6e      	ldr	r3, [pc, #440]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a6d      	ldr	r2, [pc, #436]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d013      	beq.n	8002cec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe faac 	bl	8001220 <HAL_GetTick>
 8002cc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ccc:	f7fe faa8 	bl	8001220 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b64      	cmp	r3, #100	@ 0x64
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e3d4      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cde:	4b63      	ldr	r3, [pc, #396]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0f0      	beq.n	8002ccc <HAL_RCC_OscConfig+0xe8>
 8002cea:	e014      	b.n	8002d16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cec:	f7fe fa98 	bl	8001220 <HAL_GetTick>
 8002cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002cf2:	e008      	b.n	8002d06 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cf4:	f7fe fa94 	bl	8001220 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	2b64      	cmp	r3, #100	@ 0x64
 8002d00:	d901      	bls.n	8002d06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e3c0      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d06:	4b59      	ldr	r3, [pc, #356]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1f0      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x110>
 8002d12:	e000      	b.n	8002d16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 80ca 	beq.w	8002eb8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d24:	4b51      	ldr	r3, [pc, #324]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d2e:	4b4f      	ldr	r3, [pc, #316]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d007      	beq.n	8002d4a <HAL_RCC_OscConfig+0x166>
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	2b18      	cmp	r3, #24
 8002d3e:	d156      	bne.n	8002dee <HAL_RCC_OscConfig+0x20a>
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d151      	bne.n	8002dee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4a:	4b48      	ldr	r3, [pc, #288]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d005      	beq.n	8002d62 <HAL_RCC_OscConfig+0x17e>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e392      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d62:	4b42      	ldr	r3, [pc, #264]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 0219 	bic.w	r2, r3, #25
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	493f      	ldr	r1, [pc, #252]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fa54 	bl	8001220 <HAL_GetTick>
 8002d78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d7c:	f7fe fa50 	bl	8001220 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e37c      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d8e:	4b37      	ldr	r3, [pc, #220]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d0f0      	beq.n	8002d7c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9a:	f7fe fa4d 	bl	8001238 <HAL_GetREVID>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d817      	bhi.n	8002dd8 <HAL_RCC_OscConfig+0x1f4>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	2b40      	cmp	r3, #64	@ 0x40
 8002dae:	d108      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x1de>
 8002db0:	4b2e      	ldr	r3, [pc, #184]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002db8:	4a2c      	ldr	r2, [pc, #176]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002dba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dbe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc0:	e07a      	b.n	8002eb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc2:	4b2a      	ldr	r3, [pc, #168]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	031b      	lsls	r3, r3, #12
 8002dd0:	4926      	ldr	r1, [pc, #152]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dd6:	e06f      	b.n	8002eb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd8:	4b24      	ldr	r3, [pc, #144]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	061b      	lsls	r3, r3, #24
 8002de6:	4921      	ldr	r1, [pc, #132]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dec:	e064      	b.n	8002eb8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d047      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002df6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 0219 	bic.w	r2, r3, #25
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	491a      	ldr	r1, [pc, #104]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fa0a 	bl	8001220 <HAL_GetTick>
 8002e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e10:	f7fe fa06 	bl	8001220 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e332      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e22:	4b12      	ldr	r3, [pc, #72]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0304 	and.w	r3, r3, #4
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0f0      	beq.n	8002e10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e2e:	f7fe fa03 	bl	8001238 <HAL_GetREVID>
 8002e32:	4603      	mov	r3, r0
 8002e34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d819      	bhi.n	8002e70 <HAL_RCC_OscConfig+0x28c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b40      	cmp	r3, #64	@ 0x40
 8002e42:	d108      	bne.n	8002e56 <HAL_RCC_OscConfig+0x272>
 8002e44:	4b09      	ldr	r3, [pc, #36]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002e4c:	4a07      	ldr	r2, [pc, #28]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e52:	6053      	str	r3, [r2, #4]
 8002e54:	e030      	b.n	8002eb8 <HAL_RCC_OscConfig+0x2d4>
 8002e56:	4b05      	ldr	r3, [pc, #20]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	031b      	lsls	r3, r3, #12
 8002e64:	4901      	ldr	r1, [pc, #4]	@ (8002e6c <HAL_RCC_OscConfig+0x288>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
 8002e6a:	e025      	b.n	8002eb8 <HAL_RCC_OscConfig+0x2d4>
 8002e6c:	58024400 	.word	0x58024400
 8002e70:	4b9a      	ldr	r3, [pc, #616]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	061b      	lsls	r3, r3, #24
 8002e7e:	4997      	ldr	r1, [pc, #604]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
 8002e84:	e018      	b.n	8002eb8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b95      	ldr	r3, [pc, #596]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a94      	ldr	r2, [pc, #592]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002e8c:	f023 0301 	bic.w	r3, r3, #1
 8002e90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e92:	f7fe f9c5 	bl	8001220 <HAL_GetTick>
 8002e96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e98:	e008      	b.n	8002eac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e9a:	f7fe f9c1 	bl	8001220 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b02      	cmp	r3, #2
 8002ea6:	d901      	bls.n	8002eac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e2ed      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002eac:	4b8b      	ldr	r3, [pc, #556]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1f0      	bne.n	8002e9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 80a9 	beq.w	8003018 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec6:	4b85      	ldr	r3, [pc, #532]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ece:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ed0:	4b82      	ldr	r3, [pc, #520]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d007      	beq.n	8002eec <HAL_RCC_OscConfig+0x308>
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b18      	cmp	r3, #24
 8002ee0:	d13a      	bne.n	8002f58 <HAL_RCC_OscConfig+0x374>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d135      	bne.n	8002f58 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eec:	4b7b      	ldr	r3, [pc, #492]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_RCC_OscConfig+0x320>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b80      	cmp	r3, #128	@ 0x80
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e2c1      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f04:	f7fe f998 	bl	8001238 <HAL_GetREVID>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d817      	bhi.n	8002f42 <HAL_RCC_OscConfig+0x35e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d108      	bne.n	8002f2c <HAL_RCC_OscConfig+0x348>
 8002f1a:	4b70      	ldr	r3, [pc, #448]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002f22:	4a6e      	ldr	r2, [pc, #440]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002f24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002f28:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f2a:	e075      	b.n	8003018 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f2c:	4b6b      	ldr	r3, [pc, #428]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	069b      	lsls	r3, r3, #26
 8002f3a:	4968      	ldr	r1, [pc, #416]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f40:	e06a      	b.n	8003018 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f42:	4b66      	ldr	r3, [pc, #408]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	061b      	lsls	r3, r3, #24
 8002f50:	4962      	ldr	r1, [pc, #392]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002f56:	e05f      	b.n	8003018 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d042      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002f60:	4b5e      	ldr	r3, [pc, #376]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a5d      	ldr	r2, [pc, #372]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002f66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe f958 	bl	8001220 <HAL_GetTick>
 8002f70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f74:	f7fe f954 	bl	8001220 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e280      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f86:	4b55      	ldr	r3, [pc, #340]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f92:	f7fe f951 	bl	8001238 <HAL_GetREVID>
 8002f96:	4603      	mov	r3, r0
 8002f98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d817      	bhi.n	8002fd0 <HAL_RCC_OscConfig+0x3ec>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	d108      	bne.n	8002fba <HAL_RCC_OscConfig+0x3d6>
 8002fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002fb0:	4a4a      	ldr	r2, [pc, #296]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002fb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fb6:	6053      	str	r3, [r2, #4]
 8002fb8:	e02e      	b.n	8003018 <HAL_RCC_OscConfig+0x434>
 8002fba:	4b48      	ldr	r3, [pc, #288]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	069b      	lsls	r3, r3, #26
 8002fc8:	4944      	ldr	r1, [pc, #272]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]
 8002fce:	e023      	b.n	8003018 <HAL_RCC_OscConfig+0x434>
 8002fd0:	4b42      	ldr	r3, [pc, #264]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	061b      	lsls	r3, r3, #24
 8002fde:	493f      	ldr	r1, [pc, #252]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60cb      	str	r3, [r1, #12]
 8002fe4:	e018      	b.n	8003018 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a3c      	ldr	r2, [pc, #240]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8002fec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fe f915 	bl	8001220 <HAL_GetTick>
 8002ff6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ffa:	f7fe f911 	bl	8001220 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e23d      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800300c:	4b33      	ldr	r3, [pc, #204]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d1f0      	bne.n	8002ffa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0308 	and.w	r3, r3, #8
 8003020:	2b00      	cmp	r3, #0
 8003022:	d036      	beq.n	8003092 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d019      	beq.n	8003060 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800302c:	4b2b      	ldr	r3, [pc, #172]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 800302e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003030:	4a2a      	ldr	r2, [pc, #168]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003038:	f7fe f8f2 	bl	8001220 <HAL_GetTick>
 800303c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800303e:	e008      	b.n	8003052 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003040:	f7fe f8ee 	bl	8001220 <HAL_GetTick>
 8003044:	4602      	mov	r2, r0
 8003046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	2b02      	cmp	r3, #2
 800304c:	d901      	bls.n	8003052 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800304e:	2303      	movs	r3, #3
 8003050:	e21a      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003052:	4b22      	ldr	r3, [pc, #136]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8003054:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d0f0      	beq.n	8003040 <HAL_RCC_OscConfig+0x45c>
 800305e:	e018      	b.n	8003092 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003060:	4b1e      	ldr	r3, [pc, #120]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8003062:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003064:	4a1d      	ldr	r2, [pc, #116]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306c:	f7fe f8d8 	bl	8001220 <HAL_GetTick>
 8003070:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003074:	f7fe f8d4 	bl	8001220 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e200      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003086:	4b15      	ldr	r3, [pc, #84]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 8003088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0320 	and.w	r3, r3, #32
 800309a:	2b00      	cmp	r3, #0
 800309c:	d039      	beq.n	8003112 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d01c      	beq.n	80030e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80030a6:	4b0d      	ldr	r3, [pc, #52]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a0c      	ldr	r2, [pc, #48]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 80030ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030b2:	f7fe f8b5 	bl	8001220 <HAL_GetTick>
 80030b6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030ba:	f7fe f8b1 	bl	8001220 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e1dd      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80030cc:	4b03      	ldr	r3, [pc, #12]	@ (80030dc <HAL_RCC_OscConfig+0x4f8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCC_OscConfig+0x4d6>
 80030d8:	e01b      	b.n	8003112 <HAL_RCC_OscConfig+0x52e>
 80030da:	bf00      	nop
 80030dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80030e0:	4b9b      	ldr	r3, [pc, #620]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a9a      	ldr	r2, [pc, #616]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80030e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80030ec:	f7fe f898 	bl	8001220 <HAL_GetTick>
 80030f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80030f4:	f7fe f894 	bl	8001220 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e1c0      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003106:	4b92      	ldr	r3, [pc, #584]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0304 	and.w	r3, r3, #4
 800311a:	2b00      	cmp	r3, #0
 800311c:	f000 8081 	beq.w	8003222 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003120:	4b8c      	ldr	r3, [pc, #560]	@ (8003354 <HAL_RCC_OscConfig+0x770>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a8b      	ldr	r2, [pc, #556]	@ (8003354 <HAL_RCC_OscConfig+0x770>)
 8003126:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800312a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800312c:	f7fe f878 	bl	8001220 <HAL_GetTick>
 8003130:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003134:	f7fe f874 	bl	8001220 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b64      	cmp	r3, #100	@ 0x64
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e1a0      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003146:	4b83      	ldr	r3, [pc, #524]	@ (8003354 <HAL_RCC_OscConfig+0x770>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0f0      	beq.n	8003134 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	2b01      	cmp	r3, #1
 8003158:	d106      	bne.n	8003168 <HAL_RCC_OscConfig+0x584>
 800315a:	4b7d      	ldr	r3, [pc, #500]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	4a7c      	ldr	r2, [pc, #496]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6713      	str	r3, [r2, #112]	@ 0x70
 8003166:	e02d      	b.n	80031c4 <HAL_RCC_OscConfig+0x5e0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10c      	bne.n	800318a <HAL_RCC_OscConfig+0x5a6>
 8003170:	4b77      	ldr	r3, [pc, #476]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003174:	4a76      	ldr	r2, [pc, #472]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003176:	f023 0301 	bic.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	@ 0x70
 800317c:	4b74      	ldr	r3, [pc, #464]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 800317e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003180:	4a73      	ldr	r2, [pc, #460]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003182:	f023 0304 	bic.w	r3, r3, #4
 8003186:	6713      	str	r3, [r2, #112]	@ 0x70
 8003188:	e01c      	b.n	80031c4 <HAL_RCC_OscConfig+0x5e0>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b05      	cmp	r3, #5
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x5c8>
 8003192:	4b6f      	ldr	r3, [pc, #444]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003196:	4a6e      	ldr	r2, [pc, #440]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003198:	f043 0304 	orr.w	r3, r3, #4
 800319c:	6713      	str	r3, [r2, #112]	@ 0x70
 800319e:	4b6c      	ldr	r3, [pc, #432]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80031a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031a2:	4a6b      	ldr	r2, [pc, #428]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031aa:	e00b      	b.n	80031c4 <HAL_RCC_OscConfig+0x5e0>
 80031ac:	4b68      	ldr	r3, [pc, #416]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b0:	4a67      	ldr	r2, [pc, #412]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b8:	4b65      	ldr	r3, [pc, #404]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80031ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031bc:	4a64      	ldr	r2, [pc, #400]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80031be:	f023 0304 	bic.w	r3, r3, #4
 80031c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d015      	beq.n	80031f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe f828 	bl	8001220 <HAL_GetTick>
 80031d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fe f824 	bl	8001220 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e14e      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80031ea:	4b59      	ldr	r3, [pc, #356]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80031ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ee      	beq.n	80031d4 <HAL_RCC_OscConfig+0x5f0>
 80031f6:	e014      	b.n	8003222 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031f8:	f7fe f812 	bl	8001220 <HAL_GetTick>
 80031fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80031fe:	e00a      	b.n	8003216 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003200:	f7fe f80e 	bl	8001220 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320e:	4293      	cmp	r3, r2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e138      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003216:	4b4e      	ldr	r3, [pc, #312]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1ee      	bne.n	8003200 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 812d 	beq.w	8003486 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800322c:	4b48      	ldr	r3, [pc, #288]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003234:	2b18      	cmp	r3, #24
 8003236:	f000 80bd 	beq.w	80033b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323e:	2b02      	cmp	r3, #2
 8003240:	f040 809e 	bne.w	8003380 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003244:	4b42      	ldr	r3, [pc, #264]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a41      	ldr	r2, [pc, #260]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 800324a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800324e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fd ffe6 	bl	8001220 <HAL_GetTick>
 8003254:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003258:	f7fd ffe2 	bl	8001220 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e10e      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800326a:	4b39      	ldr	r3, [pc, #228]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003276:	4b36      	ldr	r3, [pc, #216]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003278:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800327a:	4b37      	ldr	r3, [pc, #220]	@ (8003358 <HAL_RCC_OscConfig+0x774>)
 800327c:	4013      	ands	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	430a      	orrs	r2, r1
 800328a:	4931      	ldr	r1, [pc, #196]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 800328c:	4313      	orrs	r3, r2
 800328e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003294:	3b01      	subs	r3, #1
 8003296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800329e:	3b01      	subs	r3, #1
 80032a0:	025b      	lsls	r3, r3, #9
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	431a      	orrs	r2, r3
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032aa:	3b01      	subs	r3, #1
 80032ac:	041b      	lsls	r3, r3, #16
 80032ae:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	3b01      	subs	r3, #1
 80032ba:	061b      	lsls	r3, r3, #24
 80032bc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80032c0:	4923      	ldr	r1, [pc, #140]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80032c6:	4b22      	ldr	r3, [pc, #136]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80032c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ca:	4a21      	ldr	r2, [pc, #132]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80032d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032d6:	4b21      	ldr	r3, [pc, #132]	@ (800335c <HAL_RCC_OscConfig+0x778>)
 80032d8:	4013      	ands	r3, r2
 80032da:	687a      	ldr	r2, [r7, #4]
 80032dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032de:	00d2      	lsls	r2, r2, #3
 80032e0:	491b      	ldr	r1, [pc, #108]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80032e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	f023 020c 	bic.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	4917      	ldr	r1, [pc, #92]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80032f8:	4b15      	ldr	r3, [pc, #84]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 80032fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032fc:	f023 0202 	bic.w	r2, r3, #2
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003304:	4912      	ldr	r1, [pc, #72]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003306:	4313      	orrs	r3, r2
 8003308:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800330a:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	4a10      	ldr	r2, [pc, #64]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003314:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003316:	4b0e      	ldr	r3, [pc, #56]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331a:	4a0d      	ldr	r2, [pc, #52]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 800331c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003320:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003322:	4b0b      	ldr	r3, [pc, #44]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003328:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800332c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800332e:	4b08      	ldr	r3, [pc, #32]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003332:	4a07      	ldr	r2, [pc, #28]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003334:	f043 0301 	orr.w	r3, r3, #1
 8003338:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800333a:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a04      	ldr	r2, [pc, #16]	@ (8003350 <HAL_RCC_OscConfig+0x76c>)
 8003340:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003346:	f7fd ff6b 	bl	8001220 <HAL_GetTick>
 800334a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800334c:	e011      	b.n	8003372 <HAL_RCC_OscConfig+0x78e>
 800334e:	bf00      	nop
 8003350:	58024400 	.word	0x58024400
 8003354:	58024800 	.word	0x58024800
 8003358:	fffffc0c 	.word	0xfffffc0c
 800335c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003360:	f7fd ff5e 	bl	8001220 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e08a      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003372:	4b47      	ldr	r3, [pc, #284]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d0f0      	beq.n	8003360 <HAL_RCC_OscConfig+0x77c>
 800337e:	e082      	b.n	8003486 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003380:	4b43      	ldr	r3, [pc, #268]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a42      	ldr	r2, [pc, #264]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 8003386:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800338a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fd ff48 	bl	8001220 <HAL_GetTick>
 8003390:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fd ff44 	bl	8001220 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e070      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x7b0>
 80033b2:	e068      	b.n	8003486 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80033b4:	4b36      	ldr	r3, [pc, #216]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 80033b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80033ba:	4b35      	ldr	r3, [pc, #212]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 80033bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d031      	beq.n	800342c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	f003 0203 	and.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d12a      	bne.n	800342c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033e2:	429a      	cmp	r2, r3
 80033e4:	d122      	bne.n	800342c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d11a      	bne.n	800342c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	0a5b      	lsrs	r3, r3, #9
 80033fa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003402:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d111      	bne.n	800342c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	0c1b      	lsrs	r3, r3, #16
 800340c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003414:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003416:	429a      	cmp	r2, r3
 8003418:	d108      	bne.n	800342c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	0e1b      	lsrs	r3, r3, #24
 800341e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003426:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e02b      	b.n	8003488 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003430:	4b17      	ldr	r3, [pc, #92]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 8003432:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003434:	08db      	lsrs	r3, r3, #3
 8003436:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800343a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	429a      	cmp	r2, r3
 8003444:	d01f      	beq.n	8003486 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003446:	4b12      	ldr	r3, [pc, #72]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 8003448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344a:	4a11      	ldr	r2, [pc, #68]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003452:	f7fd fee5 	bl	8001220 <HAL_GetTick>
 8003456:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003458:	bf00      	nop
 800345a:	f7fd fee1 	bl	8001220 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	4293      	cmp	r3, r2
 8003464:	d0f9      	beq.n	800345a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003466:	4b0a      	ldr	r3, [pc, #40]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 8003468:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800346a:	4b0a      	ldr	r3, [pc, #40]	@ (8003494 <HAL_RCC_OscConfig+0x8b0>)
 800346c:	4013      	ands	r3, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003472:	00d2      	lsls	r2, r2, #3
 8003474:	4906      	ldr	r1, [pc, #24]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 8003476:	4313      	orrs	r3, r2
 8003478:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800347a:	4b05      	ldr	r3, [pc, #20]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	4a04      	ldr	r2, [pc, #16]	@ (8003490 <HAL_RCC_OscConfig+0x8ac>)
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3730      	adds	r7, #48	@ 0x30
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	58024400 	.word	0x58024400
 8003494:	ffff0007 	.word	0xffff0007

08003498 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e19c      	b.n	80037e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034ac:	4b8a      	ldr	r3, [pc, #552]	@ (80036d8 <HAL_RCC_ClockConfig+0x240>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 030f 	and.w	r3, r3, #15
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d910      	bls.n	80034dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ba:	4b87      	ldr	r3, [pc, #540]	@ (80036d8 <HAL_RCC_ClockConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f023 020f 	bic.w	r2, r3, #15
 80034c2:	4985      	ldr	r1, [pc, #532]	@ (80036d8 <HAL_RCC_ClockConfig+0x240>)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ca:	4b83      	ldr	r3, [pc, #524]	@ (80036d8 <HAL_RCC_ClockConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d001      	beq.n	80034dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e184      	b.n	80037e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0304 	and.w	r3, r3, #4
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d010      	beq.n	800350a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	4b7b      	ldr	r3, [pc, #492]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d908      	bls.n	800350a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034f8:	4b78      	ldr	r3, [pc, #480]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	691b      	ldr	r3, [r3, #16]
 8003504:	4975      	ldr	r1, [pc, #468]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003506:	4313      	orrs	r3, r2
 8003508:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0308 	and.w	r3, r3, #8
 8003512:	2b00      	cmp	r3, #0
 8003514:	d010      	beq.n	8003538 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	4b70      	ldr	r3, [pc, #448]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003522:	429a      	cmp	r2, r3
 8003524:	d908      	bls.n	8003538 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003526:	4b6d      	ldr	r3, [pc, #436]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	496a      	ldr	r1, [pc, #424]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003534:	4313      	orrs	r3, r2
 8003536:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0310 	and.w	r3, r3, #16
 8003540:	2b00      	cmp	r3, #0
 8003542:	d010      	beq.n	8003566 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699a      	ldr	r2, [r3, #24]
 8003548:	4b64      	ldr	r3, [pc, #400]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003550:	429a      	cmp	r2, r3
 8003552:	d908      	bls.n	8003566 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003554:	4b61      	ldr	r3, [pc, #388]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003556:	69db      	ldr	r3, [r3, #28]
 8003558:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	699b      	ldr	r3, [r3, #24]
 8003560:	495e      	ldr	r1, [pc, #376]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003562:	4313      	orrs	r3, r2
 8003564:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0320 	and.w	r3, r3, #32
 800356e:	2b00      	cmp	r3, #0
 8003570:	d010      	beq.n	8003594 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69da      	ldr	r2, [r3, #28]
 8003576:	4b59      	ldr	r3, [pc, #356]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800357e:	429a      	cmp	r2, r3
 8003580:	d908      	bls.n	8003594 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003582:	4b56      	ldr	r3, [pc, #344]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	4953      	ldr	r1, [pc, #332]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003590:	4313      	orrs	r3, r2
 8003592:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d010      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	4b4d      	ldr	r3, [pc, #308]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d908      	bls.n	80035c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b4a      	ldr	r3, [pc, #296]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	f023 020f 	bic.w	r2, r3, #15
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	4947      	ldr	r1, [pc, #284]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d055      	beq.n	800367a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80035ce:	4b43      	ldr	r3, [pc, #268]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	4940      	ldr	r1, [pc, #256]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d107      	bne.n	80035f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035e8:	4b3c      	ldr	r3, [pc, #240]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d121      	bne.n	8003638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0f6      	b.n	80037e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003600:	4b36      	ldr	r3, [pc, #216]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d115      	bne.n	8003638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0ea      	b.n	80037e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d107      	bne.n	8003628 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003618:	4b30      	ldr	r3, [pc, #192]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0de      	b.n	80037e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003628:	4b2c      	ldr	r3, [pc, #176]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d101      	bne.n	8003638 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0d6      	b.n	80037e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003638:	4b28      	ldr	r3, [pc, #160]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	f023 0207 	bic.w	r2, r3, #7
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4925      	ldr	r1, [pc, #148]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003646:	4313      	orrs	r3, r2
 8003648:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800364a:	f7fd fde9 	bl	8001220 <HAL_GetTick>
 800364e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003650:	e00a      	b.n	8003668 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003652:	f7fd fde5 	bl	8001220 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e0be      	b.n	80037e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003668:	4b1c      	ldr	r3, [pc, #112]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	00db      	lsls	r3, r3, #3
 8003676:	429a      	cmp	r2, r3
 8003678:	d1eb      	bne.n	8003652 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	2b00      	cmp	r3, #0
 8003684:	d010      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	4b14      	ldr	r3, [pc, #80]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	429a      	cmp	r2, r3
 8003694:	d208      	bcs.n	80036a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003696:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f023 020f 	bic.w	r2, r3, #15
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	490e      	ldr	r1, [pc, #56]	@ (80036dc <HAL_RCC_ClockConfig+0x244>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a8:	4b0b      	ldr	r3, [pc, #44]	@ (80036d8 <HAL_RCC_ClockConfig+0x240>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d214      	bcs.n	80036e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b08      	ldr	r3, [pc, #32]	@ (80036d8 <HAL_RCC_ClockConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f023 020f 	bic.w	r2, r3, #15
 80036be:	4906      	ldr	r1, [pc, #24]	@ (80036d8 <HAL_RCC_ClockConfig+0x240>)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c6:	4b04      	ldr	r3, [pc, #16]	@ (80036d8 <HAL_RCC_ClockConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	683a      	ldr	r2, [r7, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d005      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e086      	b.n	80037e6 <HAL_RCC_ClockConfig+0x34e>
 80036d8:	52002000 	.word	0x52002000
 80036dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d010      	beq.n	800370e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691a      	ldr	r2, [r3, #16]
 80036f0:	4b3f      	ldr	r3, [pc, #252]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d208      	bcs.n	800370e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036fc:	4b3c      	ldr	r3, [pc, #240]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	4939      	ldr	r1, [pc, #228]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 800370a:	4313      	orrs	r3, r2
 800370c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d010      	beq.n	800373c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695a      	ldr	r2, [r3, #20]
 800371e:	4b34      	ldr	r3, [pc, #208]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003726:	429a      	cmp	r2, r3
 8003728:	d208      	bcs.n	800373c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800372a:	4b31      	ldr	r3, [pc, #196]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	492e      	ldr	r1, [pc, #184]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 8003738:	4313      	orrs	r3, r2
 800373a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	699a      	ldr	r2, [r3, #24]
 800374c:	4b28      	ldr	r3, [pc, #160]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003754:	429a      	cmp	r2, r3
 8003756:	d208      	bcs.n	800376a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003758:	4b25      	ldr	r3, [pc, #148]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 800375a:	69db      	ldr	r3, [r3, #28]
 800375c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	4922      	ldr	r1, [pc, #136]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 8003766:	4313      	orrs	r3, r2
 8003768:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b00      	cmp	r3, #0
 8003774:	d010      	beq.n	8003798 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	4b1d      	ldr	r3, [pc, #116]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003782:	429a      	cmp	r2, r3
 8003784:	d208      	bcs.n	8003798 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003786:	4b1a      	ldr	r3, [pc, #104]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	4917      	ldr	r1, [pc, #92]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 8003794:	4313      	orrs	r3, r2
 8003796:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003798:	f000 f834 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 800379c:	4602      	mov	r2, r0
 800379e:	4b14      	ldr	r3, [pc, #80]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	0a1b      	lsrs	r3, r3, #8
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	4912      	ldr	r1, [pc, #72]	@ (80037f4 <HAL_RCC_ClockConfig+0x35c>)
 80037aa:	5ccb      	ldrb	r3, [r1, r3]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037b6:	4b0e      	ldr	r3, [pc, #56]	@ (80037f0 <HAL_RCC_ClockConfig+0x358>)
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	f003 030f 	and.w	r3, r3, #15
 80037be:	4a0d      	ldr	r2, [pc, #52]	@ (80037f4 <HAL_RCC_ClockConfig+0x35c>)
 80037c0:	5cd3      	ldrb	r3, [r2, r3]
 80037c2:	f003 031f 	and.w	r3, r3, #31
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	fa22 f303 	lsr.w	r3, r2, r3
 80037cc:	4a0a      	ldr	r2, [pc, #40]	@ (80037f8 <HAL_RCC_ClockConfig+0x360>)
 80037ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037d0:	4a0a      	ldr	r2, [pc, #40]	@ (80037fc <HAL_RCC_ClockConfig+0x364>)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80037d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003800 <HAL_RCC_ClockConfig+0x368>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fd fcd6 	bl	800118c <HAL_InitTick>
 80037e0:	4603      	mov	r3, r0
 80037e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	58024400 	.word	0x58024400
 80037f4:	08009a1c 	.word	0x08009a1c
 80037f8:	24000004 	.word	0x24000004
 80037fc:	24000000 	.word	0x24000000
 8003800:	24000008 	.word	0x24000008

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	b480      	push	{r7}
 8003806:	b089      	sub	sp, #36	@ 0x24
 8003808:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800380a:	4bb3      	ldr	r3, [pc, #716]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003812:	2b18      	cmp	r3, #24
 8003814:	f200 8155 	bhi.w	8003ac2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003818:	a201      	add	r2, pc, #4	@ (adr r2, 8003820 <HAL_RCC_GetSysClockFreq+0x1c>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	08003885 	.word	0x08003885
 8003824:	08003ac3 	.word	0x08003ac3
 8003828:	08003ac3 	.word	0x08003ac3
 800382c:	08003ac3 	.word	0x08003ac3
 8003830:	08003ac3 	.word	0x08003ac3
 8003834:	08003ac3 	.word	0x08003ac3
 8003838:	08003ac3 	.word	0x08003ac3
 800383c:	08003ac3 	.word	0x08003ac3
 8003840:	080038ab 	.word	0x080038ab
 8003844:	08003ac3 	.word	0x08003ac3
 8003848:	08003ac3 	.word	0x08003ac3
 800384c:	08003ac3 	.word	0x08003ac3
 8003850:	08003ac3 	.word	0x08003ac3
 8003854:	08003ac3 	.word	0x08003ac3
 8003858:	08003ac3 	.word	0x08003ac3
 800385c:	08003ac3 	.word	0x08003ac3
 8003860:	080038b1 	.word	0x080038b1
 8003864:	08003ac3 	.word	0x08003ac3
 8003868:	08003ac3 	.word	0x08003ac3
 800386c:	08003ac3 	.word	0x08003ac3
 8003870:	08003ac3 	.word	0x08003ac3
 8003874:	08003ac3 	.word	0x08003ac3
 8003878:	08003ac3 	.word	0x08003ac3
 800387c:	08003ac3 	.word	0x08003ac3
 8003880:	080038b7 	.word	0x080038b7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003884:	4b94      	ldr	r3, [pc, #592]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003890:	4b91      	ldr	r3, [pc, #580]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	4a90      	ldr	r2, [pc, #576]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
 80038a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038a2:	e111      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038a4:	4b8d      	ldr	r3, [pc, #564]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038a6:	61bb      	str	r3, [r7, #24]
      break;
 80038a8:	e10e      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80038aa:	4b8d      	ldr	r3, [pc, #564]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038ac:	61bb      	str	r3, [r7, #24]
      break;
 80038ae:	e10b      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80038b0:	4b8c      	ldr	r3, [pc, #560]	@ (8003ae4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80038b2:	61bb      	str	r3, [r7, #24]
      break;
 80038b4:	e108      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038b6:	4b88      	ldr	r3, [pc, #544]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ba:	f003 0303 	and.w	r3, r3, #3
 80038be:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80038c0:	4b85      	ldr	r3, [pc, #532]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038ca:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80038cc:	4b82      	ldr	r3, [pc, #520]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80038d6:	4b80      	ldr	r3, [pc, #512]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038da:	08db      	lsrs	r3, r3, #3
 80038dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	fb02 f303 	mul.w	r3, r2, r3
 80038e6:	ee07 3a90 	vmov	s15, r3
 80038ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038ee:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80e1 	beq.w	8003abc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	f000 8083 	beq.w	8003a08 <HAL_RCC_GetSysClockFreq+0x204>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	2b02      	cmp	r3, #2
 8003906:	f200 80a1 	bhi.w	8003a4c <HAL_RCC_GetSysClockFreq+0x248>
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x114>
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d056      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003916:	e099      	b.n	8003a4c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003918:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02d      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003924:	4b6c      	ldr	r3, [pc, #432]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	08db      	lsrs	r3, r3, #3
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	4a6b      	ldr	r2, [pc, #428]	@ (8003adc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003930:	fa22 f303 	lsr.w	r3, r2, r3
 8003934:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	ee07 3a90 	vmov	s15, r3
 800393c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	ee07 3a90 	vmov	s15, r3
 8003946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800394a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800394e:	4b62      	ldr	r3, [pc, #392]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003962:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800396a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800396e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800397a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800397e:	e087      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	ee07 3a90 	vmov	s15, r3
 8003986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800398a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003aec <HAL_RCC_GetSysClockFreq+0x2e8>
 800398e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003992:	4b51      	ldr	r3, [pc, #324]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800399a:	ee07 3a90 	vmov	s15, r3
 800399e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039a6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039c2:	e065      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ce:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003af0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80039d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039d6:	4b40      	ldr	r3, [pc, #256]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039de:	ee07 3a90 	vmov	s15, r3
 80039e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80039ea:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a06:	e043      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a12:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003af4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a22:	ee07 3a90 	vmov	s15, r3
 8003a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a2e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a4a:	e021      	b.n	8003a90 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a56:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003af0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a66:	ee07 3a90 	vmov	s15, r3
 8003a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a72:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003ae8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a8e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003a90:	4b11      	ldr	r3, [pc, #68]	@ (8003ad8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a94:	0a5b      	lsrs	r3, r3, #9
 8003a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	ee07 3a90 	vmov	s15, r3
 8003aa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ab4:	ee17 3a90 	vmov	r3, s15
 8003ab8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003aba:	e005      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]
      break;
 8003ac0:	e002      	b.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003ac2:	4b07      	ldr	r3, [pc, #28]	@ (8003ae0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ac4:	61bb      	str	r3, [r7, #24]
      break;
 8003ac6:	bf00      	nop
  }

  return sysclockfreq;
 8003ac8:	69bb      	ldr	r3, [r7, #24]
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3724      	adds	r7, #36	@ 0x24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	58024400 	.word	0x58024400
 8003adc:	03d09000 	.word	0x03d09000
 8003ae0:	003d0900 	.word	0x003d0900
 8003ae4:	017d7840 	.word	0x017d7840
 8003ae8:	46000000 	.word	0x46000000
 8003aec:	4c742400 	.word	0x4c742400
 8003af0:	4a742400 	.word	0x4a742400
 8003af4:	4bbebc20 	.word	0x4bbebc20

08003af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003afe:	f7ff fe81 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 8003b02:	4602      	mov	r2, r0
 8003b04:	4b10      	ldr	r3, [pc, #64]	@ (8003b48 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	0a1b      	lsrs	r3, r3, #8
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	490f      	ldr	r1, [pc, #60]	@ (8003b4c <HAL_RCC_GetHCLKFreq+0x54>)
 8003b10:	5ccb      	ldrb	r3, [r1, r3]
 8003b12:	f003 031f 	and.w	r3, r3, #31
 8003b16:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	4a09      	ldr	r2, [pc, #36]	@ (8003b4c <HAL_RCC_GetHCLKFreq+0x54>)
 8003b26:	5cd3      	ldrb	r3, [r2, r3]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	4a07      	ldr	r2, [pc, #28]	@ (8003b50 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b36:	4a07      	ldr	r2, [pc, #28]	@ (8003b54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b3c:	4b04      	ldr	r3, [pc, #16]	@ (8003b50 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	58024400 	.word	0x58024400
 8003b4c:	08009a1c 	.word	0x08009a1c
 8003b50:	24000004 	.word	0x24000004
 8003b54:	24000000 	.word	0x24000000

08003b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003b5c:	f7ff ffcc 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4904      	ldr	r1, [pc, #16]	@ (8003b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	f003 031f 	and.w	r3, r3, #31
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	58024400 	.word	0x58024400
 8003b80:	08009a1c 	.word	0x08009a1c

08003b84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003b88:	f7ff ffb6 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	4b06      	ldr	r3, [pc, #24]	@ (8003ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	4904      	ldr	r1, [pc, #16]	@ (8003bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b9a:	5ccb      	ldrb	r3, [r1, r3]
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	58024400 	.word	0x58024400
 8003bac:	08009a1c 	.word	0x08009a1c

08003bb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b0ca      	sub	sp, #296	@ 0x128
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bd0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003bd4:	2500      	movs	r5, #0
 8003bd6:	ea54 0305 	orrs.w	r3, r4, r5
 8003bda:	d049      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003be2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003be6:	d02f      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003be8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003bec:	d828      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bf2:	d01a      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003bf4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bf8:	d822      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c02:	d007      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003c04:	e01c      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c06:	4bb8      	ldr	r3, [pc, #736]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0a:	4ab7      	ldr	r2, [pc, #732]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c0c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c12:	e01a      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c18:	3308      	adds	r3, #8
 8003c1a:	2102      	movs	r1, #2
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f001 fc8f 	bl	8005540 <RCCEx_PLL2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c28:	e00f      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2e:	3328      	adds	r3, #40	@ 0x28
 8003c30:	2102      	movs	r1, #2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f001 fd36 	bl	80056a4 <RCCEx_PLL3_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003c3e:	e004      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c46:	e000      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003c48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003c52:	4ba5      	ldr	r3, [pc, #660]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c60:	4aa1      	ldr	r2, [pc, #644]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c62:	430b      	orrs	r3, r1
 8003c64:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c66:	e003      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c78:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003c7c:	f04f 0900 	mov.w	r9, #0
 8003c80:	ea58 0309 	orrs.w	r3, r8, r9
 8003c84:	d047      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d82a      	bhi.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003c90:	a201      	add	r2, pc, #4	@ (adr r2, 8003c98 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c96:	bf00      	nop
 8003c98:	08003cad 	.word	0x08003cad
 8003c9c:	08003cbb 	.word	0x08003cbb
 8003ca0:	08003cd1 	.word	0x08003cd1
 8003ca4:	08003cef 	.word	0x08003cef
 8003ca8:	08003cef 	.word	0x08003cef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cac:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	4a8d      	ldr	r2, [pc, #564]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cb8:	e01a      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 fc3c 	bl	8005540 <RCCEx_PLL2_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cce:	e00f      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd4:	3328      	adds	r3, #40	@ 0x28
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 fce3 	bl	80056a4 <RCCEx_PLL3_Config>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cec:	e000      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003cee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003cf8:	4b7b      	ldr	r3, [pc, #492]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfc:	f023 0107 	bic.w	r1, r3, #7
 8003d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d06:	4a78      	ldr	r2, [pc, #480]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d0c:	e003      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003d22:	f04f 0b00 	mov.w	fp, #0
 8003d26:	ea5a 030b 	orrs.w	r3, sl, fp
 8003d2a:	d04c      	beq.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d36:	d030      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003d38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d3c:	d829      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d3e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d40:	d02d      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003d42:	2bc0      	cmp	r3, #192	@ 0xc0
 8003d44:	d825      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d46:	2b80      	cmp	r3, #128	@ 0x80
 8003d48:	d018      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003d4a:	2b80      	cmp	r3, #128	@ 0x80
 8003d4c:	d821      	bhi.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003d52:	2b40      	cmp	r3, #64	@ 0x40
 8003d54:	d007      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003d56:	e01c      	b.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d58:	4b63      	ldr	r3, [pc, #396]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d5c:	4a62      	ldr	r2, [pc, #392]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d64:	e01c      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f001 fbe6 	bl	8005540 <RCCEx_PLL2_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d7a:	e011      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d80:	3328      	adds	r3, #40	@ 0x28
 8003d82:	2100      	movs	r1, #0
 8003d84:	4618      	mov	r0, r3
 8003d86:	f001 fc8d 	bl	80056a4 <RCCEx_PLL3_Config>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003d90:	e006      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d98:	e002      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d9a:	bf00      	nop
 8003d9c:	e000      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003da8:	4b4f      	ldr	r3, [pc, #316]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dac:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003db6:	4a4c      	ldr	r2, [pc, #304]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003db8:	430b      	orrs	r3, r1
 8003dba:	6513      	str	r3, [r2, #80]	@ 0x50
 8003dbc:	e003      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003dd2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003ddc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003de0:	460b      	mov	r3, r1
 8003de2:	4313      	orrs	r3, r2
 8003de4:	d053      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003dee:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003df2:	d035      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003df4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003df8:	d82e      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003dfa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003dfe:	d031      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003e00:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003e04:	d828      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e0a:	d01a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003e0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e10:	d822      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003e16:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e1a:	d007      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003e1c:	e01c      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e1e:	4b32      	ldr	r3, [pc, #200]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e22:	4a31      	ldr	r2, [pc, #196]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e2a:	e01c      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e30:	3308      	adds	r3, #8
 8003e32:	2100      	movs	r1, #0
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 fb83 	bl	8005540 <RCCEx_PLL2_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003e40:	e011      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	3328      	adds	r3, #40	@ 0x28
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fc2a 	bl	80056a4 <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e56:	e006      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e5e:	e002      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e60:	bf00      	nop
 8003e62:	e000      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003e64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d10b      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003e6e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e72:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003e7e:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e80:	430b      	orrs	r3, r1
 8003e82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e84:	e003      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e96:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003e9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003ea4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	d056      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003eb6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003eba:	d038      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003ebc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ec0:	d831      	bhi.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ec2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ec6:	d034      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003ec8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003ecc:	d82b      	bhi.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ece:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ed2:	d01d      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003ed4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ed8:	d825      	bhi.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d006      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003ede:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ee2:	d00a      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003ee4:	e01f      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003ee6:	bf00      	nop
 8003ee8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003eec:	4ba2      	ldr	r3, [pc, #648]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	4aa1      	ldr	r2, [pc, #644]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ef2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ef6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ef8:	e01c      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	3308      	adds	r3, #8
 8003f00:	2100      	movs	r1, #0
 8003f02:	4618      	mov	r0, r3
 8003f04:	f001 fb1c 	bl	8005540 <RCCEx_PLL2_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f0e:	e011      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f14:	3328      	adds	r3, #40	@ 0x28
 8003f16:	2100      	movs	r1, #0
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f001 fbc3 	bl	80056a4 <RCCEx_PLL3_Config>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f24:	e006      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f2c:	e002      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f2e:	bf00      	nop
 8003f30:	e000      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10b      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003f3c:	4b8e      	ldr	r3, [pc, #568]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f40:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f4c:	4a8a      	ldr	r2, [pc, #552]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f4e:	430b      	orrs	r3, r1
 8003f50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f52:	e003      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f64:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003f68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003f72:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003f76:	460b      	mov	r3, r1
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	d03a      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f82:	2b30      	cmp	r3, #48	@ 0x30
 8003f84:	d01f      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003f86:	2b30      	cmp	r3, #48	@ 0x30
 8003f88:	d819      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f8a:	2b20      	cmp	r3, #32
 8003f8c:	d00c      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003f8e:	2b20      	cmp	r3, #32
 8003f90:	d815      	bhi.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d019      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003f96:	2b10      	cmp	r3, #16
 8003f98:	d111      	bne.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f9a:	4b77      	ldr	r3, [pc, #476]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9e:	4a76      	ldr	r2, [pc, #472]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003fa6:	e011      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fac:	3308      	adds	r3, #8
 8003fae:	2102      	movs	r1, #2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 fac5 	bl	8005540 <RCCEx_PLL2_Config>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003fbc:	e006      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fc4:	e002      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fc6:	bf00      	nop
 8003fc8:	e000      	b.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10a      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003fd4:	4b68      	ldr	r3, [pc, #416]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fd8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fe2:	4a65      	ldr	r2, [pc, #404]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fe8:	e003      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003ffe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004008:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800400c:	460b      	mov	r3, r1
 800400e:	4313      	orrs	r3, r2
 8004010:	d051      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004016:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004018:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800401c:	d035      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800401e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004022:	d82e      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004024:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004028:	d031      	beq.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800402a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800402e:	d828      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004030:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004034:	d01a      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800403a:	d822      	bhi.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800403c:	2b00      	cmp	r3, #0
 800403e:	d003      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004040:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004044:	d007      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8004046:	e01c      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004048:	4b4b      	ldr	r3, [pc, #300]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800404a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404c:	4a4a      	ldr	r2, [pc, #296]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800404e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004052:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004054:	e01c      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405a:	3308      	adds	r3, #8
 800405c:	2100      	movs	r1, #0
 800405e:	4618      	mov	r0, r3
 8004060:	f001 fa6e 	bl	8005540 <RCCEx_PLL2_Config>
 8004064:	4603      	mov	r3, r0
 8004066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800406a:	e011      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	3328      	adds	r3, #40	@ 0x28
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f001 fb15 	bl	80056a4 <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004080:	e006      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004088:	e002      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800408a:	bf00      	nop
 800408c:	e000      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800408e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004090:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004094:	2b00      	cmp	r3, #0
 8004096:	d10a      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004098:	4b37      	ldr	r3, [pc, #220]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800409a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800409c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040a6:	4a34      	ldr	r2, [pc, #208]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040a8:	430b      	orrs	r3, r1
 80040aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80040ac:	e003      	b.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80040b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040be:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80040c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040c6:	2300      	movs	r3, #0
 80040c8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80040cc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80040d0:	460b      	mov	r3, r1
 80040d2:	4313      	orrs	r3, r2
 80040d4:	d056      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80040dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040e0:	d033      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80040e2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040e6:	d82c      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040ec:	d02f      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80040ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80040f2:	d826      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80040f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040f8:	d02b      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80040fa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80040fe:	d820      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004104:	d012      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8004106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800410a:	d81a      	bhi.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d022      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004114:	d115      	bne.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411a:	3308      	adds	r3, #8
 800411c:	2101      	movs	r1, #1
 800411e:	4618      	mov	r0, r3
 8004120:	f001 fa0e 	bl	8005540 <RCCEx_PLL2_Config>
 8004124:	4603      	mov	r3, r0
 8004126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800412a:	e015      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	3328      	adds	r3, #40	@ 0x28
 8004132:	2101      	movs	r1, #1
 8004134:	4618      	mov	r0, r3
 8004136:	f001 fab5 	bl	80056a4 <RCCEx_PLL3_Config>
 800413a:	4603      	mov	r3, r0
 800413c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004140:	e00a      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004148:	e006      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800414a:	bf00      	nop
 800414c:	e004      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004156:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10d      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004160:	4b05      	ldr	r3, [pc, #20]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004162:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004164:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800416e:	4a02      	ldr	r2, [pc, #8]	@ (8004178 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004170:	430b      	orrs	r3, r1
 8004172:	6513      	str	r3, [r2, #80]	@ 0x50
 8004174:	e006      	b.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004176:	bf00      	nop
 8004178:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800417c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004180:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004190:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800419a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800419e:	460b      	mov	r3, r1
 80041a0:	4313      	orrs	r3, r2
 80041a2:	d055      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80041a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80041ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b0:	d033      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80041b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80041b6:	d82c      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041bc:	d02f      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80041be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c2:	d826      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041c4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041c8:	d02b      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80041ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80041ce:	d820      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041d4:	d012      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80041d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041da:	d81a      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d022      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80041e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80041e4:	d115      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ea:	3308      	adds	r3, #8
 80041ec:	2101      	movs	r1, #1
 80041ee:	4618      	mov	r0, r3
 80041f0:	f001 f9a6 	bl	8005540 <RCCEx_PLL2_Config>
 80041f4:	4603      	mov	r3, r0
 80041f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80041fa:	e015      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004200:	3328      	adds	r3, #40	@ 0x28
 8004202:	2101      	movs	r1, #1
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fa4d 	bl	80056a4 <RCCEx_PLL3_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004210:	e00a      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004218:	e006      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800421a:	bf00      	nop
 800421c:	e004      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10b      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004230:	4ba3      	ldr	r3, [pc, #652]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004234:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004240:	4a9f      	ldr	r2, [pc, #636]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004242:	430b      	orrs	r3, r1
 8004244:	6593      	str	r3, [r2, #88]	@ 0x58
 8004246:	e003      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800425c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004260:	2300      	movs	r3, #0
 8004262:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d037      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004274:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004276:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800427a:	d00e      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800427c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004280:	d816      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004282:	2b00      	cmp	r3, #0
 8004284:	d018      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004286:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800428a:	d111      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800428c:	4b8c      	ldr	r3, [pc, #560]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	4a8b      	ldr	r2, [pc, #556]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004292:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004296:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004298:	e00f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	3308      	adds	r3, #8
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f001 f94c 	bl	8005540 <RCCEx_PLL2_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80042ae:	e004      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042b6:	e000      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80042b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10a      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042c2:	4b7f      	ldr	r3, [pc, #508]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d0:	4a7b      	ldr	r2, [pc, #492]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042d2:	430b      	orrs	r3, r1
 80042d4:	6513      	str	r3, [r2, #80]	@ 0x50
 80042d6:	e003      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80042ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042f0:	2300      	movs	r3, #0
 80042f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80042f6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4313      	orrs	r3, r2
 80042fe:	d039      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004306:	2b03      	cmp	r3, #3
 8004308:	d81c      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800430a:	a201      	add	r2, pc, #4	@ (adr r2, 8004310 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	0800434d 	.word	0x0800434d
 8004314:	08004321 	.word	0x08004321
 8004318:	0800432f 	.word	0x0800432f
 800431c:	0800434d 	.word	0x0800434d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004320:	4b67      	ldr	r3, [pc, #412]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	4a66      	ldr	r2, [pc, #408]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800432c:	e00f      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004332:	3308      	adds	r3, #8
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f001 f902 	bl	8005540 <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004342:	e004      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800434a:	e000      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800434c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10a      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004356:	4b5a      	ldr	r3, [pc, #360]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800435a:	f023 0103 	bic.w	r1, r3, #3
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004364:	4a56      	ldr	r2, [pc, #344]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004366:	430b      	orrs	r3, r1
 8004368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800436a:	e003      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004370:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004380:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004384:	2300      	movs	r3, #0
 8004386:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800438a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800438e:	460b      	mov	r3, r1
 8004390:	4313      	orrs	r3, r2
 8004392:	f000 809f 	beq.w	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004396:	4b4b      	ldr	r3, [pc, #300]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a4a      	ldr	r2, [pc, #296]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043a2:	f7fc ff3d 	bl	8001220 <HAL_GetTick>
 80043a6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043aa:	e00b      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043ac:	f7fc ff38 	bl	8001220 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b64      	cmp	r3, #100	@ 0x64
 80043ba:	d903      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043c2:	e005      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c4:	4b3f      	ldr	r3, [pc, #252]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0ed      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80043d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d179      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043d8:	4b39      	ldr	r3, [pc, #228]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043da:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80043dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043e4:	4053      	eors	r3, r2
 80043e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d015      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ee:	4b34      	ldr	r3, [pc, #208]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043fa:	4b31      	ldr	r3, [pc, #196]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043fe:	4a30      	ldr	r2, [pc, #192]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004404:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004406:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440a:	4a2d      	ldr	r2, [pc, #180]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800440c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004410:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004412:	4a2b      	ldr	r2, [pc, #172]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8004418:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800441a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004422:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004426:	d118      	bne.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004428:	f7fc fefa 	bl	8001220 <HAL_GetTick>
 800442c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004430:	e00d      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004432:	f7fc fef5 	bl	8001220 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800443c:	1ad2      	subs	r2, r2, r3
 800443e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004442:	429a      	cmp	r2, r3
 8004444:	d903      	bls.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800444c:	e005      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800444e:	4b1c      	ldr	r3, [pc, #112]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0eb      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800445a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445e:	2b00      	cmp	r3, #0
 8004460:	d129      	bne.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800446a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800446e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004472:	d10e      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004474:	4b12      	ldr	r3, [pc, #72]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004480:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004484:	091a      	lsrs	r2, r3, #4
 8004486:	4b10      	ldr	r3, [pc, #64]	@ (80044c8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004488:	4013      	ands	r3, r2
 800448a:	4a0d      	ldr	r2, [pc, #52]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800448c:	430b      	orrs	r3, r1
 800448e:	6113      	str	r3, [r2, #16]
 8004490:	e005      	b.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004492:	4b0b      	ldr	r3, [pc, #44]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	4a0a      	ldr	r2, [pc, #40]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004498:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800449c:	6113      	str	r3, [r2, #16]
 800449e:	4b08      	ldr	r3, [pc, #32]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044a0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ae:	4a04      	ldr	r2, [pc, #16]	@ (80044c0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044b0:	430b      	orrs	r3, r1
 80044b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b4:	e00e      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80044be:	e009      	b.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80044c0:	58024400 	.word	0x58024400
 80044c4:	58024800 	.word	0x58024800
 80044c8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80044d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044dc:	f002 0301 	and.w	r3, r2, #1
 80044e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044e4:	2300      	movs	r3, #0
 80044e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80044ea:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f000 8089 	beq.w	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044fc:	2b28      	cmp	r3, #40	@ 0x28
 80044fe:	d86b      	bhi.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004500:	a201      	add	r2, pc, #4	@ (adr r2, 8004508 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004506:	bf00      	nop
 8004508:	080045e1 	.word	0x080045e1
 800450c:	080045d9 	.word	0x080045d9
 8004510:	080045d9 	.word	0x080045d9
 8004514:	080045d9 	.word	0x080045d9
 8004518:	080045d9 	.word	0x080045d9
 800451c:	080045d9 	.word	0x080045d9
 8004520:	080045d9 	.word	0x080045d9
 8004524:	080045d9 	.word	0x080045d9
 8004528:	080045ad 	.word	0x080045ad
 800452c:	080045d9 	.word	0x080045d9
 8004530:	080045d9 	.word	0x080045d9
 8004534:	080045d9 	.word	0x080045d9
 8004538:	080045d9 	.word	0x080045d9
 800453c:	080045d9 	.word	0x080045d9
 8004540:	080045d9 	.word	0x080045d9
 8004544:	080045d9 	.word	0x080045d9
 8004548:	080045c3 	.word	0x080045c3
 800454c:	080045d9 	.word	0x080045d9
 8004550:	080045d9 	.word	0x080045d9
 8004554:	080045d9 	.word	0x080045d9
 8004558:	080045d9 	.word	0x080045d9
 800455c:	080045d9 	.word	0x080045d9
 8004560:	080045d9 	.word	0x080045d9
 8004564:	080045d9 	.word	0x080045d9
 8004568:	080045e1 	.word	0x080045e1
 800456c:	080045d9 	.word	0x080045d9
 8004570:	080045d9 	.word	0x080045d9
 8004574:	080045d9 	.word	0x080045d9
 8004578:	080045d9 	.word	0x080045d9
 800457c:	080045d9 	.word	0x080045d9
 8004580:	080045d9 	.word	0x080045d9
 8004584:	080045d9 	.word	0x080045d9
 8004588:	080045e1 	.word	0x080045e1
 800458c:	080045d9 	.word	0x080045d9
 8004590:	080045d9 	.word	0x080045d9
 8004594:	080045d9 	.word	0x080045d9
 8004598:	080045d9 	.word	0x080045d9
 800459c:	080045d9 	.word	0x080045d9
 80045a0:	080045d9 	.word	0x080045d9
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080045e1 	.word	0x080045e1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b0:	3308      	adds	r3, #8
 80045b2:	2101      	movs	r1, #1
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 ffc3 	bl	8005540 <RCCEx_PLL2_Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045c0:	e00f      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c6:	3328      	adds	r3, #40	@ 0x28
 80045c8:	2101      	movs	r1, #1
 80045ca:	4618      	mov	r0, r3
 80045cc:	f001 f86a 	bl	80056a4 <RCCEx_PLL3_Config>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80045d6:	e004      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045de:	e000      	b.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80045e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10a      	bne.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80045ea:	4bbf      	ldr	r3, [pc, #764]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ee:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045f8:	4abb      	ldr	r2, [pc, #748]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045fa:	430b      	orrs	r3, r1
 80045fc:	6553      	str	r3, [r2, #84]	@ 0x54
 80045fe:	e003      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	f002 0302 	and.w	r3, r2, #2
 8004614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004618:	2300      	movs	r3, #0
 800461a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800461e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004622:	460b      	mov	r3, r1
 8004624:	4313      	orrs	r3, r2
 8004626:	d041      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800462e:	2b05      	cmp	r3, #5
 8004630:	d824      	bhi.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004632:	a201      	add	r2, pc, #4	@ (adr r2, 8004638 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004638:	08004685 	.word	0x08004685
 800463c:	08004651 	.word	0x08004651
 8004640:	08004667 	.word	0x08004667
 8004644:	08004685 	.word	0x08004685
 8004648:	08004685 	.word	0x08004685
 800464c:	08004685 	.word	0x08004685
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004654:	3308      	adds	r3, #8
 8004656:	2101      	movs	r1, #1
 8004658:	4618      	mov	r0, r3
 800465a:	f000 ff71 	bl	8005540 <RCCEx_PLL2_Config>
 800465e:	4603      	mov	r3, r0
 8004660:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004664:	e00f      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466a:	3328      	adds	r3, #40	@ 0x28
 800466c:	2101      	movs	r1, #1
 800466e:	4618      	mov	r0, r3
 8004670:	f001 f818 	bl	80056a4 <RCCEx_PLL3_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800467a:	e004      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004682:	e000      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004684:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004686:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800468e:	4b96      	ldr	r3, [pc, #600]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004692:	f023 0107 	bic.w	r1, r3, #7
 8004696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800469a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800469c:	4a92      	ldr	r2, [pc, #584]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800469e:	430b      	orrs	r3, r1
 80046a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80046a2:	e003      	b.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b4:	f002 0304 	and.w	r3, r2, #4
 80046b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046bc:	2300      	movs	r3, #0
 80046be:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80046c2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4313      	orrs	r3, r2
 80046ca:	d044      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80046cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046d4:	2b05      	cmp	r3, #5
 80046d6:	d825      	bhi.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80046d8:	a201      	add	r2, pc, #4	@ (adr r2, 80046e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	0800472d 	.word	0x0800472d
 80046e4:	080046f9 	.word	0x080046f9
 80046e8:	0800470f 	.word	0x0800470f
 80046ec:	0800472d 	.word	0x0800472d
 80046f0:	0800472d 	.word	0x0800472d
 80046f4:	0800472d 	.word	0x0800472d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fc:	3308      	adds	r3, #8
 80046fe:	2101      	movs	r1, #1
 8004700:	4618      	mov	r0, r3
 8004702:	f000 ff1d 	bl	8005540 <RCCEx_PLL2_Config>
 8004706:	4603      	mov	r3, r0
 8004708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800470c:	e00f      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004712:	3328      	adds	r3, #40	@ 0x28
 8004714:	2101      	movs	r1, #1
 8004716:	4618      	mov	r0, r3
 8004718:	f000 ffc4 	bl	80056a4 <RCCEx_PLL3_Config>
 800471c:	4603      	mov	r3, r0
 800471e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004722:	e004      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800472a:	e000      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800472c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800472e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10b      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004736:	4b6c      	ldr	r3, [pc, #432]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800473a:	f023 0107 	bic.w	r1, r3, #7
 800473e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004742:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004746:	4a68      	ldr	r2, [pc, #416]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004748:	430b      	orrs	r3, r1
 800474a:	6593      	str	r3, [r2, #88]	@ 0x58
 800474c:	e003      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	f002 0320 	and.w	r3, r2, #32
 8004762:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004766:	2300      	movs	r3, #0
 8004768:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800476c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004770:	460b      	mov	r3, r1
 8004772:	4313      	orrs	r3, r2
 8004774:	d055      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004782:	d033      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004784:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004788:	d82c      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800478a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800478e:	d02f      	beq.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004794:	d826      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004796:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800479a:	d02b      	beq.n	80047f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800479c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80047a0:	d820      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047a2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047a6:	d012      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80047a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047ac:	d81a      	bhi.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d022      	beq.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80047b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047b6:	d115      	bne.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047bc:	3308      	adds	r3, #8
 80047be:	2100      	movs	r1, #0
 80047c0:	4618      	mov	r0, r3
 80047c2:	f000 febd 	bl	8005540 <RCCEx_PLL2_Config>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047cc:	e015      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d2:	3328      	adds	r3, #40	@ 0x28
 80047d4:	2102      	movs	r1, #2
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 ff64 	bl	80056a4 <RCCEx_PLL3_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80047e2:	e00a      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047ea:	e006      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047ec:	bf00      	nop
 80047ee:	e004      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047f0:	bf00      	nop
 80047f2:	e002      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80047f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10b      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004802:	4b39      	ldr	r3, [pc, #228]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004806:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004812:	4a35      	ldr	r2, [pc, #212]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004814:	430b      	orrs	r3, r1
 8004816:	6553      	str	r3, [r2, #84]	@ 0x54
 8004818:	e003      	b.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800481a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800482e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004832:	2300      	movs	r3, #0
 8004834:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004838:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800483c:	460b      	mov	r3, r1
 800483e:	4313      	orrs	r3, r2
 8004840:	d058      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004846:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800484a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800484e:	d033      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004850:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004854:	d82c      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004856:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800485a:	d02f      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800485c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004860:	d826      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004862:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004866:	d02b      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004868:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800486c:	d820      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800486e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004872:	d012      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004874:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004878:	d81a      	bhi.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800487a:	2b00      	cmp	r3, #0
 800487c:	d022      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800487e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004882:	d115      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004884:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004888:	3308      	adds	r3, #8
 800488a:	2100      	movs	r1, #0
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fe57 	bl	8005540 <RCCEx_PLL2_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004898:	e015      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800489a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489e:	3328      	adds	r3, #40	@ 0x28
 80048a0:	2102      	movs	r1, #2
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 fefe 	bl	80056a4 <RCCEx_PLL3_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80048ae:	e00a      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048b6:	e006      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048b8:	bf00      	nop
 80048ba:	e004      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048bc:	bf00      	nop
 80048be:	e002      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048c0:	bf00      	nop
 80048c2:	e000      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80048c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10e      	bne.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80048ce:	4b06      	ldr	r3, [pc, #24]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048de:	4a02      	ldr	r2, [pc, #8]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80048e4:	e006      	b.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80048e6:	bf00      	nop
 80048e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80048f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004900:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004904:	2300      	movs	r3, #0
 8004906:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800490a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800490e:	460b      	mov	r3, r1
 8004910:	4313      	orrs	r3, r2
 8004912:	d055      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004918:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800491c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004920:	d033      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004922:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004926:	d82c      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004928:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800492c:	d02f      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800492e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004932:	d826      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004934:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004938:	d02b      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800493a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800493e:	d820      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004940:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004944:	d012      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004946:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800494a:	d81a      	bhi.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800494c:	2b00      	cmp	r3, #0
 800494e:	d022      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004950:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004954:	d115      	bne.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800495a:	3308      	adds	r3, #8
 800495c:	2100      	movs	r1, #0
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fdee 	bl	8005540 <RCCEx_PLL2_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800496a:	e015      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800496c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004970:	3328      	adds	r3, #40	@ 0x28
 8004972:	2102      	movs	r1, #2
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fe95 	bl	80056a4 <RCCEx_PLL3_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004980:	e00a      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004988:	e006      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800498a:	bf00      	nop
 800498c:	e004      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800498e:	bf00      	nop
 8004990:	e002      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004992:	bf00      	nop
 8004994:	e000      	b.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004996:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004998:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10b      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049a0:	4ba1      	ldr	r3, [pc, #644]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049b0:	4a9d      	ldr	r2, [pc, #628]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049b2:	430b      	orrs	r3, r1
 80049b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80049b6:	e003      	b.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80049c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c8:	f002 0308 	and.w	r3, r2, #8
 80049cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049d0:	2300      	movs	r3, #0
 80049d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80049d6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80049da:	460b      	mov	r3, r1
 80049dc:	4313      	orrs	r3, r2
 80049de:	d01e      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80049e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049ec:	d10c      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f2:	3328      	adds	r3, #40	@ 0x28
 80049f4:	2102      	movs	r1, #2
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fe54 	bl	80056a4 <RCCEx_PLL3_Config>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d002      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a08:	4b87      	ldr	r3, [pc, #540]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a18:	4a83      	ldr	r2, [pc, #524]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a1a:	430b      	orrs	r3, r1
 8004a1c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a26:	f002 0310 	and.w	r3, r2, #16
 8004a2a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a2e:	2300      	movs	r3, #0
 8004a30:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004a34:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	d01e      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a4a:	d10c      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a50:	3328      	adds	r3, #40	@ 0x28
 8004a52:	2102      	movs	r1, #2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fe25 	bl	80056a4 <RCCEx_PLL3_Config>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d002      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a66:	4b70      	ldr	r3, [pc, #448]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004a76:	4a6c      	ldr	r2, [pc, #432]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a84:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004a88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a92:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004a96:	460b      	mov	r3, r1
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	d03e      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aa8:	d022      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004aaa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aae:	d81b      	bhi.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ab4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ab8:	d00b      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004aba:	e015      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac0:	3308      	adds	r3, #8
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fd3b 	bl	8005540 <RCCEx_PLL2_Config>
 8004aca:	4603      	mov	r3, r0
 8004acc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ad0:	e00f      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad6:	3328      	adds	r3, #40	@ 0x28
 8004ad8:	2102      	movs	r1, #2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fde2 	bl	80056a4 <RCCEx_PLL3_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ae6:	e004      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004aee:	e000      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004af2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004afa:	4b4b      	ldr	r3, [pc, #300]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004afe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b0a:	4a47      	ldr	r2, [pc, #284]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b10:	e003      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b22:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004b26:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004b28:	2300      	movs	r3, #0
 8004b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004b2c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004b30:	460b      	mov	r3, r1
 8004b32:	4313      	orrs	r3, r2
 8004b34:	d03b      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b3e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b42:	d01f      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004b44:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004b48:	d818      	bhi.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b4e:	d003      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004b50:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b54:	d007      	beq.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004b56:	e011      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b58:	4b33      	ldr	r3, [pc, #204]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5c:	4a32      	ldr	r2, [pc, #200]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b64:	e00f      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6a:	3328      	adds	r3, #40	@ 0x28
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 fd98 	bl	80056a4 <RCCEx_PLL3_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004b7a:	e004      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b82:	e000      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b8e:	4b26      	ldr	r3, [pc, #152]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b92:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9e:	4a22      	ldr	r2, [pc, #136]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6553      	str	r3, [r2, #84]	@ 0x54
 8004ba4:	e003      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004baa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004bba:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	677b      	str	r3, [r7, #116]	@ 0x74
 8004bc0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	d034      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004bd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bd8:	d007      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004bda:	e011      	b.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bdc:	4b12      	ldr	r3, [pc, #72]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be0:	4a11      	ldr	r2, [pc, #68]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004be2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004be6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004be8:	e00e      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	3308      	adds	r3, #8
 8004bf0:	2102      	movs	r1, #2
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fca4 	bl	8005540 <RCCEx_PLL2_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004bfe:	e003      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10d      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004c10:	4b05      	ldr	r3, [pc, #20]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c14:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1e:	4a02      	ldr	r2, [pc, #8]	@ (8004c28 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c20:	430b      	orrs	r3, r1
 8004c22:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c24:	e006      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c42:	2300      	movs	r3, #0
 8004c44:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c46:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	d00c      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c54:	3328      	adds	r3, #40	@ 0x28
 8004c56:	2102      	movs	r1, #2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fd23 	bl	80056a4 <RCCEx_PLL3_Config>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c72:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004c76:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c78:	2300      	movs	r3, #0
 8004c7a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c7c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004c80:	460b      	mov	r3, r1
 8004c82:	4313      	orrs	r3, r2
 8004c84:	d038      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c92:	d018      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004c94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c98:	d811      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c9e:	d014      	beq.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004ca0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ca4:	d80b      	bhi.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d011      	beq.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004caa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004cae:	d106      	bne.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb0:	4bc3      	ldr	r3, [pc, #780]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb4:	4ac2      	ldr	r2, [pc, #776]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cc4:	e004      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cc6:	bf00      	nop
 8004cc8:	e002      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cca:	bf00      	nop
 8004ccc:	e000      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10b      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cd8:	4bb9      	ldr	r3, [pc, #740]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cdc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ce8:	4ab5      	ldr	r2, [pc, #724]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004cea:	430b      	orrs	r3, r1
 8004cec:	6553      	str	r3, [r2, #84]	@ 0x54
 8004cee:	e003      	b.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004d04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d06:	2300      	movs	r3, #0
 8004d08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d0a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d009      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d14:	4baa      	ldr	r3, [pc, #680]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d18:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d22:	4aa7      	ldr	r2, [pc, #668]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004d34:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d36:	2300      	movs	r3, #0
 8004d38:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d3a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004d3e:	460b      	mov	r3, r1
 8004d40:	4313      	orrs	r3, r2
 8004d42:	d00a      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004d44:	4b9e      	ldr	r3, [pc, #632]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004d54:	4a9a      	ldr	r2, [pc, #616]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d56:	430b      	orrs	r3, r1
 8004d58:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d68:	2300      	movs	r3, #0
 8004d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d6c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004d70:	460b      	mov	r3, r1
 8004d72:	4313      	orrs	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004d76:	4b92      	ldr	r3, [pc, #584]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d7a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d84:	4a8e      	ldr	r2, [pc, #568]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d86:	430b      	orrs	r3, r1
 8004d88:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004d96:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d98:	2300      	movs	r3, #0
 8004d9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d9c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004da0:	460b      	mov	r3, r1
 8004da2:	4313      	orrs	r3, r2
 8004da4:	d00e      	beq.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004da6:	4b86      	ldr	r3, [pc, #536]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	4a85      	ldr	r2, [pc, #532]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004db0:	6113      	str	r3, [r2, #16]
 8004db2:	4b83      	ldr	r3, [pc, #524]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004db4:	6919      	ldr	r1, [r3, #16]
 8004db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004dbe:	4a80      	ldr	r2, [pc, #512]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dcc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004dd6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004dda:	460b      	mov	r3, r1
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	d009      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004de0:	4b77      	ldr	r3, [pc, #476]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004de4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dee:	4a74      	ldr	r2, [pc, #464]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004df0:	430b      	orrs	r3, r1
 8004df2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e02:	2300      	movs	r3, #0
 8004e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e06:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	d00a      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004e10:	4b6b      	ldr	r3, [pc, #428]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e14:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e20:	4a67      	ldr	r2, [pc, #412]	@ (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e22:	430b      	orrs	r3, r1
 8004e24:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2e:	2100      	movs	r1, #0
 8004e30:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e38:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	d011      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e46:	3308      	adds	r3, #8
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fb78 	bl	8005540 <RCCEx_PLL2_Config>
 8004e50:	4603      	mov	r3, r0
 8004e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	2100      	movs	r1, #0
 8004e70:	6239      	str	r1, [r7, #32]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e78:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004e7c:	460b      	mov	r3, r1
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	d011      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e86:	3308      	adds	r3, #8
 8004e88:	2101      	movs	r1, #1
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fb58 	bl	8005540 <RCCEx_PLL2_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d003      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	2100      	movs	r1, #0
 8004eb0:	61b9      	str	r1, [r7, #24]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	d011      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec6:	3308      	adds	r3, #8
 8004ec8:	2102      	movs	r1, #2
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fb38 	bl	8005540 <RCCEx_PLL2_Config>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	2100      	movs	r1, #0
 8004ef0:	6139      	str	r1, [r7, #16]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004efc:	460b      	mov	r3, r1
 8004efe:	4313      	orrs	r3, r2
 8004f00:	d011      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f06:	3328      	adds	r3, #40	@ 0x28
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fbca 	bl	80056a4 <RCCEx_PLL3_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	2100      	movs	r1, #0
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	f003 0310 	and.w	r3, r3, #16
 8004f36:	60fb      	str	r3, [r7, #12]
 8004f38:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	d011      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f46:	3328      	adds	r3, #40	@ 0x28
 8004f48:	2101      	movs	r1, #1
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fbaa 	bl	80056a4 <RCCEx_PLL3_Config>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6e:	2100      	movs	r1, #0
 8004f70:	6039      	str	r1, [r7, #0]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	d011      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f86:	3328      	adds	r3, #40	@ 0x28
 8004f88:	2102      	movs	r1, #2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fb8a 	bl	80056a4 <RCCEx_PLL3_Config>
 8004f90:	4603      	mov	r3, r0
 8004f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004fa6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	e000      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc0:	58024400 	.word	0x58024400

08004fc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004fc8:	f7fe fd96 	bl	8003af8 <HAL_RCC_GetHCLKFreq>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	4b06      	ldr	r3, [pc, #24]	@ (8004fe8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	091b      	lsrs	r3, r3, #4
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	4904      	ldr	r1, [pc, #16]	@ (8004fec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004fda:	5ccb      	ldrb	r3, [r1, r3]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	58024400 	.word	0x58024400
 8004fec:	08009a1c 	.word	0x08009a1c

08004ff0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b089      	sub	sp, #36	@ 0x24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ff8:	4ba1      	ldr	r3, [pc, #644]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005002:	4b9f      	ldr	r3, [pc, #636]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	0b1b      	lsrs	r3, r3, #12
 8005008:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800500c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800500e:	4b9c      	ldr	r3, [pc, #624]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800501a:	4b99      	ldr	r3, [pc, #612]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800501e:	08db      	lsrs	r3, r3, #3
 8005020:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	fb02 f303 	mul.w	r3, r2, r3
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005032:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 8111 	beq.w	8005260 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b02      	cmp	r3, #2
 8005042:	f000 8083 	beq.w	800514c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005046:	69bb      	ldr	r3, [r7, #24]
 8005048:	2b02      	cmp	r3, #2
 800504a:	f200 80a1 	bhi.w	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d056      	beq.n	8005108 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800505a:	e099      	b.n	8005190 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800505c:	4b88      	ldr	r3, [pc, #544]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d02d      	beq.n	80050c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005068:	4b85      	ldr	r3, [pc, #532]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	08db      	lsrs	r3, r3, #3
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	4a84      	ldr	r2, [pc, #528]	@ (8005284 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005074:	fa22 f303 	lsr.w	r3, r2, r3
 8005078:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	ee07 3a90 	vmov	s15, r3
 800508a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800508e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005092:	4b7b      	ldr	r3, [pc, #492]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005096:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80050c2:	e087      	b.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	ee07 3a90 	vmov	s15, r3
 80050ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800528c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80050d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050d6:	4b6a      	ldr	r3, [pc, #424]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80050ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005102:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005106:	e065      	b.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	ee07 3a90 	vmov	s15, r3
 800510e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005112:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005116:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800511a:	4b59      	ldr	r3, [pc, #356]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800511c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005122:	ee07 3a90 	vmov	s15, r3
 8005126:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512a:	ed97 6a03 	vldr	s12, [r7, #12]
 800512e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005132:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005136:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800513a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800513e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005146:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800514a:	e043      	b.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	ee07 3a90 	vmov	s15, r3
 8005152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005156:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005294 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800515a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800515e:	4b48      	ldr	r3, [pc, #288]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005162:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005166:	ee07 3a90 	vmov	s15, r3
 800516a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800516e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005172:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005176:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800517a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800517e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005182:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005186:	ee67 7a27 	vmul.f32	s15, s14, s15
 800518a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800518e:	e021      	b.n	80051d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005290 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800519e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051a2:	4b37      	ldr	r3, [pc, #220]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051aa:	ee07 3a90 	vmov	s15, r3
 80051ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051b6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005288 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80051c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051d2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80051d4:	4b2a      	ldr	r3, [pc, #168]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051d8:	0a5b      	lsrs	r3, r3, #9
 80051da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051de:	ee07 3a90 	vmov	s15, r3
 80051e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80051ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051ee:	edd7 6a07 	vldr	s13, [r7, #28]
 80051f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051fa:	ee17 2a90 	vmov	r2, s15
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005202:	4b1f      	ldr	r3, [pc, #124]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800520c:	ee07 3a90 	vmov	s15, r3
 8005210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005214:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005218:	ee37 7a87 	vadd.f32	s14, s15, s14
 800521c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005228:	ee17 2a90 	vmov	r2, s15
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005230:	4b13      	ldr	r3, [pc, #76]	@ (8005280 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005234:	0e1b      	lsrs	r3, r3, #24
 8005236:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005246:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524a:	edd7 6a07 	vldr	s13, [r7, #28]
 800524e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005252:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005256:	ee17 2a90 	vmov	r2, s15
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800525e:	e008      	b.n	8005272 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	609a      	str	r2, [r3, #8]
}
 8005272:	bf00      	nop
 8005274:	3724      	adds	r7, #36	@ 0x24
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	58024400 	.word	0x58024400
 8005284:	03d09000 	.word	0x03d09000
 8005288:	46000000 	.word	0x46000000
 800528c:	4c742400 	.word	0x4c742400
 8005290:	4a742400 	.word	0x4a742400
 8005294:	4bbebc20 	.word	0x4bbebc20

08005298 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005298:	b480      	push	{r7}
 800529a:	b089      	sub	sp, #36	@ 0x24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052a0:	4ba1      	ldr	r3, [pc, #644]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a4:	f003 0303 	and.w	r3, r3, #3
 80052a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80052aa:	4b9f      	ldr	r3, [pc, #636]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ae:	0d1b      	lsrs	r3, r3, #20
 80052b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80052b6:	4b9c      	ldr	r3, [pc, #624]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80052c2:	4b99      	ldr	r3, [pc, #612]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052c6:	08db      	lsrs	r3, r3, #3
 80052c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052cc:	693a      	ldr	r2, [r7, #16]
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	ee07 3a90 	vmov	s15, r3
 80052d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f000 8111 	beq.w	8005508 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80052e6:	69bb      	ldr	r3, [r7, #24]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	f000 8083 	beq.w	80053f4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	f200 80a1 	bhi.w	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d003      	beq.n	8005304 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d056      	beq.n	80053b0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005302:	e099      	b.n	8005438 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005304:	4b88      	ldr	r3, [pc, #544]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 0320 	and.w	r3, r3, #32
 800530c:	2b00      	cmp	r3, #0
 800530e:	d02d      	beq.n	800536c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005310:	4b85      	ldr	r3, [pc, #532]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	08db      	lsrs	r3, r3, #3
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	4a84      	ldr	r2, [pc, #528]	@ (800552c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
 8005320:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	ee07 3a90 	vmov	s15, r3
 8005328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533a:	4b7b      	ldr	r3, [pc, #492]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005342:	ee07 3a90 	vmov	s15, r3
 8005346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534a:	ed97 6a03 	vldr	s12, [r7, #12]
 800534e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800535e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005366:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800536a:	e087      	b.n	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005376:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005534 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800537a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800537e:	4b6a      	ldr	r3, [pc, #424]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005386:	ee07 3a90 	vmov	s15, r3
 800538a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800538e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005392:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800539e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053ae:	e065      	b.n	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	ee07 3a90 	vmov	s15, r3
 80053b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c2:	4b59      	ldr	r3, [pc, #356]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ca:	ee07 3a90 	vmov	s15, r3
 80053ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053d6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80053f2:	e043      	b.n	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053fe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800553c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005406:	4b48      	ldr	r3, [pc, #288]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800540a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005416:	ed97 6a03 	vldr	s12, [r7, #12]
 800541a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800541e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800542a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005436:	e021      	b.n	800547c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005538 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800544a:	4b37      	ldr	r3, [pc, #220]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800544e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005452:	ee07 3a90 	vmov	s15, r3
 8005456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800545a:	ed97 6a03 	vldr	s12, [r7, #12]
 800545e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005530 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800546a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800546e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005476:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800547a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800547c:	4b2a      	ldr	r3, [pc, #168]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800547e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005480:	0a5b      	lsrs	r3, r3, #9
 8005482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800548e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005496:	edd7 6a07 	vldr	s13, [r7, #28]
 800549a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800549e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054a2:	ee17 2a90 	vmov	r2, s15
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80054aa:	4b1f      	ldr	r3, [pc, #124]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ae:	0c1b      	lsrs	r3, r3, #16
 80054b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054b4:	ee07 3a90 	vmov	s15, r3
 80054b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80054c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d0:	ee17 2a90 	vmov	r2, s15
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80054d8:	4b13      	ldr	r3, [pc, #76]	@ (8005528 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054dc:	0e1b      	lsrs	r3, r3, #24
 80054de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80054ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80054f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054fe:	ee17 2a90 	vmov	r2, s15
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005506:	e008      	b.n	800551a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	609a      	str	r2, [r3, #8]
}
 800551a:	bf00      	nop
 800551c:	3724      	adds	r7, #36	@ 0x24
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	58024400 	.word	0x58024400
 800552c:	03d09000 	.word	0x03d09000
 8005530:	46000000 	.word	0x46000000
 8005534:	4c742400 	.word	0x4c742400
 8005538:	4a742400 	.word	0x4a742400
 800553c:	4bbebc20 	.word	0x4bbebc20

08005540 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800554a:	2300      	movs	r3, #0
 800554c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800554e:	4b53      	ldr	r3, [pc, #332]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005552:	f003 0303 	and.w	r3, r3, #3
 8005556:	2b03      	cmp	r3, #3
 8005558:	d101      	bne.n	800555e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e099      	b.n	8005692 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800555e:	4b4f      	ldr	r3, [pc, #316]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a4e      	ldr	r2, [pc, #312]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005564:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005568:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800556a:	f7fb fe59 	bl	8001220 <HAL_GetTick>
 800556e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005570:	e008      	b.n	8005584 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005572:	f7fb fe55 	bl	8001220 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e086      	b.n	8005692 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005584:	4b45      	ldr	r3, [pc, #276]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1f0      	bne.n	8005572 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005590:	4b42      	ldr	r3, [pc, #264]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005594:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	031b      	lsls	r3, r3, #12
 800559e:	493f      	ldr	r1, [pc, #252]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 80055a0:	4313      	orrs	r3, r2
 80055a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	3b01      	subs	r3, #1
 80055aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	025b      	lsls	r3, r3, #9
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	431a      	orrs	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	3b01      	subs	r3, #1
 80055c0:	041b      	lsls	r3, r3, #16
 80055c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	3b01      	subs	r3, #1
 80055ce:	061b      	lsls	r3, r3, #24
 80055d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80055d4:	4931      	ldr	r1, [pc, #196]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80055da:	4b30      	ldr	r3, [pc, #192]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	492d      	ldr	r1, [pc, #180]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 80055e8:	4313      	orrs	r3, r2
 80055ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80055ec:	4b2b      	ldr	r3, [pc, #172]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 80055ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055f0:	f023 0220 	bic.w	r2, r3, #32
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	4928      	ldr	r1, [pc, #160]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80055fe:	4b27      	ldr	r3, [pc, #156]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005602:	4a26      	ldr	r2, [pc, #152]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005604:	f023 0310 	bic.w	r3, r3, #16
 8005608:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800560a:	4b24      	ldr	r3, [pc, #144]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 800560c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800560e:	4b24      	ldr	r3, [pc, #144]	@ (80056a0 <RCCEx_PLL2_Config+0x160>)
 8005610:	4013      	ands	r3, r2
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	69d2      	ldr	r2, [r2, #28]
 8005616:	00d2      	lsls	r2, r2, #3
 8005618:	4920      	ldr	r1, [pc, #128]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 800561a:	4313      	orrs	r3, r2
 800561c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800561e:	4b1f      	ldr	r3, [pc, #124]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005622:	4a1e      	ldr	r2, [pc, #120]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005624:	f043 0310 	orr.w	r3, r3, #16
 8005628:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d106      	bne.n	800563e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005630:	4b1a      	ldr	r3, [pc, #104]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005634:	4a19      	ldr	r2, [pc, #100]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005636:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800563a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800563c:	e00f      	b.n	800565e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	2b01      	cmp	r3, #1
 8005642:	d106      	bne.n	8005652 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005644:	4b15      	ldr	r3, [pc, #84]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005648:	4a14      	ldr	r2, [pc, #80]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 800564a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800564e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005650:	e005      	b.n	800565e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005652:	4b12      	ldr	r3, [pc, #72]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005656:	4a11      	ldr	r2, [pc, #68]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005658:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800565c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800565e:	4b0f      	ldr	r3, [pc, #60]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a0e      	ldr	r2, [pc, #56]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005664:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800566a:	f7fb fdd9 	bl	8001220 <HAL_GetTick>
 800566e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005670:	e008      	b.n	8005684 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005672:	f7fb fdd5 	bl	8001220 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e006      	b.n	8005692 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005684:	4b05      	ldr	r3, [pc, #20]	@ (800569c <RCCEx_PLL2_Config+0x15c>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d0f0      	beq.n	8005672 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005690:	7bfb      	ldrb	r3, [r7, #15]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	58024400 	.word	0x58024400
 80056a0:	ffff0007 	.word	0xffff0007

080056a4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80056b2:	4b53      	ldr	r3, [pc, #332]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80056b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b03      	cmp	r3, #3
 80056bc:	d101      	bne.n	80056c2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e099      	b.n	80057f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80056c2:	4b4f      	ldr	r3, [pc, #316]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a4e      	ldr	r2, [pc, #312]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80056c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056ce:	f7fb fda7 	bl	8001220 <HAL_GetTick>
 80056d2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056d4:	e008      	b.n	80056e8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80056d6:	f7fb fda3 	bl	8001220 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e086      	b.n	80057f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80056e8:	4b45      	ldr	r3, [pc, #276]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f0      	bne.n	80056d6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80056f4:	4b42      	ldr	r3, [pc, #264]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	051b      	lsls	r3, r3, #20
 8005702:	493f      	ldr	r1, [pc, #252]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 8005704:	4313      	orrs	r3, r2
 8005706:	628b      	str	r3, [r1, #40]	@ 0x28
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	3b01      	subs	r3, #1
 800570e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	3b01      	subs	r3, #1
 8005718:	025b      	lsls	r3, r3, #9
 800571a:	b29b      	uxth	r3, r3
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	3b01      	subs	r3, #1
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	3b01      	subs	r3, #1
 8005732:	061b      	lsls	r3, r3, #24
 8005734:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005738:	4931      	ldr	r1, [pc, #196]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 800573a:	4313      	orrs	r3, r2
 800573c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800573e:	4b30      	ldr	r3, [pc, #192]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 8005740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005742:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	492d      	ldr	r1, [pc, #180]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 800574c:	4313      	orrs	r3, r2
 800574e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005750:	4b2b      	ldr	r3, [pc, #172]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 8005752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005754:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	4928      	ldr	r1, [pc, #160]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 800575e:	4313      	orrs	r3, r2
 8005760:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005762:	4b27      	ldr	r3, [pc, #156]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 8005764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005766:	4a26      	ldr	r2, [pc, #152]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 8005768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800576c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800576e:	4b24      	ldr	r3, [pc, #144]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 8005770:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005772:	4b24      	ldr	r3, [pc, #144]	@ (8005804 <RCCEx_PLL3_Config+0x160>)
 8005774:	4013      	ands	r3, r2
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	69d2      	ldr	r2, [r2, #28]
 800577a:	00d2      	lsls	r2, r2, #3
 800577c:	4920      	ldr	r1, [pc, #128]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 800577e:	4313      	orrs	r3, r2
 8005780:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005782:	4b1f      	ldr	r3, [pc, #124]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 8005784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005786:	4a1e      	ldr	r2, [pc, #120]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 8005788:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800578c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d106      	bne.n	80057a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005794:	4b1a      	ldr	r3, [pc, #104]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 8005796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005798:	4a19      	ldr	r2, [pc, #100]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 800579a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800579e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057a0:	e00f      	b.n	80057c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d106      	bne.n	80057b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80057a8:	4b15      	ldr	r3, [pc, #84]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80057aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ac:	4a14      	ldr	r2, [pc, #80]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80057ae:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80057b4:	e005      	b.n	80057c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80057b6:	4b12      	ldr	r3, [pc, #72]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80057b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ba:	4a11      	ldr	r2, [pc, #68]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80057bc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80057c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80057c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057ce:	f7fb fd27 	bl	8001220 <HAL_GetTick>
 80057d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057d4:	e008      	b.n	80057e8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80057d6:	f7fb fd23 	bl	8001220 <HAL_GetTick>
 80057da:	4602      	mov	r2, r0
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d901      	bls.n	80057e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e006      	b.n	80057f6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80057e8:	4b05      	ldr	r3, [pc, #20]	@ (8005800 <RCCEx_PLL3_Config+0x15c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d0f0      	beq.n	80057d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80057f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	58024400 	.word	0x58024400
 8005804:	ffff0007 	.word	0xffff0007

08005808 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e042      	b.n	80058a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005820:	2b00      	cmp	r3, #0
 8005822:	d106      	bne.n	8005832 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7fb fa7f 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2224      	movs	r2, #36	@ 0x24
 8005836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f022 0201 	bic.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 fe1e 	bl	8006494 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f8b3 	bl	80059c4 <UART_SetConfig>
 800585e:	4603      	mov	r3, r0
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e01b      	b.n	80058a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f042 0201 	orr.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 fe9d 	bl	80065d8 <UART_CheckIdleState>
 800589e:	4603      	mov	r3, r0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	@ 0x28
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d17b      	bne.n	80059ba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <HAL_UART_Transmit+0x26>
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e074      	b.n	80059bc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2221      	movs	r2, #33	@ 0x21
 80058de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058e2:	f7fb fc9d 	bl	8001220 <HAL_GetTick>
 80058e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	88fa      	ldrh	r2, [r7, #6]
 80058ec:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	88fa      	ldrh	r2, [r7, #6]
 80058f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005900:	d108      	bne.n	8005914 <HAL_UART_Transmit+0x6c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	e003      	b.n	800591c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800591c:	e030      	b.n	8005980 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	2180      	movs	r1, #128	@ 0x80
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 feff 	bl	800672c <UART_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e03d      	b.n	80059bc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10b      	bne.n	800595e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005954:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	3302      	adds	r3, #2
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e007      	b.n	800596e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	3301      	adds	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005974:	b29b      	uxth	r3, r3
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1c8      	bne.n	800591e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2200      	movs	r2, #0
 8005994:	2140      	movs	r1, #64	@ 0x40
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 fec8 	bl	800672c <UART_WaitOnFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e006      	b.n	80059bc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e000      	b.n	80059bc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80059ba:	2302      	movs	r3, #2
  }
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3720      	adds	r7, #32
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059c8:	b092      	sub	sp, #72	@ 0x48
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059ce:	2300      	movs	r3, #0
 80059d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	689a      	ldr	r2, [r3, #8]
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	431a      	orrs	r2, r3
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	4bbe      	ldr	r3, [pc, #760]	@ (8005cec <UART_SetConfig+0x328>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	6812      	ldr	r2, [r2, #0]
 80059fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059fc:	430b      	orrs	r3, r1
 80059fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	68da      	ldr	r2, [r3, #12]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	430a      	orrs	r2, r1
 8005a14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4ab3      	ldr	r2, [pc, #716]	@ (8005cf0 <UART_SetConfig+0x32c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d004      	beq.n	8005a30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	4baf      	ldr	r3, [pc, #700]	@ (8005cf4 <UART_SetConfig+0x330>)
 8005a38:	4013      	ands	r3, r2
 8005a3a:	697a      	ldr	r2, [r7, #20]
 8005a3c:	6812      	ldr	r2, [r2, #0]
 8005a3e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a40:	430b      	orrs	r3, r1
 8005a42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a4a:	f023 010f 	bic.w	r1, r3, #15
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4aa6      	ldr	r2, [pc, #664]	@ (8005cf8 <UART_SetConfig+0x334>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d177      	bne.n	8005b54 <UART_SetConfig+0x190>
 8005a64:	4ba5      	ldr	r3, [pc, #660]	@ (8005cfc <UART_SetConfig+0x338>)
 8005a66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a6c:	2b28      	cmp	r3, #40	@ 0x28
 8005a6e:	d86d      	bhi.n	8005b4c <UART_SetConfig+0x188>
 8005a70:	a201      	add	r2, pc, #4	@ (adr r2, 8005a78 <UART_SetConfig+0xb4>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005b1d 	.word	0x08005b1d
 8005a7c:	08005b4d 	.word	0x08005b4d
 8005a80:	08005b4d 	.word	0x08005b4d
 8005a84:	08005b4d 	.word	0x08005b4d
 8005a88:	08005b4d 	.word	0x08005b4d
 8005a8c:	08005b4d 	.word	0x08005b4d
 8005a90:	08005b4d 	.word	0x08005b4d
 8005a94:	08005b4d 	.word	0x08005b4d
 8005a98:	08005b25 	.word	0x08005b25
 8005a9c:	08005b4d 	.word	0x08005b4d
 8005aa0:	08005b4d 	.word	0x08005b4d
 8005aa4:	08005b4d 	.word	0x08005b4d
 8005aa8:	08005b4d 	.word	0x08005b4d
 8005aac:	08005b4d 	.word	0x08005b4d
 8005ab0:	08005b4d 	.word	0x08005b4d
 8005ab4:	08005b4d 	.word	0x08005b4d
 8005ab8:	08005b2d 	.word	0x08005b2d
 8005abc:	08005b4d 	.word	0x08005b4d
 8005ac0:	08005b4d 	.word	0x08005b4d
 8005ac4:	08005b4d 	.word	0x08005b4d
 8005ac8:	08005b4d 	.word	0x08005b4d
 8005acc:	08005b4d 	.word	0x08005b4d
 8005ad0:	08005b4d 	.word	0x08005b4d
 8005ad4:	08005b4d 	.word	0x08005b4d
 8005ad8:	08005b35 	.word	0x08005b35
 8005adc:	08005b4d 	.word	0x08005b4d
 8005ae0:	08005b4d 	.word	0x08005b4d
 8005ae4:	08005b4d 	.word	0x08005b4d
 8005ae8:	08005b4d 	.word	0x08005b4d
 8005aec:	08005b4d 	.word	0x08005b4d
 8005af0:	08005b4d 	.word	0x08005b4d
 8005af4:	08005b4d 	.word	0x08005b4d
 8005af8:	08005b3d 	.word	0x08005b3d
 8005afc:	08005b4d 	.word	0x08005b4d
 8005b00:	08005b4d 	.word	0x08005b4d
 8005b04:	08005b4d 	.word	0x08005b4d
 8005b08:	08005b4d 	.word	0x08005b4d
 8005b0c:	08005b4d 	.word	0x08005b4d
 8005b10:	08005b4d 	.word	0x08005b4d
 8005b14:	08005b4d 	.word	0x08005b4d
 8005b18:	08005b45 	.word	0x08005b45
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e222      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005b24:	2304      	movs	r3, #4
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2a:	e21e      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005b2c:	2308      	movs	r3, #8
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e21a      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005b34:	2310      	movs	r3, #16
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e216      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005b3c:	2320      	movs	r3, #32
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b42:	e212      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005b44:	2340      	movs	r3, #64	@ 0x40
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4a:	e20e      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005b4c:	2380      	movs	r3, #128	@ 0x80
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b52:	e20a      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a69      	ldr	r2, [pc, #420]	@ (8005d00 <UART_SetConfig+0x33c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d130      	bne.n	8005bc0 <UART_SetConfig+0x1fc>
 8005b5e:	4b67      	ldr	r3, [pc, #412]	@ (8005cfc <UART_SetConfig+0x338>)
 8005b60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	2b05      	cmp	r3, #5
 8005b68:	d826      	bhi.n	8005bb8 <UART_SetConfig+0x1f4>
 8005b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b70 <UART_SetConfig+0x1ac>)
 8005b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b70:	08005b89 	.word	0x08005b89
 8005b74:	08005b91 	.word	0x08005b91
 8005b78:	08005b99 	.word	0x08005b99
 8005b7c:	08005ba1 	.word	0x08005ba1
 8005b80:	08005ba9 	.word	0x08005ba9
 8005b84:	08005bb1 	.word	0x08005bb1
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e1ec      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005b90:	2304      	movs	r3, #4
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e1e8      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005b98:	2308      	movs	r3, #8
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e1e4      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e1e0      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005ba8:	2320      	movs	r3, #32
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bae:	e1dc      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005bb0:	2340      	movs	r3, #64	@ 0x40
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb6:	e1d8      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005bb8:	2380      	movs	r3, #128	@ 0x80
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bbe:	e1d4      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a4f      	ldr	r2, [pc, #316]	@ (8005d04 <UART_SetConfig+0x340>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d130      	bne.n	8005c2c <UART_SetConfig+0x268>
 8005bca:	4b4c      	ldr	r3, [pc, #304]	@ (8005cfc <UART_SetConfig+0x338>)
 8005bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	2b05      	cmp	r3, #5
 8005bd4:	d826      	bhi.n	8005c24 <UART_SetConfig+0x260>
 8005bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bdc <UART_SetConfig+0x218>)
 8005bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bdc:	08005bf5 	.word	0x08005bf5
 8005be0:	08005bfd 	.word	0x08005bfd
 8005be4:	08005c05 	.word	0x08005c05
 8005be8:	08005c0d 	.word	0x08005c0d
 8005bec:	08005c15 	.word	0x08005c15
 8005bf0:	08005c1d 	.word	0x08005c1d
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e1b6      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005bfc:	2304      	movs	r3, #4
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e1b2      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c04:	2308      	movs	r3, #8
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e1ae      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c0c:	2310      	movs	r3, #16
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e1aa      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c14:	2320      	movs	r3, #32
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e1a6      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c1c:	2340      	movs	r3, #64	@ 0x40
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c22:	e1a2      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c24:	2380      	movs	r3, #128	@ 0x80
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2a:	e19e      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a35      	ldr	r2, [pc, #212]	@ (8005d08 <UART_SetConfig+0x344>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d130      	bne.n	8005c98 <UART_SetConfig+0x2d4>
 8005c36:	4b31      	ldr	r3, [pc, #196]	@ (8005cfc <UART_SetConfig+0x338>)
 8005c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	2b05      	cmp	r3, #5
 8005c40:	d826      	bhi.n	8005c90 <UART_SetConfig+0x2cc>
 8005c42:	a201      	add	r2, pc, #4	@ (adr r2, 8005c48 <UART_SetConfig+0x284>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005c61 	.word	0x08005c61
 8005c4c:	08005c69 	.word	0x08005c69
 8005c50:	08005c71 	.word	0x08005c71
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c81 	.word	0x08005c81
 8005c5c:	08005c89 	.word	0x08005c89
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e180      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e17c      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c70:	2308      	movs	r3, #8
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e178      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e174      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c80:	2320      	movs	r3, #32
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e170      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c88:	2340      	movs	r3, #64	@ 0x40
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e16c      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c90:	2380      	movs	r3, #128	@ 0x80
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e168      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8005d0c <UART_SetConfig+0x348>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d142      	bne.n	8005d28 <UART_SetConfig+0x364>
 8005ca2:	4b16      	ldr	r3, [pc, #88]	@ (8005cfc <UART_SetConfig+0x338>)
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	2b05      	cmp	r3, #5
 8005cac:	d838      	bhi.n	8005d20 <UART_SetConfig+0x35c>
 8005cae:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb4 <UART_SetConfig+0x2f0>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005ccd 	.word	0x08005ccd
 8005cb8:	08005cd5 	.word	0x08005cd5
 8005cbc:	08005cdd 	.word	0x08005cdd
 8005cc0:	08005ce5 	.word	0x08005ce5
 8005cc4:	08005d11 	.word	0x08005d11
 8005cc8:	08005d19 	.word	0x08005d19
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e14a      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e146      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005cdc:	2308      	movs	r3, #8
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e142      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005ce4:	2310      	movs	r3, #16
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e13e      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005cec:	cfff69f3 	.word	0xcfff69f3
 8005cf0:	58000c00 	.word	0x58000c00
 8005cf4:	11fff4ff 	.word	0x11fff4ff
 8005cf8:	40011000 	.word	0x40011000
 8005cfc:	58024400 	.word	0x58024400
 8005d00:	40004400 	.word	0x40004400
 8005d04:	40004800 	.word	0x40004800
 8005d08:	40004c00 	.word	0x40004c00
 8005d0c:	40005000 	.word	0x40005000
 8005d10:	2320      	movs	r3, #32
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e128      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005d18:	2340      	movs	r3, #64	@ 0x40
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e124      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005d20:	2380      	movs	r3, #128	@ 0x80
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e120      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4acb      	ldr	r2, [pc, #812]	@ (800605c <UART_SetConfig+0x698>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d176      	bne.n	8005e20 <UART_SetConfig+0x45c>
 8005d32:	4bcb      	ldr	r3, [pc, #812]	@ (8006060 <UART_SetConfig+0x69c>)
 8005d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d3a:	2b28      	cmp	r3, #40	@ 0x28
 8005d3c:	d86c      	bhi.n	8005e18 <UART_SetConfig+0x454>
 8005d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d44 <UART_SetConfig+0x380>)
 8005d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d44:	08005de9 	.word	0x08005de9
 8005d48:	08005e19 	.word	0x08005e19
 8005d4c:	08005e19 	.word	0x08005e19
 8005d50:	08005e19 	.word	0x08005e19
 8005d54:	08005e19 	.word	0x08005e19
 8005d58:	08005e19 	.word	0x08005e19
 8005d5c:	08005e19 	.word	0x08005e19
 8005d60:	08005e19 	.word	0x08005e19
 8005d64:	08005df1 	.word	0x08005df1
 8005d68:	08005e19 	.word	0x08005e19
 8005d6c:	08005e19 	.word	0x08005e19
 8005d70:	08005e19 	.word	0x08005e19
 8005d74:	08005e19 	.word	0x08005e19
 8005d78:	08005e19 	.word	0x08005e19
 8005d7c:	08005e19 	.word	0x08005e19
 8005d80:	08005e19 	.word	0x08005e19
 8005d84:	08005df9 	.word	0x08005df9
 8005d88:	08005e19 	.word	0x08005e19
 8005d8c:	08005e19 	.word	0x08005e19
 8005d90:	08005e19 	.word	0x08005e19
 8005d94:	08005e19 	.word	0x08005e19
 8005d98:	08005e19 	.word	0x08005e19
 8005d9c:	08005e19 	.word	0x08005e19
 8005da0:	08005e19 	.word	0x08005e19
 8005da4:	08005e01 	.word	0x08005e01
 8005da8:	08005e19 	.word	0x08005e19
 8005dac:	08005e19 	.word	0x08005e19
 8005db0:	08005e19 	.word	0x08005e19
 8005db4:	08005e19 	.word	0x08005e19
 8005db8:	08005e19 	.word	0x08005e19
 8005dbc:	08005e19 	.word	0x08005e19
 8005dc0:	08005e19 	.word	0x08005e19
 8005dc4:	08005e09 	.word	0x08005e09
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	08005e19 	.word	0x08005e19
 8005dd0:	08005e19 	.word	0x08005e19
 8005dd4:	08005e19 	.word	0x08005e19
 8005dd8:	08005e19 	.word	0x08005e19
 8005ddc:	08005e19 	.word	0x08005e19
 8005de0:	08005e19 	.word	0x08005e19
 8005de4:	08005e11 	.word	0x08005e11
 8005de8:	2301      	movs	r3, #1
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e0bc      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005df0:	2304      	movs	r3, #4
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e0b8      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005df8:	2308      	movs	r3, #8
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e0b4      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e00:	2310      	movs	r3, #16
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e0b0      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e08:	2320      	movs	r3, #32
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e0ac      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e10:	2340      	movs	r3, #64	@ 0x40
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e0a8      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e18:	2380      	movs	r3, #128	@ 0x80
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e0a4      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a8f      	ldr	r2, [pc, #572]	@ (8006064 <UART_SetConfig+0x6a0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d130      	bne.n	8005e8c <UART_SetConfig+0x4c8>
 8005e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8006060 <UART_SetConfig+0x69c>)
 8005e2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	2b05      	cmp	r3, #5
 8005e34:	d826      	bhi.n	8005e84 <UART_SetConfig+0x4c0>
 8005e36:	a201      	add	r2, pc, #4	@ (adr r2, 8005e3c <UART_SetConfig+0x478>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e55 	.word	0x08005e55
 8005e40:	08005e5d 	.word	0x08005e5d
 8005e44:	08005e65 	.word	0x08005e65
 8005e48:	08005e6d 	.word	0x08005e6d
 8005e4c:	08005e75 	.word	0x08005e75
 8005e50:	08005e7d 	.word	0x08005e7d
 8005e54:	2300      	movs	r3, #0
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e086      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e5c:	2304      	movs	r3, #4
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e082      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e64:	2308      	movs	r3, #8
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e07e      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e6c:	2310      	movs	r3, #16
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e07a      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e74:	2320      	movs	r3, #32
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e076      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e7c:	2340      	movs	r3, #64	@ 0x40
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e072      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e84:	2380      	movs	r3, #128	@ 0x80
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e06e      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a75      	ldr	r2, [pc, #468]	@ (8006068 <UART_SetConfig+0x6a4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d130      	bne.n	8005ef8 <UART_SetConfig+0x534>
 8005e96:	4b72      	ldr	r3, [pc, #456]	@ (8006060 <UART_SetConfig+0x69c>)
 8005e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	2b05      	cmp	r3, #5
 8005ea0:	d826      	bhi.n	8005ef0 <UART_SetConfig+0x52c>
 8005ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea8 <UART_SetConfig+0x4e4>)
 8005ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea8:	08005ec1 	.word	0x08005ec1
 8005eac:	08005ec9 	.word	0x08005ec9
 8005eb0:	08005ed1 	.word	0x08005ed1
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005ee1 	.word	0x08005ee1
 8005ebc:	08005ee9 	.word	0x08005ee9
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e050      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005ec8:	2304      	movs	r3, #4
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e04c      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005ed0:	2308      	movs	r3, #8
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e048      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005ed8:	2310      	movs	r3, #16
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e044      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e040      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005ee8:	2340      	movs	r3, #64	@ 0x40
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e03c      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005ef0:	2380      	movs	r3, #128	@ 0x80
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e038      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a5b      	ldr	r2, [pc, #364]	@ (800606c <UART_SetConfig+0x6a8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d130      	bne.n	8005f64 <UART_SetConfig+0x5a0>
 8005f02:	4b57      	ldr	r3, [pc, #348]	@ (8006060 <UART_SetConfig+0x69c>)
 8005f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b05      	cmp	r3, #5
 8005f0c:	d826      	bhi.n	8005f5c <UART_SetConfig+0x598>
 8005f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f14 <UART_SetConfig+0x550>)
 8005f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f14:	08005f2d 	.word	0x08005f2d
 8005f18:	08005f35 	.word	0x08005f35
 8005f1c:	08005f3d 	.word	0x08005f3d
 8005f20:	08005f45 	.word	0x08005f45
 8005f24:	08005f4d 	.word	0x08005f4d
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e01a      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005f34:	2304      	movs	r3, #4
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e016      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e012      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005f44:	2310      	movs	r3, #16
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e00e      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e00a      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005f54:	2340      	movs	r3, #64	@ 0x40
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e006      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005f5c:	2380      	movs	r3, #128	@ 0x80
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e002      	b.n	8005f6a <UART_SetConfig+0x5a6>
 8005f64:	2380      	movs	r3, #128	@ 0x80
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a3f      	ldr	r2, [pc, #252]	@ (800606c <UART_SetConfig+0x6a8>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	f040 80f8 	bne.w	8006166 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f76:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	2b20      	cmp	r3, #32
 8005f7c:	dc46      	bgt.n	800600c <UART_SetConfig+0x648>
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	f2c0 8082 	blt.w	8006088 <UART_SetConfig+0x6c4>
 8005f84:	3b02      	subs	r3, #2
 8005f86:	2b1e      	cmp	r3, #30
 8005f88:	d87e      	bhi.n	8006088 <UART_SetConfig+0x6c4>
 8005f8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005f90 <UART_SetConfig+0x5cc>)
 8005f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f90:	08006013 	.word	0x08006013
 8005f94:	08006089 	.word	0x08006089
 8005f98:	0800601b 	.word	0x0800601b
 8005f9c:	08006089 	.word	0x08006089
 8005fa0:	08006089 	.word	0x08006089
 8005fa4:	08006089 	.word	0x08006089
 8005fa8:	0800602b 	.word	0x0800602b
 8005fac:	08006089 	.word	0x08006089
 8005fb0:	08006089 	.word	0x08006089
 8005fb4:	08006089 	.word	0x08006089
 8005fb8:	08006089 	.word	0x08006089
 8005fbc:	08006089 	.word	0x08006089
 8005fc0:	08006089 	.word	0x08006089
 8005fc4:	08006089 	.word	0x08006089
 8005fc8:	0800603b 	.word	0x0800603b
 8005fcc:	08006089 	.word	0x08006089
 8005fd0:	08006089 	.word	0x08006089
 8005fd4:	08006089 	.word	0x08006089
 8005fd8:	08006089 	.word	0x08006089
 8005fdc:	08006089 	.word	0x08006089
 8005fe0:	08006089 	.word	0x08006089
 8005fe4:	08006089 	.word	0x08006089
 8005fe8:	08006089 	.word	0x08006089
 8005fec:	08006089 	.word	0x08006089
 8005ff0:	08006089 	.word	0x08006089
 8005ff4:	08006089 	.word	0x08006089
 8005ff8:	08006089 	.word	0x08006089
 8005ffc:	08006089 	.word	0x08006089
 8006000:	08006089 	.word	0x08006089
 8006004:	08006089 	.word	0x08006089
 8006008:	0800607b 	.word	0x0800607b
 800600c:	2b40      	cmp	r3, #64	@ 0x40
 800600e:	d037      	beq.n	8006080 <UART_SetConfig+0x6bc>
 8006010:	e03a      	b.n	8006088 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006012:	f7fe ffd7 	bl	8004fc4 <HAL_RCCEx_GetD3PCLK1Freq>
 8006016:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006018:	e03c      	b.n	8006094 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800601a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe ffe6 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006028:	e034      	b.n	8006094 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800602a:	f107 0318 	add.w	r3, r7, #24
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff f932 	bl	8005298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006038:	e02c      	b.n	8006094 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800603a:	4b09      	ldr	r3, [pc, #36]	@ (8006060 <UART_SetConfig+0x69c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b00      	cmp	r3, #0
 8006044:	d016      	beq.n	8006074 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006046:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <UART_SetConfig+0x69c>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	08db      	lsrs	r3, r3, #3
 800604c:	f003 0303 	and.w	r3, r3, #3
 8006050:	4a07      	ldr	r2, [pc, #28]	@ (8006070 <UART_SetConfig+0x6ac>)
 8006052:	fa22 f303 	lsr.w	r3, r2, r3
 8006056:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006058:	e01c      	b.n	8006094 <UART_SetConfig+0x6d0>
 800605a:	bf00      	nop
 800605c:	40011400 	.word	0x40011400
 8006060:	58024400 	.word	0x58024400
 8006064:	40007800 	.word	0x40007800
 8006068:	40007c00 	.word	0x40007c00
 800606c:	58000c00 	.word	0x58000c00
 8006070:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006074:	4b9d      	ldr	r3, [pc, #628]	@ (80062ec <UART_SetConfig+0x928>)
 8006076:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006078:	e00c      	b.n	8006094 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800607a:	4b9d      	ldr	r3, [pc, #628]	@ (80062f0 <UART_SetConfig+0x92c>)
 800607c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800607e:	e009      	b.n	8006094 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006080:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006086:	e005      	b.n	8006094 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8006088:	2300      	movs	r3, #0
 800608a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006092:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006094:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006096:	2b00      	cmp	r3, #0
 8006098:	f000 81de 	beq.w	8006458 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a0:	4a94      	ldr	r2, [pc, #592]	@ (80062f4 <UART_SetConfig+0x930>)
 80060a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a6:	461a      	mov	r2, r3
 80060a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80060ae:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	685a      	ldr	r2, [r3, #4]
 80060b4:	4613      	mov	r3, r2
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	4413      	add	r3, r2
 80060ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060bc:	429a      	cmp	r2, r3
 80060be:	d305      	bcc.n	80060cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d903      	bls.n	80060d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060d2:	e1c1      	b.n	8006458 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060d6:	2200      	movs	r2, #0
 80060d8:	60bb      	str	r3, [r7, #8]
 80060da:	60fa      	str	r2, [r7, #12]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060e0:	4a84      	ldr	r2, [pc, #528]	@ (80062f4 <UART_SetConfig+0x930>)
 80060e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2200      	movs	r2, #0
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	607a      	str	r2, [r7, #4]
 80060ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80060f6:	f7fa f943 	bl	8000380 <__aeabi_uldivmod>
 80060fa:	4602      	mov	r2, r0
 80060fc:	460b      	mov	r3, r1
 80060fe:	4610      	mov	r0, r2
 8006100:	4619      	mov	r1, r3
 8006102:	f04f 0200 	mov.w	r2, #0
 8006106:	f04f 0300 	mov.w	r3, #0
 800610a:	020b      	lsls	r3, r1, #8
 800610c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006110:	0202      	lsls	r2, r0, #8
 8006112:	6979      	ldr	r1, [r7, #20]
 8006114:	6849      	ldr	r1, [r1, #4]
 8006116:	0849      	lsrs	r1, r1, #1
 8006118:	2000      	movs	r0, #0
 800611a:	460c      	mov	r4, r1
 800611c:	4605      	mov	r5, r0
 800611e:	eb12 0804 	adds.w	r8, r2, r4
 8006122:	eb43 0905 	adc.w	r9, r3, r5
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	469a      	mov	sl, r3
 800612e:	4693      	mov	fp, r2
 8006130:	4652      	mov	r2, sl
 8006132:	465b      	mov	r3, fp
 8006134:	4640      	mov	r0, r8
 8006136:	4649      	mov	r1, r9
 8006138:	f7fa f922 	bl	8000380 <__aeabi_uldivmod>
 800613c:	4602      	mov	r2, r0
 800613e:	460b      	mov	r3, r1
 8006140:	4613      	mov	r3, r2
 8006142:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006146:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800614a:	d308      	bcc.n	800615e <UART_SetConfig+0x79a>
 800614c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006152:	d204      	bcs.n	800615e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	e17c      	b.n	8006458 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006164:	e178      	b.n	8006458 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800616e:	f040 80c5 	bne.w	80062fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006172:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006176:	2b20      	cmp	r3, #32
 8006178:	dc48      	bgt.n	800620c <UART_SetConfig+0x848>
 800617a:	2b00      	cmp	r3, #0
 800617c:	db7b      	blt.n	8006276 <UART_SetConfig+0x8b2>
 800617e:	2b20      	cmp	r3, #32
 8006180:	d879      	bhi.n	8006276 <UART_SetConfig+0x8b2>
 8006182:	a201      	add	r2, pc, #4	@ (adr r2, 8006188 <UART_SetConfig+0x7c4>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	08006213 	.word	0x08006213
 800618c:	0800621b 	.word	0x0800621b
 8006190:	08006277 	.word	0x08006277
 8006194:	08006277 	.word	0x08006277
 8006198:	08006223 	.word	0x08006223
 800619c:	08006277 	.word	0x08006277
 80061a0:	08006277 	.word	0x08006277
 80061a4:	08006277 	.word	0x08006277
 80061a8:	08006233 	.word	0x08006233
 80061ac:	08006277 	.word	0x08006277
 80061b0:	08006277 	.word	0x08006277
 80061b4:	08006277 	.word	0x08006277
 80061b8:	08006277 	.word	0x08006277
 80061bc:	08006277 	.word	0x08006277
 80061c0:	08006277 	.word	0x08006277
 80061c4:	08006277 	.word	0x08006277
 80061c8:	08006243 	.word	0x08006243
 80061cc:	08006277 	.word	0x08006277
 80061d0:	08006277 	.word	0x08006277
 80061d4:	08006277 	.word	0x08006277
 80061d8:	08006277 	.word	0x08006277
 80061dc:	08006277 	.word	0x08006277
 80061e0:	08006277 	.word	0x08006277
 80061e4:	08006277 	.word	0x08006277
 80061e8:	08006277 	.word	0x08006277
 80061ec:	08006277 	.word	0x08006277
 80061f0:	08006277 	.word	0x08006277
 80061f4:	08006277 	.word	0x08006277
 80061f8:	08006277 	.word	0x08006277
 80061fc:	08006277 	.word	0x08006277
 8006200:	08006277 	.word	0x08006277
 8006204:	08006277 	.word	0x08006277
 8006208:	08006269 	.word	0x08006269
 800620c:	2b40      	cmp	r3, #64	@ 0x40
 800620e:	d02e      	beq.n	800626e <UART_SetConfig+0x8aa>
 8006210:	e031      	b.n	8006276 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006212:	f7fd fca1 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 8006216:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006218:	e033      	b.n	8006282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800621a:	f7fd fcb3 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 800621e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006220:	e02f      	b.n	8006282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006226:	4618      	mov	r0, r3
 8006228:	f7fe fee2 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006230:	e027      	b.n	8006282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006232:	f107 0318 	add.w	r3, r7, #24
 8006236:	4618      	mov	r0, r3
 8006238:	f7ff f82e 	bl	8005298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006240:	e01f      	b.n	8006282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006242:	4b2d      	ldr	r3, [pc, #180]	@ (80062f8 <UART_SetConfig+0x934>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d009      	beq.n	8006262 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800624e:	4b2a      	ldr	r3, [pc, #168]	@ (80062f8 <UART_SetConfig+0x934>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	08db      	lsrs	r3, r3, #3
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	4a24      	ldr	r2, [pc, #144]	@ (80062ec <UART_SetConfig+0x928>)
 800625a:	fa22 f303 	lsr.w	r3, r2, r3
 800625e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006260:	e00f      	b.n	8006282 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006262:	4b22      	ldr	r3, [pc, #136]	@ (80062ec <UART_SetConfig+0x928>)
 8006264:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006266:	e00c      	b.n	8006282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006268:	4b21      	ldr	r3, [pc, #132]	@ (80062f0 <UART_SetConfig+0x92c>)
 800626a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800626c:	e009      	b.n	8006282 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006274:	e005      	b.n	8006282 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006280:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006282:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006284:	2b00      	cmp	r3, #0
 8006286:	f000 80e7 	beq.w	8006458 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628e:	4a19      	ldr	r2, [pc, #100]	@ (80062f4 <UART_SetConfig+0x930>)
 8006290:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006294:	461a      	mov	r2, r3
 8006296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006298:	fbb3 f3f2 	udiv	r3, r3, r2
 800629c:	005a      	lsls	r2, r3, #1
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	441a      	add	r2, r3
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b2:	2b0f      	cmp	r3, #15
 80062b4:	d916      	bls.n	80062e4 <UART_SetConfig+0x920>
 80062b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062bc:	d212      	bcs.n	80062e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80062be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	f023 030f 	bic.w	r3, r3, #15
 80062c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80062c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	f003 0307 	and.w	r3, r3, #7
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80062d6:	4313      	orrs	r3, r2
 80062d8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80062e0:	60da      	str	r2, [r3, #12]
 80062e2:	e0b9      	b.n	8006458 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062ea:	e0b5      	b.n	8006458 <UART_SetConfig+0xa94>
 80062ec:	03d09000 	.word	0x03d09000
 80062f0:	003d0900 	.word	0x003d0900
 80062f4:	08009a3c 	.word	0x08009a3c
 80062f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80062fc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006300:	2b20      	cmp	r3, #32
 8006302:	dc49      	bgt.n	8006398 <UART_SetConfig+0x9d4>
 8006304:	2b00      	cmp	r3, #0
 8006306:	db7c      	blt.n	8006402 <UART_SetConfig+0xa3e>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d87a      	bhi.n	8006402 <UART_SetConfig+0xa3e>
 800630c:	a201      	add	r2, pc, #4	@ (adr r2, 8006314 <UART_SetConfig+0x950>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	0800639f 	.word	0x0800639f
 8006318:	080063a7 	.word	0x080063a7
 800631c:	08006403 	.word	0x08006403
 8006320:	08006403 	.word	0x08006403
 8006324:	080063af 	.word	0x080063af
 8006328:	08006403 	.word	0x08006403
 800632c:	08006403 	.word	0x08006403
 8006330:	08006403 	.word	0x08006403
 8006334:	080063bf 	.word	0x080063bf
 8006338:	08006403 	.word	0x08006403
 800633c:	08006403 	.word	0x08006403
 8006340:	08006403 	.word	0x08006403
 8006344:	08006403 	.word	0x08006403
 8006348:	08006403 	.word	0x08006403
 800634c:	08006403 	.word	0x08006403
 8006350:	08006403 	.word	0x08006403
 8006354:	080063cf 	.word	0x080063cf
 8006358:	08006403 	.word	0x08006403
 800635c:	08006403 	.word	0x08006403
 8006360:	08006403 	.word	0x08006403
 8006364:	08006403 	.word	0x08006403
 8006368:	08006403 	.word	0x08006403
 800636c:	08006403 	.word	0x08006403
 8006370:	08006403 	.word	0x08006403
 8006374:	08006403 	.word	0x08006403
 8006378:	08006403 	.word	0x08006403
 800637c:	08006403 	.word	0x08006403
 8006380:	08006403 	.word	0x08006403
 8006384:	08006403 	.word	0x08006403
 8006388:	08006403 	.word	0x08006403
 800638c:	08006403 	.word	0x08006403
 8006390:	08006403 	.word	0x08006403
 8006394:	080063f5 	.word	0x080063f5
 8006398:	2b40      	cmp	r3, #64	@ 0x40
 800639a:	d02e      	beq.n	80063fa <UART_SetConfig+0xa36>
 800639c:	e031      	b.n	8006402 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800639e:	f7fd fbdb 	bl	8003b58 <HAL_RCC_GetPCLK1Freq>
 80063a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063a4:	e033      	b.n	800640e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a6:	f7fd fbed 	bl	8003b84 <HAL_RCC_GetPCLK2Freq>
 80063aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063ac:	e02f      	b.n	800640e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe fe1c 	bl	8004ff0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063bc:	e027      	b.n	800640e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063be:	f107 0318 	add.w	r3, r7, #24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe ff68 	bl	8005298 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063cc:	e01f      	b.n	800640e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006484 <UART_SetConfig+0xac0>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063da:	4b2a      	ldr	r3, [pc, #168]	@ (8006484 <UART_SetConfig+0xac0>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	08db      	lsrs	r3, r3, #3
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	4a28      	ldr	r2, [pc, #160]	@ (8006488 <UART_SetConfig+0xac4>)
 80063e6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063ec:	e00f      	b.n	800640e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80063ee:	4b26      	ldr	r3, [pc, #152]	@ (8006488 <UART_SetConfig+0xac4>)
 80063f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f2:	e00c      	b.n	800640e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063f4:	4b25      	ldr	r3, [pc, #148]	@ (800648c <UART_SetConfig+0xac8>)
 80063f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f8:	e009      	b.n	800640e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006400:	e005      	b.n	800640e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800640c:	bf00      	nop
    }

    if (pclk != 0U)
 800640e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006410:	2b00      	cmp	r3, #0
 8006412:	d021      	beq.n	8006458 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006418:	4a1d      	ldr	r2, [pc, #116]	@ (8006490 <UART_SetConfig+0xacc>)
 800641a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800641e:	461a      	mov	r2, r3
 8006420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006422:	fbb3 f2f2 	udiv	r2, r3, r2
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	085b      	lsrs	r3, r3, #1
 800642c:	441a      	add	r2, r3
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	fbb2 f3f3 	udiv	r3, r2, r3
 8006436:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643a:	2b0f      	cmp	r3, #15
 800643c:	d909      	bls.n	8006452 <UART_SetConfig+0xa8e>
 800643e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006444:	d205      	bcs.n	8006452 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006448:	b29a      	uxth	r2, r3
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60da      	str	r2, [r3, #12]
 8006450:	e002      	b.n	8006458 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2201      	movs	r2, #1
 800645c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2201      	movs	r2, #1
 8006464:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	2200      	movs	r2, #0
 800646c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2200      	movs	r2, #0
 8006472:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006474:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006478:	4618      	mov	r0, r3
 800647a:	3748      	adds	r7, #72	@ 0x48
 800647c:	46bd      	mov	sp, r7
 800647e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006482:	bf00      	nop
 8006484:	58024400 	.word	0x58024400
 8006488:	03d09000 	.word	0x03d09000
 800648c:	003d0900 	.word	0x003d0900
 8006490:	08009a3c 	.word	0x08009a3c

08006494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	f003 0308 	and.w	r3, r3, #8
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00a      	beq.n	80064be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	430a      	orrs	r2, r1
 80064bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00a      	beq.n	80064e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	430a      	orrs	r2, r1
 80064de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00a      	beq.n	8006502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006506:	f003 0304 	and.w	r3, r3, #4
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006528:	f003 0310 	and.w	r3, r3, #16
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00a      	beq.n	8006546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	430a      	orrs	r2, r1
 8006544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d00a      	beq.n	8006568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	430a      	orrs	r2, r1
 8006566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01a      	beq.n	80065aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006592:	d10a      	bne.n	80065aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	605a      	str	r2, [r3, #4]
  }
}
 80065cc:	bf00      	nop
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b098      	sub	sp, #96	@ 0x60
 80065dc:	af02      	add	r7, sp, #8
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065e8:	f7fa fe1a 	bl	8001220 <HAL_GetTick>
 80065ec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
 80065f8:	2b08      	cmp	r3, #8
 80065fa:	d12f      	bne.n	800665c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065fc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006604:	2200      	movs	r2, #0
 8006606:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f88e 	bl	800672c <UART_WaitOnFlagUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d022      	beq.n	800665c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006626:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800662a:	653b      	str	r3, [r7, #80]	@ 0x50
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006634:	647b      	str	r3, [r7, #68]	@ 0x44
 8006636:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800663a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e6      	bne.n	8006616 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006658:	2303      	movs	r3, #3
 800665a:	e063      	b.n	8006724 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0304 	and.w	r3, r3, #4
 8006666:	2b04      	cmp	r3, #4
 8006668:	d149      	bne.n	80066fe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800666e:	9300      	str	r3, [sp, #0]
 8006670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006672:	2200      	movs	r2, #0
 8006674:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f857 	bl	800672c <UART_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d03c      	beq.n	80066fe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	e853 3f00 	ldrex	r3, [r3]
 8006690:	623b      	str	r3, [r7, #32]
   return(result);
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006698:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066a2:	633b      	str	r3, [r7, #48]	@ 0x30
 80066a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066aa:	e841 2300 	strex	r3, r2, [r1]
 80066ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1e6      	bne.n	8006684 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3308      	adds	r3, #8
 80066bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	e853 3f00 	ldrex	r3, [r3]
 80066c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f023 0301 	bic.w	r3, r3, #1
 80066cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3308      	adds	r3, #8
 80066d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066d6:	61fa      	str	r2, [r7, #28]
 80066d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066da:	69b9      	ldr	r1, [r7, #24]
 80066dc:	69fa      	ldr	r2, [r7, #28]
 80066de:	e841 2300 	strex	r3, r2, [r1]
 80066e2:	617b      	str	r3, [r7, #20]
   return(result);
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1e5      	bne.n	80066b6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2220      	movs	r2, #32
 80066ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066fa:	2303      	movs	r3, #3
 80066fc:	e012      	b.n	8006724 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2220      	movs	r2, #32
 8006702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2220      	movs	r2, #32
 800670a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2200      	movs	r2, #0
 8006712:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3758      	adds	r7, #88	@ 0x58
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	603b      	str	r3, [r7, #0]
 8006738:	4613      	mov	r3, r2
 800673a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800673c:	e04f      	b.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006744:	d04b      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006746:	f7fa fd6b 	bl	8001220 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	69ba      	ldr	r2, [r7, #24]
 8006752:	429a      	cmp	r2, r3
 8006754:	d302      	bcc.n	800675c <UART_WaitOnFlagUntilTimeout+0x30>
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800675c:	2303      	movs	r3, #3
 800675e:	e04e      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0304 	and.w	r3, r3, #4
 800676a:	2b00      	cmp	r3, #0
 800676c:	d037      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2b80      	cmp	r3, #128	@ 0x80
 8006772:	d034      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b40      	cmp	r3, #64	@ 0x40
 8006778:	d031      	beq.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b08      	cmp	r3, #8
 8006786:	d110      	bne.n	80067aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2208      	movs	r2, #8
 800678e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 f839 	bl	8006808 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2208      	movs	r2, #8
 800679a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e029      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69db      	ldr	r3, [r3, #28]
 80067b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067b8:	d111      	bne.n	80067de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80067c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 f81f 	bl	8006808 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e00f      	b.n	80067fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	4013      	ands	r3, r2
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	bf0c      	ite	eq
 80067ee:	2301      	moveq	r3, #1
 80067f0:	2300      	movne	r3, #0
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	79fb      	ldrb	r3, [r7, #7]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d0a0      	beq.n	800673e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b095      	sub	sp, #84	@ 0x54
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800682e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006830:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e6      	bne.n	8006810 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	61fb      	str	r3, [r7, #28]
   return(result);
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	4b1e      	ldr	r3, [pc, #120]	@ (80068d0 <UART_EndRxTransfer+0xc8>)
 8006856:	4013      	ands	r3, r2
 8006858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006864:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e5      	bne.n	8006842 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800687a:	2b01      	cmp	r3, #1
 800687c:	d118      	bne.n	80068b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	60bb      	str	r3, [r7, #8]
   return(result);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	647b      	str	r3, [r7, #68]	@ 0x44
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	6979      	ldr	r1, [r7, #20]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	613b      	str	r3, [r7, #16]
   return(result);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e6      	bne.n	800687e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80068c4:	bf00      	nop
 80068c6:	3754      	adds	r7, #84	@ 0x54
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	effffffe 	.word	0xeffffffe

080068d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d101      	bne.n	80068ea <HAL_UARTEx_DisableFifoMode+0x16>
 80068e6:	2302      	movs	r3, #2
 80068e8:	e027      	b.n	800693a <HAL_UARTEx_DisableFifoMode+0x66>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2224      	movs	r2, #36	@ 0x24
 80068f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006918:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
}
 800693a:	4618      	mov	r0, r3
 800693c:	3714      	adds	r7, #20
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b084      	sub	sp, #16
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
 800694e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800695a:	2302      	movs	r3, #2
 800695c:	e02d      	b.n	80069ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2224      	movs	r2, #36	@ 0x24
 800696a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0201 	bic.w	r2, r2, #1
 8006984:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	683a      	ldr	r2, [r7, #0]
 8006996:	430a      	orrs	r2, r1
 8006998:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 f850 	bl	8006a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2220      	movs	r2, #32
 80069ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d101      	bne.n	80069da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069d6:	2302      	movs	r3, #2
 80069d8:	e02d      	b.n	8006a36 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2224      	movs	r2, #36	@ 0x24
 80069e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f022 0201 	bic.w	r2, r2, #1
 8006a00:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	430a      	orrs	r2, r1
 8006a14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f812 	bl	8006a40 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	68fa      	ldr	r2, [r7, #12]
 8006a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b085      	sub	sp, #20
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d108      	bne.n	8006a62 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a60:	e031      	b.n	8006ac6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a62:	2310      	movs	r3, #16
 8006a64:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a66:	2310      	movs	r3, #16
 8006a68:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	0e5b      	lsrs	r3, r3, #25
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	0f5b      	lsrs	r3, r3, #29
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	f003 0307 	and.w	r3, r3, #7
 8006a88:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a8a:	7bbb      	ldrb	r3, [r7, #14]
 8006a8c:	7b3a      	ldrb	r2, [r7, #12]
 8006a8e:	4911      	ldr	r1, [pc, #68]	@ (8006ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8006a90:	5c8a      	ldrb	r2, [r1, r2]
 8006a92:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a96:	7b3a      	ldrb	r2, [r7, #12]
 8006a98:	490f      	ldr	r1, [pc, #60]	@ (8006ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8006a9a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aa8:	7bfb      	ldrb	r3, [r7, #15]
 8006aaa:	7b7a      	ldrb	r2, [r7, #13]
 8006aac:	4909      	ldr	r1, [pc, #36]	@ (8006ad4 <UARTEx_SetNbDataToProcess+0x94>)
 8006aae:	5c8a      	ldrb	r2, [r1, r2]
 8006ab0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ab4:	7b7a      	ldrb	r2, [r7, #13]
 8006ab6:	4908      	ldr	r1, [pc, #32]	@ (8006ad8 <UARTEx_SetNbDataToProcess+0x98>)
 8006ab8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aba:	fb93 f3f2 	sdiv	r3, r3, r2
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	08009a54 	.word	0x08009a54
 8006ad8:	08009a5c 	.word	0x08009a5c

08006adc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006aee:	2b84      	cmp	r3, #132	@ 0x84
 8006af0:	d005      	beq.n	8006afe <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006af2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	3303      	adds	r3, #3
 8006afc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006afe:	68fb      	ldr	r3, [r7, #12]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006b10:	f000 fe30 	bl	8007774 <vTaskStartScheduler>
  
  return osOK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006b1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b1c:	b089      	sub	sp, #36	@ 0x24
 8006b1e:	af04      	add	r7, sp, #16
 8006b20:	6078      	str	r0, [r7, #4]
 8006b22:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	695b      	ldr	r3, [r3, #20]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d020      	beq.n	8006b6e <osThreadCreate+0x54>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d01c      	beq.n	8006b6e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685c      	ldr	r4, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	691e      	ldr	r6, [r3, #16]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b46:	4618      	mov	r0, r3
 8006b48:	f7ff ffc8 	bl	8006adc <makeFreeRtosPriority>
 8006b4c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b56:	9202      	str	r2, [sp, #8]
 8006b58:	9301      	str	r3, [sp, #4]
 8006b5a:	9100      	str	r1, [sp, #0]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	4632      	mov	r2, r6
 8006b60:	4629      	mov	r1, r5
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fc38 	bl	80073d8 <xTaskCreateStatic>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	e01c      	b.n	8006ba8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685c      	ldr	r4, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b7a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff ffaa 	bl	8006adc <makeFreeRtosPriority>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	f107 030c 	add.w	r3, r7, #12
 8006b8e:	9301      	str	r3, [sp, #4]
 8006b90:	9200      	str	r2, [sp, #0]
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	4632      	mov	r2, r6
 8006b96:	4629      	mov	r1, r5
 8006b98:	4620      	mov	r0, r4
 8006b9a:	f000 fc7d 	bl	8007498 <xTaskCreate>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d001      	beq.n	8006ba8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	e000      	b.n	8006baa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006bb2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b084      	sub	sp, #16
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <osDelay+0x16>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	e000      	b.n	8006bca <osDelay+0x18>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 fd9c 	bl	8007708 <vTaskDelay>
  
  return osOK;
 8006bd0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3710      	adds	r7, #16
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b086      	sub	sp, #24
 8006bde:	af02      	add	r7, sp, #8
 8006be0:	6078      	str	r0, [r7, #4]
 8006be2:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00f      	beq.n	8006c0c <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d10a      	bne.n	8006c08 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2203      	movs	r2, #3
 8006bf8:	9200      	str	r2, [sp, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	2100      	movs	r1, #0
 8006bfe:	2001      	movs	r0, #1
 8006c00:	f000 f93c 	bl	8006e7c <xQueueGenericCreateStatic>
 8006c04:	4603      	mov	r3, r0
 8006c06:	e016      	b.n	8006c36 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	e014      	b.n	8006c36 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d110      	bne.n	8006c34 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006c12:	2203      	movs	r2, #3
 8006c14:	2100      	movs	r1, #0
 8006c16:	2001      	movs	r0, #1
 8006c18:	f000 f9ad 	bl	8006f76 <xQueueGenericCreate>
 8006c1c:	60f8      	str	r0, [r7, #12]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d005      	beq.n	8006c30 <osSemaphoreCreate+0x56>
 8006c24:	2300      	movs	r3, #0
 8006c26:	2200      	movs	r2, #0
 8006c28:	2100      	movs	r1, #0
 8006c2a:	68f8      	ldr	r0, [r7, #12]
 8006c2c:	f000 f9fe 	bl	800702c <xQueueGenericSend>
      return sema;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	e000      	b.n	8006c36 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006c34:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3710      	adds	r7, #16
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f103 0208 	add.w	r2, r3, #8
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f04f 32ff 	mov.w	r2, #4294967295
 8006c56:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f103 0208 	add.w	r2, r3, #8
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f103 0208 	add.w	r2, r3, #8
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006c7e:	b480      	push	{r7}
 8006c80:	b083      	sub	sp, #12
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689a      	ldr	r2, [r3, #8]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	601a      	str	r2, [r3, #0]
}
 8006cd4:	bf00      	nop
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf6:	d103      	bne.n	8006d00 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	e00c      	b.n	8006d1a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3308      	adds	r3, #8
 8006d04:	60fb      	str	r3, [r7, #12]
 8006d06:	e002      	b.n	8006d0e <vListInsert+0x2e>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d2f6      	bcs.n	8006d08 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	685a      	ldr	r2, [r3, #4]
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	683a      	ldr	r2, [r7, #0]
 8006d28:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	1c5a      	adds	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	601a      	str	r2, [r3, #0]
}
 8006d46:	bf00      	nop
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr

08006d52 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006d52:	b480      	push	{r7}
 8006d54:	b085      	sub	sp, #20
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6892      	ldr	r2, [r2, #8]
 8006d68:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	6852      	ldr	r2, [r2, #4]
 8006d72:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d103      	bne.n	8006d86 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	1e5a      	subs	r2, r3, #1
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
	...

08006da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006dd4:	f001 fb18 	bl	8008408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006de0:	68f9      	ldr	r1, [r7, #12]
 8006de2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006de4:	fb01 f303 	mul.w	r3, r1, r3
 8006de8:	441a      	add	r2, r3
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2200      	movs	r2, #0
 8006df2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e04:	3b01      	subs	r3, #1
 8006e06:	68f9      	ldr	r1, [r7, #12]
 8006e08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e0a:	fb01 f303 	mul.w	r3, r1, r3
 8006e0e:	441a      	add	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	22ff      	movs	r2, #255	@ 0xff
 8006e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	22ff      	movs	r2, #255	@ 0xff
 8006e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d114      	bne.n	8006e54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d01a      	beq.n	8006e68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3310      	adds	r3, #16
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fee6 	bl	8007c08 <xTaskRemoveFromEventList>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d012      	beq.n	8006e68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <xQueueGenericReset+0xd0>)
 8006e44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e48:	601a      	str	r2, [r3, #0]
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	f3bf 8f6f 	isb	sy
 8006e52:	e009      	b.n	8006e68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	3310      	adds	r3, #16
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7ff fef0 	bl	8006c3e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	3324      	adds	r3, #36	@ 0x24
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7ff feeb 	bl	8006c3e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006e68:	f001 fb00 	bl	800846c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006e6c:	2301      	movs	r3, #1
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	e000ed04 	.word	0xe000ed04

08006e7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08e      	sub	sp, #56	@ 0x38
 8006e80:	af02      	add	r7, sp, #8
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d10b      	bne.n	8006ea8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ea2:	bf00      	nop
 8006ea4:	bf00      	nop
 8006ea6:	e7fd      	b.n	8006ea4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10b      	bne.n	8006ec6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ec0:	bf00      	nop
 8006ec2:	bf00      	nop
 8006ec4:	e7fd      	b.n	8006ec2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <xQueueGenericCreateStatic+0x56>
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <xQueueGenericCreateStatic+0x5a>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e000      	b.n	8006ed8 <xQueueGenericCreateStatic+0x5c>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	623b      	str	r3, [r7, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d102      	bne.n	8006f00 <xQueueGenericCreateStatic+0x84>
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <xQueueGenericCreateStatic+0x88>
 8006f00:	2301      	movs	r3, #1
 8006f02:	e000      	b.n	8006f06 <xQueueGenericCreateStatic+0x8a>
 8006f04:	2300      	movs	r3, #0
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	61fb      	str	r3, [r7, #28]
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f22:	2348      	movs	r3, #72	@ 0x48
 8006f24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b48      	cmp	r3, #72	@ 0x48
 8006f2a:	d00b      	beq.n	8006f44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f30:	f383 8811 	msr	BASEPRI, r3
 8006f34:	f3bf 8f6f 	isb	sy
 8006f38:	f3bf 8f4f 	dsb	sy
 8006f3c:	61bb      	str	r3, [r7, #24]
}
 8006f3e:	bf00      	nop
 8006f40:	bf00      	nop
 8006f42:	e7fd      	b.n	8006f40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006f44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00d      	beq.n	8006f6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006f50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006f58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5e:	9300      	str	r3, [sp, #0]
 8006f60:	4613      	mov	r3, r2
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	68b9      	ldr	r1, [r7, #8]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f000 f840 	bl	8006fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3730      	adds	r7, #48	@ 0x30
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b08a      	sub	sp, #40	@ 0x28
 8006f7a:	af02      	add	r7, sp, #8
 8006f7c:	60f8      	str	r0, [r7, #12]
 8006f7e:	60b9      	str	r1, [r7, #8]
 8006f80:	4613      	mov	r3, r2
 8006f82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10b      	bne.n	8006fa2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	613b      	str	r3, [r7, #16]
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	e7fd      	b.n	8006f9e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	fb02 f303 	mul.w	r3, r2, r3
 8006faa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	3348      	adds	r3, #72	@ 0x48
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f001 fb09 	bl	80085c8 <pvPortMalloc>
 8006fb6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d011      	beq.n	8006fe2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	3348      	adds	r3, #72	@ 0x48
 8006fc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fd0:	79fa      	ldrb	r2, [r7, #7]
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	697a      	ldr	r2, [r7, #20]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 f805 	bl	8006fec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
	}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3720      	adds	r7, #32
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	60f8      	str	r0, [r7, #12]
 8006ff4:	60b9      	str	r1, [r7, #8]
 8006ff6:	607a      	str	r2, [r7, #4]
 8006ff8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d103      	bne.n	8007008 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	601a      	str	r2, [r3, #0]
 8007006:	e002      	b.n	800700e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800701a:	2101      	movs	r1, #1
 800701c:	69b8      	ldr	r0, [r7, #24]
 800701e:	f7ff fec3 	bl	8006da8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007022:	bf00      	nop
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
	...

0800702c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b08e      	sub	sp, #56	@ 0x38
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800703a:	2300      	movs	r3, #0
 800703c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10b      	bne.n	8007060 <xQueueGenericSend+0x34>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800705a:	bf00      	nop
 800705c:	bf00      	nop
 800705e:	e7fd      	b.n	800705c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d103      	bne.n	800706e <xQueueGenericSend+0x42>
 8007066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <xQueueGenericSend+0x46>
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <xQueueGenericSend+0x48>
 8007072:	2300      	movs	r3, #0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <xQueueGenericSend+0x64>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	e7fd      	b.n	800708c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d103      	bne.n	800709e <xQueueGenericSend+0x72>
 8007096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <xQueueGenericSend+0x76>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <xQueueGenericSend+0x78>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10b      	bne.n	80070c0 <xQueueGenericSend+0x94>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	623b      	str	r3, [r7, #32]
}
 80070ba:	bf00      	nop
 80070bc:	bf00      	nop
 80070be:	e7fd      	b.n	80070bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070c0:	f000 ff62 	bl	8007f88 <xTaskGetSchedulerState>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <xQueueGenericSend+0xa4>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d101      	bne.n	80070d4 <xQueueGenericSend+0xa8>
 80070d0:	2301      	movs	r3, #1
 80070d2:	e000      	b.n	80070d6 <xQueueGenericSend+0xaa>
 80070d4:	2300      	movs	r3, #0
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10b      	bne.n	80070f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	61fb      	str	r3, [r7, #28]
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	e7fd      	b.n	80070ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070f2:	f001 f989 	bl	8008408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d302      	bcc.n	8007108 <xQueueGenericSend+0xdc>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d129      	bne.n	800715c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007108:	683a      	ldr	r2, [r7, #0]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800710e:	f000 f88f 	bl	8007230 <prvCopyDataToQueue>
 8007112:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d010      	beq.n	800713e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800711e:	3324      	adds	r3, #36	@ 0x24
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fd71 	bl	8007c08 <xTaskRemoveFromEventList>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d013      	beq.n	8007154 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800712c:	4b3f      	ldr	r3, [pc, #252]	@ (800722c <xQueueGenericSend+0x200>)
 800712e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	f3bf 8f4f 	dsb	sy
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	e00a      	b.n	8007154 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800713e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007144:	4b39      	ldr	r3, [pc, #228]	@ (800722c <xQueueGenericSend+0x200>)
 8007146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007154:	f001 f98a 	bl	800846c <vPortExitCritical>
				return pdPASS;
 8007158:	2301      	movs	r3, #1
 800715a:	e063      	b.n	8007224 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007162:	f001 f983 	bl	800846c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007166:	2300      	movs	r3, #0
 8007168:	e05c      	b.n	8007224 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800716a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007170:	f107 0314 	add.w	r3, r7, #20
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fdab 	bl	8007cd0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800717a:	2301      	movs	r3, #1
 800717c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800717e:	f001 f975 	bl	800846c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007182:	f000 fb59 	bl	8007838 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007186:	f001 f93f 	bl	8008408 <vPortEnterCritical>
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007190:	b25b      	sxtb	r3, r3
 8007192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007196:	d103      	bne.n	80071a0 <xQueueGenericSend+0x174>
 8007198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80071a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80071a6:	b25b      	sxtb	r3, r3
 80071a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ac:	d103      	bne.n	80071b6 <xQueueGenericSend+0x18a>
 80071ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80071b6:	f001 f959 	bl	800846c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071ba:	1d3a      	adds	r2, r7, #4
 80071bc:	f107 0314 	add.w	r3, r7, #20
 80071c0:	4611      	mov	r1, r2
 80071c2:	4618      	mov	r0, r3
 80071c4:	f000 fd9a 	bl	8007cfc <xTaskCheckForTimeOut>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d124      	bne.n	8007218 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071d0:	f000 f8ea 	bl	80073a8 <prvIsQueueFull>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d018      	beq.n	800720c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	3310      	adds	r3, #16
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	4611      	mov	r1, r2
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 fcea 	bl	8007bbc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071ea:	f000 f88b 	bl	8007304 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071ee:	f000 fb31 	bl	8007854 <xTaskResumeAll>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f47f af7c 	bne.w	80070f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80071fa:	4b0c      	ldr	r3, [pc, #48]	@ (800722c <xQueueGenericSend+0x200>)
 80071fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007200:	601a      	str	r2, [r3, #0]
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	e772      	b.n	80070f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800720c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800720e:	f000 f879 	bl	8007304 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007212:	f000 fb1f 	bl	8007854 <xTaskResumeAll>
 8007216:	e76c      	b.n	80070f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800721a:	f000 f873 	bl	8007304 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800721e:	f000 fb19 	bl	8007854 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007222:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007224:	4618      	mov	r0, r3
 8007226:	3738      	adds	r7, #56	@ 0x38
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	e000ed04 	.word	0xe000ed04

08007230 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800723c:	2300      	movs	r3, #0
 800723e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007244:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10d      	bne.n	800726a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d14d      	bne.n	80072f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 feb2 	bl	8007fc4 <xTaskPriorityDisinherit>
 8007260:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	609a      	str	r2, [r3, #8]
 8007268:	e043      	b.n	80072f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d119      	bne.n	80072a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6858      	ldr	r0, [r3, #4]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007278:	461a      	mov	r2, r3
 800727a:	68b9      	ldr	r1, [r7, #8]
 800727c:	f001 fe1f 	bl	8008ebe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685a      	ldr	r2, [r3, #4]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007288:	441a      	add	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685a      	ldr	r2, [r3, #4]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	429a      	cmp	r2, r3
 8007298:	d32b      	bcc.n	80072f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	605a      	str	r2, [r3, #4]
 80072a2:	e026      	b.n	80072f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	68d8      	ldr	r0, [r3, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072ac:	461a      	mov	r2, r3
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	f001 fe05 	bl	8008ebe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072bc:	425b      	negs	r3, r3
 80072be:	441a      	add	r2, r3
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d207      	bcs.n	80072e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689a      	ldr	r2, [r3, #8]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	425b      	negs	r3, r3
 80072da:	441a      	add	r2, r3
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d105      	bne.n	80072f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	3b01      	subs	r3, #1
 80072f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80072fa:	697b      	ldr	r3, [r7, #20]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800730c:	f001 f87c 	bl	8008408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007316:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007318:	e011      	b.n	800733e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800731e:	2b00      	cmp	r3, #0
 8007320:	d012      	beq.n	8007348 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	3324      	adds	r3, #36	@ 0x24
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fc6e 	bl	8007c08 <xTaskRemoveFromEventList>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007332:	f000 fd47 	bl	8007dc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007336:	7bfb      	ldrb	r3, [r7, #15]
 8007338:	3b01      	subs	r3, #1
 800733a:	b2db      	uxtb	r3, r3
 800733c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800733e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007342:	2b00      	cmp	r3, #0
 8007344:	dce9      	bgt.n	800731a <prvUnlockQueue+0x16>
 8007346:	e000      	b.n	800734a <prvUnlockQueue+0x46>
					break;
 8007348:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	22ff      	movs	r2, #255	@ 0xff
 800734e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007352:	f001 f88b 	bl	800846c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007356:	f001 f857 	bl	8008408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007360:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007362:	e011      	b.n	8007388 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d012      	beq.n	8007392 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3310      	adds	r3, #16
 8007370:	4618      	mov	r0, r3
 8007372:	f000 fc49 	bl	8007c08 <xTaskRemoveFromEventList>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d001      	beq.n	8007380 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800737c:	f000 fd22 	bl	8007dc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	3b01      	subs	r3, #1
 8007384:	b2db      	uxtb	r3, r3
 8007386:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007388:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800738c:	2b00      	cmp	r3, #0
 800738e:	dce9      	bgt.n	8007364 <prvUnlockQueue+0x60>
 8007390:	e000      	b.n	8007394 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007392:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	22ff      	movs	r2, #255	@ 0xff
 8007398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800739c:	f001 f866 	bl	800846c <vPortExitCritical>
}
 80073a0:	bf00      	nop
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073b0:	f001 f82a 	bl	8008408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073bc:	429a      	cmp	r2, r3
 80073be:	d102      	bne.n	80073c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073c0:	2301      	movs	r3, #1
 80073c2:	60fb      	str	r3, [r7, #12]
 80073c4:	e001      	b.n	80073ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073ca:	f001 f84f 	bl	800846c <vPortExitCritical>

	return xReturn;
 80073ce:	68fb      	ldr	r3, [r7, #12]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b08e      	sub	sp, #56	@ 0x38
 80073dc:	af04      	add	r7, sp, #16
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
 80073e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80073e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d10b      	bne.n	8007404 <xTaskCreateStatic+0x2c>
	__asm volatile
 80073ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f0:	f383 8811 	msr	BASEPRI, r3
 80073f4:	f3bf 8f6f 	isb	sy
 80073f8:	f3bf 8f4f 	dsb	sy
 80073fc:	623b      	str	r3, [r7, #32]
}
 80073fe:	bf00      	nop
 8007400:	bf00      	nop
 8007402:	e7fd      	b.n	8007400 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10b      	bne.n	8007422 <xTaskCreateStatic+0x4a>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740e:	f383 8811 	msr	BASEPRI, r3
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	61fb      	str	r3, [r7, #28]
}
 800741c:	bf00      	nop
 800741e:	bf00      	nop
 8007420:	e7fd      	b.n	800741e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007422:	2354      	movs	r3, #84	@ 0x54
 8007424:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	2b54      	cmp	r3, #84	@ 0x54
 800742a:	d00b      	beq.n	8007444 <xTaskCreateStatic+0x6c>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	61bb      	str	r3, [r7, #24]
}
 800743e:	bf00      	nop
 8007440:	bf00      	nop
 8007442:	e7fd      	b.n	8007440 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007444:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01e      	beq.n	800748a <xTaskCreateStatic+0xb2>
 800744c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01b      	beq.n	800748a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007454:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007458:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800745a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800745c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007464:	2300      	movs	r3, #0
 8007466:	9303      	str	r3, [sp, #12]
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	9302      	str	r3, [sp, #8]
 800746c:	f107 0314 	add.w	r3, r7, #20
 8007470:	9301      	str	r3, [sp, #4]
 8007472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007474:	9300      	str	r3, [sp, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	68b9      	ldr	r1, [r7, #8]
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 f850 	bl	8007522 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007482:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007484:	f000 f8d6 	bl	8007634 <prvAddNewTaskToReadyList>
 8007488:	e001      	b.n	800748e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800748a:	2300      	movs	r3, #0
 800748c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800748e:	697b      	ldr	r3, [r7, #20]
	}
 8007490:	4618      	mov	r0, r3
 8007492:	3728      	adds	r7, #40	@ 0x28
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08c      	sub	sp, #48	@ 0x30
 800749c:	af04      	add	r7, sp, #16
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	603b      	str	r3, [r7, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 f88b 	bl	80085c8 <pvPortMalloc>
 80074b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00e      	beq.n	80074d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80074ba:	2054      	movs	r0, #84	@ 0x54
 80074bc:	f001 f884 	bl	80085c8 <pvPortMalloc>
 80074c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80074ce:	e005      	b.n	80074dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80074d0:	6978      	ldr	r0, [r7, #20]
 80074d2:	f001 f947 	bl	8008764 <vPortFree>
 80074d6:	e001      	b.n	80074dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80074d8:	2300      	movs	r3, #0
 80074da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d017      	beq.n	8007512 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	2200      	movs	r2, #0
 80074e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	2300      	movs	r3, #0
 80074ee:	9303      	str	r3, [sp, #12]
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	9302      	str	r3, [sp, #8]
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	9301      	str	r3, [sp, #4]
 80074f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074fa:	9300      	str	r3, [sp, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	f000 f80e 	bl	8007522 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007506:	69f8      	ldr	r0, [r7, #28]
 8007508:	f000 f894 	bl	8007634 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800750c:	2301      	movs	r3, #1
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	e002      	b.n	8007518 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007512:	f04f 33ff 	mov.w	r3, #4294967295
 8007516:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007518:	69bb      	ldr	r3, [r7, #24]
	}
 800751a:	4618      	mov	r0, r3
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}

08007522 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b088      	sub	sp, #32
 8007526:	af00      	add	r7, sp, #0
 8007528:	60f8      	str	r0, [r7, #12]
 800752a:	60b9      	str	r1, [r7, #8]
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007532:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800753a:	440b      	add	r3, r1
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	4413      	add	r3, r2
 8007540:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	f023 0307 	bic.w	r3, r3, #7
 8007548:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00b      	beq.n	800756c <prvInitialiseNewTask+0x4a>
	__asm volatile
 8007554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007558:	f383 8811 	msr	BASEPRI, r3
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f3bf 8f4f 	dsb	sy
 8007564:	617b      	str	r3, [r7, #20]
}
 8007566:	bf00      	nop
 8007568:	bf00      	nop
 800756a:	e7fd      	b.n	8007568 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d01f      	beq.n	80075b2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007572:	2300      	movs	r3, #0
 8007574:	61fb      	str	r3, [r7, #28]
 8007576:	e012      	b.n	800759e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	69fb      	ldr	r3, [r7, #28]
 800757c:	4413      	add	r3, r2
 800757e:	7819      	ldrb	r1, [r3, #0]
 8007580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	4413      	add	r3, r2
 8007586:	3334      	adds	r3, #52	@ 0x34
 8007588:	460a      	mov	r2, r1
 800758a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d006      	beq.n	80075a6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007598:	69fb      	ldr	r3, [r7, #28]
 800759a:	3301      	adds	r3, #1
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	2b0f      	cmp	r3, #15
 80075a2:	d9e9      	bls.n	8007578 <prvInitialiseNewTask+0x56>
 80075a4:	e000      	b.n	80075a8 <prvInitialiseNewTask+0x86>
			{
				break;
 80075a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	2200      	movs	r2, #0
 80075ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80075b0:	e003      	b.n	80075ba <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80075b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075b4:	2200      	movs	r2, #0
 80075b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80075ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075bc:	2b06      	cmp	r3, #6
 80075be:	d901      	bls.n	80075c4 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80075c0:	2306      	movs	r3, #6
 80075c2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80075ce:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80075d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d2:	2200      	movs	r2, #0
 80075d4:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	3304      	adds	r3, #4
 80075da:	4618      	mov	r0, r3
 80075dc:	f7ff fb4f 	bl	8006c7e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80075e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e2:	3318      	adds	r3, #24
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff fb4a 	bl	8006c7e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f2:	f1c3 0207 	rsb	r2, r3, #7
 80075f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075fe:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007602:	2200      	movs	r2, #0
 8007604:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	68f9      	ldr	r1, [r7, #12]
 8007612:	69b8      	ldr	r0, [r7, #24]
 8007614:	f000 fdc4 	bl	80081a0 <pxPortInitialiseStack>
 8007618:	4602      	mov	r2, r0
 800761a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800761c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800761e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007626:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007628:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800762a:	bf00      	nop
 800762c:	3720      	adds	r7, #32
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
	...

08007634 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800763c:	f000 fee4 	bl	8008408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007640:	4b2a      	ldr	r3, [pc, #168]	@ (80076ec <prvAddNewTaskToReadyList+0xb8>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	4a29      	ldr	r2, [pc, #164]	@ (80076ec <prvAddNewTaskToReadyList+0xb8>)
 8007648:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800764a:	4b29      	ldr	r3, [pc, #164]	@ (80076f0 <prvAddNewTaskToReadyList+0xbc>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d109      	bne.n	8007666 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007652:	4a27      	ldr	r2, [pc, #156]	@ (80076f0 <prvAddNewTaskToReadyList+0xbc>)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007658:	4b24      	ldr	r3, [pc, #144]	@ (80076ec <prvAddNewTaskToReadyList+0xb8>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b01      	cmp	r3, #1
 800765e:	d110      	bne.n	8007682 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007660:	f000 fbd4 	bl	8007e0c <prvInitialiseTaskLists>
 8007664:	e00d      	b.n	8007682 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007666:	4b23      	ldr	r3, [pc, #140]	@ (80076f4 <prvAddNewTaskToReadyList+0xc0>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800766e:	4b20      	ldr	r3, [pc, #128]	@ (80076f0 <prvAddNewTaskToReadyList+0xbc>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007678:	429a      	cmp	r2, r3
 800767a:	d802      	bhi.n	8007682 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800767c:	4a1c      	ldr	r2, [pc, #112]	@ (80076f0 <prvAddNewTaskToReadyList+0xbc>)
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007682:	4b1d      	ldr	r3, [pc, #116]	@ (80076f8 <prvAddNewTaskToReadyList+0xc4>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	3301      	adds	r3, #1
 8007688:	4a1b      	ldr	r2, [pc, #108]	@ (80076f8 <prvAddNewTaskToReadyList+0xc4>)
 800768a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007690:	2201      	movs	r2, #1
 8007692:	409a      	lsls	r2, r3
 8007694:	4b19      	ldr	r3, [pc, #100]	@ (80076fc <prvAddNewTaskToReadyList+0xc8>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4313      	orrs	r3, r2
 800769a:	4a18      	ldr	r2, [pc, #96]	@ (80076fc <prvAddNewTaskToReadyList+0xc8>)
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a2:	4613      	mov	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4a15      	ldr	r2, [pc, #84]	@ (8007700 <prvAddNewTaskToReadyList+0xcc>)
 80076ac:	441a      	add	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	3304      	adds	r3, #4
 80076b2:	4619      	mov	r1, r3
 80076b4:	4610      	mov	r0, r2
 80076b6:	f7ff faef 	bl	8006c98 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80076ba:	f000 fed7 	bl	800846c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80076be:	4b0d      	ldr	r3, [pc, #52]	@ (80076f4 <prvAddNewTaskToReadyList+0xc0>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00e      	beq.n	80076e4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80076c6:	4b0a      	ldr	r3, [pc, #40]	@ (80076f0 <prvAddNewTaskToReadyList+0xbc>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d207      	bcs.n	80076e4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80076d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007704 <prvAddNewTaskToReadyList+0xd0>)
 80076d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076da:	601a      	str	r2, [r3, #0]
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076e4:	bf00      	nop
 80076e6:	3708      	adds	r7, #8
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	24000584 	.word	0x24000584
 80076f0:	24000484 	.word	0x24000484
 80076f4:	24000590 	.word	0x24000590
 80076f8:	240005a0 	.word	0x240005a0
 80076fc:	2400058c 	.word	0x2400058c
 8007700:	24000488 	.word	0x24000488
 8007704:	e000ed04 	.word	0xe000ed04

08007708 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007710:	2300      	movs	r3, #0
 8007712:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d018      	beq.n	800774c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800771a:	4b14      	ldr	r3, [pc, #80]	@ (800776c <vTaskDelay+0x64>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00b      	beq.n	800773a <vTaskDelay+0x32>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	60bb      	str	r3, [r7, #8]
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	e7fd      	b.n	8007736 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800773a:	f000 f87d 	bl	8007838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800773e:	2100      	movs	r1, #0
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fcc7 	bl	80080d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007746:	f000 f885 	bl	8007854 <xTaskResumeAll>
 800774a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d107      	bne.n	8007762 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007752:	4b07      	ldr	r3, [pc, #28]	@ (8007770 <vTaskDelay+0x68>)
 8007754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007762:	bf00      	nop
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	240005ac 	.word	0x240005ac
 8007770:	e000ed04 	.word	0xe000ed04

08007774 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08a      	sub	sp, #40	@ 0x28
 8007778:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800777a:	2300      	movs	r3, #0
 800777c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007782:	463a      	mov	r2, r7
 8007784:	1d39      	adds	r1, r7, #4
 8007786:	f107 0308 	add.w	r3, r7, #8
 800778a:	4618      	mov	r0, r3
 800778c:	f7f8 ff8e 	bl	80006ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007790:	6839      	ldr	r1, [r7, #0]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	9202      	str	r2, [sp, #8]
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	2300      	movs	r3, #0
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	460a      	mov	r2, r1
 80077a2:	491f      	ldr	r1, [pc, #124]	@ (8007820 <vTaskStartScheduler+0xac>)
 80077a4:	481f      	ldr	r0, [pc, #124]	@ (8007824 <vTaskStartScheduler+0xb0>)
 80077a6:	f7ff fe17 	bl	80073d8 <xTaskCreateStatic>
 80077aa:	4603      	mov	r3, r0
 80077ac:	4a1e      	ldr	r2, [pc, #120]	@ (8007828 <vTaskStartScheduler+0xb4>)
 80077ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007828 <vTaskStartScheduler+0xb4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077b8:	2301      	movs	r3, #1
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e001      	b.n	80077c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077be:	2300      	movs	r3, #0
 80077c0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d116      	bne.n	80077f6 <vTaskStartScheduler+0x82>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	613b      	str	r3, [r7, #16]
}
 80077da:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077dc:	4b13      	ldr	r3, [pc, #76]	@ (800782c <vTaskStartScheduler+0xb8>)
 80077de:	f04f 32ff 	mov.w	r2, #4294967295
 80077e2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077e4:	4b12      	ldr	r3, [pc, #72]	@ (8007830 <vTaskStartScheduler+0xbc>)
 80077e6:	2201      	movs	r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077ea:	4b12      	ldr	r3, [pc, #72]	@ (8007834 <vTaskStartScheduler+0xc0>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077f0:	f000 fd66 	bl	80082c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077f4:	e00f      	b.n	8007816 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fc:	d10b      	bne.n	8007816 <vTaskStartScheduler+0xa2>
	__asm volatile
 80077fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007802:	f383 8811 	msr	BASEPRI, r3
 8007806:	f3bf 8f6f 	isb	sy
 800780a:	f3bf 8f4f 	dsb	sy
 800780e:	60fb      	str	r3, [r7, #12]
}
 8007810:	bf00      	nop
 8007812:	bf00      	nop
 8007814:	e7fd      	b.n	8007812 <vTaskStartScheduler+0x9e>
}
 8007816:	bf00      	nop
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	08009a14 	.word	0x08009a14
 8007824:	08007ddd 	.word	0x08007ddd
 8007828:	240005a8 	.word	0x240005a8
 800782c:	240005a4 	.word	0x240005a4
 8007830:	24000590 	.word	0x24000590
 8007834:	24000588 	.word	0x24000588

08007838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800783c:	4b04      	ldr	r3, [pc, #16]	@ (8007850 <vTaskSuspendAll+0x18>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3301      	adds	r3, #1
 8007842:	4a03      	ldr	r2, [pc, #12]	@ (8007850 <vTaskSuspendAll+0x18>)
 8007844:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007846:	bf00      	nop
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	240005ac 	.word	0x240005ac

08007854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800785e:	2300      	movs	r3, #0
 8007860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007862:	4b42      	ldr	r3, [pc, #264]	@ (800796c <xTaskResumeAll+0x118>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10b      	bne.n	8007882 <xTaskResumeAll+0x2e>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	603b      	str	r3, [r7, #0]
}
 800787c:	bf00      	nop
 800787e:	bf00      	nop
 8007880:	e7fd      	b.n	800787e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007882:	f000 fdc1 	bl	8008408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007886:	4b39      	ldr	r3, [pc, #228]	@ (800796c <xTaskResumeAll+0x118>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3b01      	subs	r3, #1
 800788c:	4a37      	ldr	r2, [pc, #220]	@ (800796c <xTaskResumeAll+0x118>)
 800788e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007890:	4b36      	ldr	r3, [pc, #216]	@ (800796c <xTaskResumeAll+0x118>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d161      	bne.n	800795c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007898:	4b35      	ldr	r3, [pc, #212]	@ (8007970 <xTaskResumeAll+0x11c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d05d      	beq.n	800795c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078a0:	e02e      	b.n	8007900 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a2:	4b34      	ldr	r3, [pc, #208]	@ (8007974 <xTaskResumeAll+0x120>)
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3318      	adds	r3, #24
 80078ae:	4618      	mov	r0, r3
 80078b0:	f7ff fa4f 	bl	8006d52 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4618      	mov	r0, r3
 80078ba:	f7ff fa4a 	bl	8006d52 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c2:	2201      	movs	r2, #1
 80078c4:	409a      	lsls	r2, r3
 80078c6:	4b2c      	ldr	r3, [pc, #176]	@ (8007978 <xTaskResumeAll+0x124>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	4a2a      	ldr	r2, [pc, #168]	@ (8007978 <xTaskResumeAll+0x124>)
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d4:	4613      	mov	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	009b      	lsls	r3, r3, #2
 80078dc:	4a27      	ldr	r2, [pc, #156]	@ (800797c <xTaskResumeAll+0x128>)
 80078de:	441a      	add	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	3304      	adds	r3, #4
 80078e4:	4619      	mov	r1, r3
 80078e6:	4610      	mov	r0, r2
 80078e8:	f7ff f9d6 	bl	8006c98 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078f0:	4b23      	ldr	r3, [pc, #140]	@ (8007980 <xTaskResumeAll+0x12c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d302      	bcc.n	8007900 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078fa:	4b22      	ldr	r3, [pc, #136]	@ (8007984 <xTaskResumeAll+0x130>)
 80078fc:	2201      	movs	r2, #1
 80078fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007900:	4b1c      	ldr	r3, [pc, #112]	@ (8007974 <xTaskResumeAll+0x120>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1cc      	bne.n	80078a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800790e:	f000 fb1b 	bl	8007f48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007912:	4b1d      	ldr	r3, [pc, #116]	@ (8007988 <xTaskResumeAll+0x134>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d010      	beq.n	8007940 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800791e:	f000 f837 	bl	8007990 <xTaskIncrementTick>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d002      	beq.n	800792e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007928:	4b16      	ldr	r3, [pc, #88]	@ (8007984 <xTaskResumeAll+0x130>)
 800792a:	2201      	movs	r2, #1
 800792c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	3b01      	subs	r3, #1
 8007932:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1f1      	bne.n	800791e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800793a:	4b13      	ldr	r3, [pc, #76]	@ (8007988 <xTaskResumeAll+0x134>)
 800793c:	2200      	movs	r2, #0
 800793e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007940:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <xTaskResumeAll+0x130>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d009      	beq.n	800795c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007948:	2301      	movs	r3, #1
 800794a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800794c:	4b0f      	ldr	r3, [pc, #60]	@ (800798c <xTaskResumeAll+0x138>)
 800794e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	f3bf 8f4f 	dsb	sy
 8007958:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800795c:	f000 fd86 	bl	800846c <vPortExitCritical>

	return xAlreadyYielded;
 8007960:	68bb      	ldr	r3, [r7, #8]
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	240005ac 	.word	0x240005ac
 8007970:	24000584 	.word	0x24000584
 8007974:	24000544 	.word	0x24000544
 8007978:	2400058c 	.word	0x2400058c
 800797c:	24000488 	.word	0x24000488
 8007980:	24000484 	.word	0x24000484
 8007984:	24000598 	.word	0x24000598
 8007988:	24000594 	.word	0x24000594
 800798c:	e000ed04 	.word	0xe000ed04

08007990 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800799a:	4b4f      	ldr	r3, [pc, #316]	@ (8007ad8 <xTaskIncrementTick+0x148>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	f040 808f 	bne.w	8007ac2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079a4:	4b4d      	ldr	r3, [pc, #308]	@ (8007adc <xTaskIncrementTick+0x14c>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	3301      	adds	r3, #1
 80079aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079ac:	4a4b      	ldr	r2, [pc, #300]	@ (8007adc <xTaskIncrementTick+0x14c>)
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d121      	bne.n	80079fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80079b8:	4b49      	ldr	r3, [pc, #292]	@ (8007ae0 <xTaskIncrementTick+0x150>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d00b      	beq.n	80079da <xTaskIncrementTick+0x4a>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	603b      	str	r3, [r7, #0]
}
 80079d4:	bf00      	nop
 80079d6:	bf00      	nop
 80079d8:	e7fd      	b.n	80079d6 <xTaskIncrementTick+0x46>
 80079da:	4b41      	ldr	r3, [pc, #260]	@ (8007ae0 <xTaskIncrementTick+0x150>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	60fb      	str	r3, [r7, #12]
 80079e0:	4b40      	ldr	r3, [pc, #256]	@ (8007ae4 <xTaskIncrementTick+0x154>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a3e      	ldr	r2, [pc, #248]	@ (8007ae0 <xTaskIncrementTick+0x150>)
 80079e6:	6013      	str	r3, [r2, #0]
 80079e8:	4a3e      	ldr	r2, [pc, #248]	@ (8007ae4 <xTaskIncrementTick+0x154>)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	4b3e      	ldr	r3, [pc, #248]	@ (8007ae8 <xTaskIncrementTick+0x158>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3301      	adds	r3, #1
 80079f4:	4a3c      	ldr	r2, [pc, #240]	@ (8007ae8 <xTaskIncrementTick+0x158>)
 80079f6:	6013      	str	r3, [r2, #0]
 80079f8:	f000 faa6 	bl	8007f48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079fc:	4b3b      	ldr	r3, [pc, #236]	@ (8007aec <xTaskIncrementTick+0x15c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d348      	bcc.n	8007a98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a06:	4b36      	ldr	r3, [pc, #216]	@ (8007ae0 <xTaskIncrementTick+0x150>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d104      	bne.n	8007a1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a10:	4b36      	ldr	r3, [pc, #216]	@ (8007aec <xTaskIncrementTick+0x15c>)
 8007a12:	f04f 32ff 	mov.w	r2, #4294967295
 8007a16:	601a      	str	r2, [r3, #0]
					break;
 8007a18:	e03e      	b.n	8007a98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a1a:	4b31      	ldr	r3, [pc, #196]	@ (8007ae0 <xTaskIncrementTick+0x150>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68db      	ldr	r3, [r3, #12]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	429a      	cmp	r2, r3
 8007a30:	d203      	bcs.n	8007a3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a32:	4a2e      	ldr	r2, [pc, #184]	@ (8007aec <xTaskIncrementTick+0x15c>)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a38:	e02e      	b.n	8007a98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff f987 	bl	8006d52 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3318      	adds	r3, #24
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff f97e 	bl	8006d52 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	409a      	lsls	r2, r3
 8007a5e:	4b24      	ldr	r3, [pc, #144]	@ (8007af0 <xTaskIncrementTick+0x160>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	4a22      	ldr	r2, [pc, #136]	@ (8007af0 <xTaskIncrementTick+0x160>)
 8007a66:	6013      	str	r3, [r2, #0]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	009b      	lsls	r3, r3, #2
 8007a70:	4413      	add	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4a1f      	ldr	r2, [pc, #124]	@ (8007af4 <xTaskIncrementTick+0x164>)
 8007a76:	441a      	add	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4619      	mov	r1, r3
 8007a7e:	4610      	mov	r0, r2
 8007a80:	f7ff f90a 	bl	8006c98 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a88:	4b1b      	ldr	r3, [pc, #108]	@ (8007af8 <xTaskIncrementTick+0x168>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d3b9      	bcc.n	8007a06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007a92:	2301      	movs	r3, #1
 8007a94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a96:	e7b6      	b.n	8007a06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a98:	4b17      	ldr	r3, [pc, #92]	@ (8007af8 <xTaskIncrementTick+0x168>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a9e:	4915      	ldr	r1, [pc, #84]	@ (8007af4 <xTaskIncrementTick+0x164>)
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	440b      	add	r3, r1
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d901      	bls.n	8007ab4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ab4:	4b11      	ldr	r3, [pc, #68]	@ (8007afc <xTaskIncrementTick+0x16c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007abc:	2301      	movs	r3, #1
 8007abe:	617b      	str	r3, [r7, #20]
 8007ac0:	e004      	b.n	8007acc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8007b00 <xTaskIncrementTick+0x170>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8007b00 <xTaskIncrementTick+0x170>)
 8007aca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007acc:	697b      	ldr	r3, [r7, #20]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3718      	adds	r7, #24
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	240005ac 	.word	0x240005ac
 8007adc:	24000588 	.word	0x24000588
 8007ae0:	2400053c 	.word	0x2400053c
 8007ae4:	24000540 	.word	0x24000540
 8007ae8:	2400059c 	.word	0x2400059c
 8007aec:	240005a4 	.word	0x240005a4
 8007af0:	2400058c 	.word	0x2400058c
 8007af4:	24000488 	.word	0x24000488
 8007af8:	24000484 	.word	0x24000484
 8007afc:	24000598 	.word	0x24000598
 8007b00:	24000594 	.word	0x24000594

08007b04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b04:	b480      	push	{r7}
 8007b06:	b087      	sub	sp, #28
 8007b08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b0a:	4b27      	ldr	r3, [pc, #156]	@ (8007ba8 <vTaskSwitchContext+0xa4>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b12:	4b26      	ldr	r3, [pc, #152]	@ (8007bac <vTaskSwitchContext+0xa8>)
 8007b14:	2201      	movs	r2, #1
 8007b16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b18:	e040      	b.n	8007b9c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007b1a:	4b24      	ldr	r3, [pc, #144]	@ (8007bac <vTaskSwitchContext+0xa8>)
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b20:	4b23      	ldr	r3, [pc, #140]	@ (8007bb0 <vTaskSwitchContext+0xac>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	fab3 f383 	clz	r3, r3
 8007b2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	f1c3 031f 	rsb	r3, r3, #31
 8007b34:	617b      	str	r3, [r7, #20]
 8007b36:	491f      	ldr	r1, [pc, #124]	@ (8007bb4 <vTaskSwitchContext+0xb0>)
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	4413      	add	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10b      	bne.n	8007b62 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b4e:	f383 8811 	msr	BASEPRI, r3
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	f3bf 8f4f 	dsb	sy
 8007b5a:	607b      	str	r3, [r7, #4]
}
 8007b5c:	bf00      	nop
 8007b5e:	bf00      	nop
 8007b60:	e7fd      	b.n	8007b5e <vTaskSwitchContext+0x5a>
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	4a11      	ldr	r2, [pc, #68]	@ (8007bb4 <vTaskSwitchContext+0xb0>)
 8007b6e:	4413      	add	r3, r2
 8007b70:	613b      	str	r3, [r7, #16]
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	685a      	ldr	r2, [r3, #4]
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	605a      	str	r2, [r3, #4]
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	3308      	adds	r3, #8
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d104      	bne.n	8007b92 <vTaskSwitchContext+0x8e>
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	605a      	str	r2, [r3, #4]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	4a07      	ldr	r2, [pc, #28]	@ (8007bb8 <vTaskSwitchContext+0xb4>)
 8007b9a:	6013      	str	r3, [r2, #0]
}
 8007b9c:	bf00      	nop
 8007b9e:	371c      	adds	r7, #28
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	240005ac 	.word	0x240005ac
 8007bac:	24000598 	.word	0x24000598
 8007bb0:	2400058c 	.word	0x2400058c
 8007bb4:	24000488 	.word	0x24000488
 8007bb8:	24000484 	.word	0x24000484

08007bbc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d10b      	bne.n	8007be4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60fb      	str	r3, [r7, #12]
}
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007be4:	4b07      	ldr	r3, [pc, #28]	@ (8007c04 <vTaskPlaceOnEventList+0x48>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3318      	adds	r3, #24
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff f877 	bl	8006ce0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bf2:	2101      	movs	r1, #1
 8007bf4:	6838      	ldr	r0, [r7, #0]
 8007bf6:	f000 fa6d 	bl	80080d4 <prvAddCurrentTaskToDelayedList>
}
 8007bfa:	bf00      	nop
 8007bfc:	3710      	adds	r7, #16
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	24000484 	.word	0x24000484

08007c08 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d10b      	bne.n	8007c36 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	60fb      	str	r3, [r7, #12]
}
 8007c30:	bf00      	nop
 8007c32:	bf00      	nop
 8007c34:	e7fd      	b.n	8007c32 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	3318      	adds	r3, #24
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7ff f889 	bl	8006d52 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c40:	4b1d      	ldr	r3, [pc, #116]	@ (8007cb8 <xTaskRemoveFromEventList+0xb0>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d11c      	bne.n	8007c82 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff f880 	bl	8006d52 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c56:	2201      	movs	r2, #1
 8007c58:	409a      	lsls	r2, r3
 8007c5a:	4b18      	ldr	r3, [pc, #96]	@ (8007cbc <xTaskRemoveFromEventList+0xb4>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	4a16      	ldr	r2, [pc, #88]	@ (8007cbc <xTaskRemoveFromEventList+0xb4>)
 8007c62:	6013      	str	r3, [r2, #0]
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4a13      	ldr	r2, [pc, #76]	@ (8007cc0 <xTaskRemoveFromEventList+0xb8>)
 8007c72:	441a      	add	r2, r3
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	3304      	adds	r3, #4
 8007c78:	4619      	mov	r1, r3
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	f7ff f80c 	bl	8006c98 <vListInsertEnd>
 8007c80:	e005      	b.n	8007c8e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	3318      	adds	r3, #24
 8007c86:	4619      	mov	r1, r3
 8007c88:	480e      	ldr	r0, [pc, #56]	@ (8007cc4 <xTaskRemoveFromEventList+0xbc>)
 8007c8a:	f7ff f805 	bl	8006c98 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c92:	4b0d      	ldr	r3, [pc, #52]	@ (8007cc8 <xTaskRemoveFromEventList+0xc0>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d905      	bls.n	8007ca8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <xTaskRemoveFromEventList+0xc4>)
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]
 8007ca6:	e001      	b.n	8007cac <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007cac:	697b      	ldr	r3, [r7, #20]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	240005ac 	.word	0x240005ac
 8007cbc:	2400058c 	.word	0x2400058c
 8007cc0:	24000488 	.word	0x24000488
 8007cc4:	24000544 	.word	0x24000544
 8007cc8:	24000484 	.word	0x24000484
 8007ccc:	24000598 	.word	0x24000598

08007cd0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007cd8:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <vTaskInternalSetTimeOutState+0x24>)
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007ce0:	4b05      	ldr	r3, [pc, #20]	@ (8007cf8 <vTaskInternalSetTimeOutState+0x28>)
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	605a      	str	r2, [r3, #4]
}
 8007ce8:	bf00      	nop
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr
 8007cf4:	2400059c 	.word	0x2400059c
 8007cf8:	24000588 	.word	0x24000588

08007cfc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d10b      	bne.n	8007d24 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d10:	f383 8811 	msr	BASEPRI, r3
 8007d14:	f3bf 8f6f 	isb	sy
 8007d18:	f3bf 8f4f 	dsb	sy
 8007d1c:	613b      	str	r3, [r7, #16]
}
 8007d1e:	bf00      	nop
 8007d20:	bf00      	nop
 8007d22:	e7fd      	b.n	8007d20 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	60fb      	str	r3, [r7, #12]
}
 8007d3c:	bf00      	nop
 8007d3e:	bf00      	nop
 8007d40:	e7fd      	b.n	8007d3e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007d42:	f000 fb61 	bl	8008408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007d46:	4b1d      	ldr	r3, [pc, #116]	@ (8007dbc <xTaskCheckForTimeOut+0xc0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	69ba      	ldr	r2, [r7, #24]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d5e:	d102      	bne.n	8007d66 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	61fb      	str	r3, [r7, #28]
 8007d64:	e023      	b.n	8007dae <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681a      	ldr	r2, [r3, #0]
 8007d6a:	4b15      	ldr	r3, [pc, #84]	@ (8007dc0 <xTaskCheckForTimeOut+0xc4>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d007      	beq.n	8007d82 <xTaskCheckForTimeOut+0x86>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d302      	bcc.n	8007d82 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	61fb      	str	r3, [r7, #28]
 8007d80:	e015      	b.n	8007dae <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	697a      	ldr	r2, [r7, #20]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d20b      	bcs.n	8007da4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681a      	ldr	r2, [r3, #0]
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	1ad2      	subs	r2, r2, r3
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff ff99 	bl	8007cd0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	61fb      	str	r3, [r7, #28]
 8007da2:	e004      	b.n	8007dae <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	2200      	movs	r2, #0
 8007da8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007daa:	2301      	movs	r3, #1
 8007dac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007dae:	f000 fb5d 	bl	800846c <vPortExitCritical>

	return xReturn;
 8007db2:	69fb      	ldr	r3, [r7, #28]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3720      	adds	r7, #32
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	24000588 	.word	0x24000588
 8007dc0:	2400059c 	.word	0x2400059c

08007dc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007dc8:	4b03      	ldr	r3, [pc, #12]	@ (8007dd8 <vTaskMissedYield+0x14>)
 8007dca:	2201      	movs	r2, #1
 8007dcc:	601a      	str	r2, [r3, #0]
}
 8007dce:	bf00      	nop
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr
 8007dd8:	24000598 	.word	0x24000598

08007ddc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007de4:	f000 f852 	bl	8007e8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007de8:	4b06      	ldr	r3, [pc, #24]	@ (8007e04 <prvIdleTask+0x28>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d9f9      	bls.n	8007de4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007df0:	4b05      	ldr	r3, [pc, #20]	@ (8007e08 <prvIdleTask+0x2c>)
 8007df2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	f3bf 8f4f 	dsb	sy
 8007dfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007e00:	e7f0      	b.n	8007de4 <prvIdleTask+0x8>
 8007e02:	bf00      	nop
 8007e04:	24000488 	.word	0x24000488
 8007e08:	e000ed04 	.word	0xe000ed04

08007e0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e12:	2300      	movs	r3, #0
 8007e14:	607b      	str	r3, [r7, #4]
 8007e16:	e00c      	b.n	8007e32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	4413      	add	r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4a12      	ldr	r2, [pc, #72]	@ (8007e6c <prvInitialiseTaskLists+0x60>)
 8007e24:	4413      	add	r3, r2
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe ff09 	bl	8006c3e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	607b      	str	r3, [r7, #4]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b06      	cmp	r3, #6
 8007e36:	d9ef      	bls.n	8007e18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e38:	480d      	ldr	r0, [pc, #52]	@ (8007e70 <prvInitialiseTaskLists+0x64>)
 8007e3a:	f7fe ff00 	bl	8006c3e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e3e:	480d      	ldr	r0, [pc, #52]	@ (8007e74 <prvInitialiseTaskLists+0x68>)
 8007e40:	f7fe fefd 	bl	8006c3e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e44:	480c      	ldr	r0, [pc, #48]	@ (8007e78 <prvInitialiseTaskLists+0x6c>)
 8007e46:	f7fe fefa 	bl	8006c3e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e4a:	480c      	ldr	r0, [pc, #48]	@ (8007e7c <prvInitialiseTaskLists+0x70>)
 8007e4c:	f7fe fef7 	bl	8006c3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e50:	480b      	ldr	r0, [pc, #44]	@ (8007e80 <prvInitialiseTaskLists+0x74>)
 8007e52:	f7fe fef4 	bl	8006c3e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007e56:	4b0b      	ldr	r3, [pc, #44]	@ (8007e84 <prvInitialiseTaskLists+0x78>)
 8007e58:	4a05      	ldr	r2, [pc, #20]	@ (8007e70 <prvInitialiseTaskLists+0x64>)
 8007e5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007e5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e88 <prvInitialiseTaskLists+0x7c>)
 8007e5e:	4a05      	ldr	r2, [pc, #20]	@ (8007e74 <prvInitialiseTaskLists+0x68>)
 8007e60:	601a      	str	r2, [r3, #0]
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	24000488 	.word	0x24000488
 8007e70:	24000514 	.word	0x24000514
 8007e74:	24000528 	.word	0x24000528
 8007e78:	24000544 	.word	0x24000544
 8007e7c:	24000558 	.word	0x24000558
 8007e80:	24000570 	.word	0x24000570
 8007e84:	2400053c 	.word	0x2400053c
 8007e88:	24000540 	.word	0x24000540

08007e8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007e92:	e019      	b.n	8007ec8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007e94:	f000 fab8 	bl	8008408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e98:	4b10      	ldr	r3, [pc, #64]	@ (8007edc <prvCheckTasksWaitingTermination+0x50>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3304      	adds	r3, #4
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fe ff54 	bl	8006d52 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee0 <prvCheckTasksWaitingTermination+0x54>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	4a0b      	ldr	r2, [pc, #44]	@ (8007ee0 <prvCheckTasksWaitingTermination+0x54>)
 8007eb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ee4 <prvCheckTasksWaitingTermination+0x58>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	4a0a      	ldr	r2, [pc, #40]	@ (8007ee4 <prvCheckTasksWaitingTermination+0x58>)
 8007ebc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007ebe:	f000 fad5 	bl	800846c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f810 	bl	8007ee8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ec8:	4b06      	ldr	r3, [pc, #24]	@ (8007ee4 <prvCheckTasksWaitingTermination+0x58>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d1e1      	bne.n	8007e94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007ed0:	bf00      	nop
 8007ed2:	bf00      	nop
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
 8007eda:	bf00      	nop
 8007edc:	24000558 	.word	0x24000558
 8007ee0:	24000584 	.word	0x24000584
 8007ee4:	2400056c 	.word	0x2400056c

08007ee8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d108      	bne.n	8007f0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007efe:	4618      	mov	r0, r3
 8007f00:	f000 fc30 	bl	8008764 <vPortFree>
				vPortFree( pxTCB );
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fc2d 	bl	8008764 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f0a:	e019      	b.n	8007f40 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d103      	bne.n	8007f1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fc24 	bl	8008764 <vPortFree>
	}
 8007f1c:	e010      	b.n	8007f40 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d00b      	beq.n	8007f40 <prvDeleteTCB+0x58>
	__asm volatile
 8007f28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	60fb      	str	r3, [r7, #12]
}
 8007f3a:	bf00      	nop
 8007f3c:	bf00      	nop
 8007f3e:	e7fd      	b.n	8007f3c <prvDeleteTCB+0x54>
	}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8007f80 <prvResetNextTaskUnblockTime+0x38>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d104      	bne.n	8007f62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f58:	4b0a      	ldr	r3, [pc, #40]	@ (8007f84 <prvResetNextTaskUnblockTime+0x3c>)
 8007f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007f60:	e008      	b.n	8007f74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f62:	4b07      	ldr	r3, [pc, #28]	@ (8007f80 <prvResetNextTaskUnblockTime+0x38>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	4a04      	ldr	r2, [pc, #16]	@ (8007f84 <prvResetNextTaskUnblockTime+0x3c>)
 8007f72:	6013      	str	r3, [r2, #0]
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	2400053c 	.word	0x2400053c
 8007f84:	240005a4 	.word	0x240005a4

08007f88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8007fbc <xTaskGetSchedulerState+0x34>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d102      	bne.n	8007f9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007f96:	2301      	movs	r3, #1
 8007f98:	607b      	str	r3, [r7, #4]
 8007f9a:	e008      	b.n	8007fae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f9c:	4b08      	ldr	r3, [pc, #32]	@ (8007fc0 <xTaskGetSchedulerState+0x38>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d102      	bne.n	8007faa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	607b      	str	r3, [r7, #4]
 8007fa8:	e001      	b.n	8007fae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007faa:	2300      	movs	r3, #0
 8007fac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007fae:	687b      	ldr	r3, [r7, #4]
	}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr
 8007fbc:	24000590 	.word	0x24000590
 8007fc0:	240005ac 	.word	0x240005ac

08007fc4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d070      	beq.n	80080bc <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007fda:	4b3b      	ldr	r3, [pc, #236]	@ (80080c8 <xTaskPriorityDisinherit+0x104>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d00b      	beq.n	8007ffc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	60fb      	str	r3, [r7, #12]
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	e7fd      	b.n	8007ff8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10b      	bne.n	800801c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	60bb      	str	r3, [r7, #8]
}
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	e7fd      	b.n	8008018 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008020:	1e5a      	subs	r2, r3, #1
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800802e:	429a      	cmp	r2, r3
 8008030:	d044      	beq.n	80080bc <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008036:	2b00      	cmp	r3, #0
 8008038:	d140      	bne.n	80080bc <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	3304      	adds	r3, #4
 800803e:	4618      	mov	r0, r3
 8008040:	f7fe fe87 	bl	8006d52 <uxListRemove>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d115      	bne.n	8008076 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800804e:	491f      	ldr	r1, [pc, #124]	@ (80080cc <xTaskPriorityDisinherit+0x108>)
 8008050:	4613      	mov	r3, r2
 8008052:	009b      	lsls	r3, r3, #2
 8008054:	4413      	add	r3, r2
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	440b      	add	r3, r1
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d10a      	bne.n	8008076 <xTaskPriorityDisinherit+0xb2>
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	2201      	movs	r2, #1
 8008066:	fa02 f303 	lsl.w	r3, r2, r3
 800806a:	43da      	mvns	r2, r3
 800806c:	4b18      	ldr	r3, [pc, #96]	@ (80080d0 <xTaskPriorityDisinherit+0x10c>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4013      	ands	r3, r2
 8008072:	4a17      	ldr	r2, [pc, #92]	@ (80080d0 <xTaskPriorityDisinherit+0x10c>)
 8008074:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008082:	f1c3 0207 	rsb	r2, r3, #7
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808e:	2201      	movs	r2, #1
 8008090:	409a      	lsls	r2, r3
 8008092:	4b0f      	ldr	r3, [pc, #60]	@ (80080d0 <xTaskPriorityDisinherit+0x10c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4313      	orrs	r3, r2
 8008098:	4a0d      	ldr	r2, [pc, #52]	@ (80080d0 <xTaskPriorityDisinherit+0x10c>)
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	4a08      	ldr	r2, [pc, #32]	@ (80080cc <xTaskPriorityDisinherit+0x108>)
 80080aa:	441a      	add	r2, r3
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	f7fe fdf0 	bl	8006c98 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80080b8:	2301      	movs	r3, #1
 80080ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80080bc:	697b      	ldr	r3, [r7, #20]
	}
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop
 80080c8:	24000484 	.word	0x24000484
 80080cc:	24000488 	.word	0x24000488
 80080d0:	2400058c 	.word	0x2400058c

080080d4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80080de:	4b29      	ldr	r3, [pc, #164]	@ (8008184 <prvAddCurrentTaskToDelayedList+0xb0>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80080e4:	4b28      	ldr	r3, [pc, #160]	@ (8008188 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3304      	adds	r3, #4
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe fe31 	bl	8006d52 <uxListRemove>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10b      	bne.n	800810e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80080f6:	4b24      	ldr	r3, [pc, #144]	@ (8008188 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fc:	2201      	movs	r2, #1
 80080fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008102:	43da      	mvns	r2, r3
 8008104:	4b21      	ldr	r3, [pc, #132]	@ (800818c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4013      	ands	r3, r2
 800810a:	4a20      	ldr	r2, [pc, #128]	@ (800818c <prvAddCurrentTaskToDelayedList+0xb8>)
 800810c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008114:	d10a      	bne.n	800812c <prvAddCurrentTaskToDelayedList+0x58>
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d007      	beq.n	800812c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800811c:	4b1a      	ldr	r3, [pc, #104]	@ (8008188 <prvAddCurrentTaskToDelayedList+0xb4>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	3304      	adds	r3, #4
 8008122:	4619      	mov	r1, r3
 8008124:	481a      	ldr	r0, [pc, #104]	@ (8008190 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008126:	f7fe fdb7 	bl	8006c98 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800812a:	e026      	b.n	800817a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800812c:	68fa      	ldr	r2, [r7, #12]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4413      	add	r3, r2
 8008132:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008134:	4b14      	ldr	r3, [pc, #80]	@ (8008188 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	429a      	cmp	r2, r3
 8008142:	d209      	bcs.n	8008158 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008144:	4b13      	ldr	r3, [pc, #76]	@ (8008194 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	4b0f      	ldr	r3, [pc, #60]	@ (8008188 <prvAddCurrentTaskToDelayedList+0xb4>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	3304      	adds	r3, #4
 800814e:	4619      	mov	r1, r3
 8008150:	4610      	mov	r0, r2
 8008152:	f7fe fdc5 	bl	8006ce0 <vListInsert>
}
 8008156:	e010      	b.n	800817a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008158:	4b0f      	ldr	r3, [pc, #60]	@ (8008198 <prvAddCurrentTaskToDelayedList+0xc4>)
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	4b0a      	ldr	r3, [pc, #40]	@ (8008188 <prvAddCurrentTaskToDelayedList+0xb4>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3304      	adds	r3, #4
 8008162:	4619      	mov	r1, r3
 8008164:	4610      	mov	r0, r2
 8008166:	f7fe fdbb 	bl	8006ce0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800816a:	4b0c      	ldr	r3, [pc, #48]	@ (800819c <prvAddCurrentTaskToDelayedList+0xc8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68ba      	ldr	r2, [r7, #8]
 8008170:	429a      	cmp	r2, r3
 8008172:	d202      	bcs.n	800817a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008174:	4a09      	ldr	r2, [pc, #36]	@ (800819c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	6013      	str	r3, [r2, #0]
}
 800817a:	bf00      	nop
 800817c:	3710      	adds	r7, #16
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	24000588 	.word	0x24000588
 8008188:	24000484 	.word	0x24000484
 800818c:	2400058c 	.word	0x2400058c
 8008190:	24000570 	.word	0x24000570
 8008194:	24000540 	.word	0x24000540
 8008198:	2400053c 	.word	0x2400053c
 800819c:	240005a4 	.word	0x240005a4

080081a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	3b04      	subs	r3, #4
 80081b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80081b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	3b04      	subs	r3, #4
 80081be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f023 0201 	bic.w	r2, r3, #1
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3b04      	subs	r3, #4
 80081ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081d0:	4a0c      	ldr	r2, [pc, #48]	@ (8008204 <pxPortInitialiseStack+0x64>)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3b14      	subs	r3, #20
 80081da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3b04      	subs	r3, #4
 80081e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f06f 0202 	mvn.w	r2, #2
 80081ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3b20      	subs	r3, #32
 80081f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081f6:	68fb      	ldr	r3, [r7, #12]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3714      	adds	r7, #20
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	08008209 	.word	0x08008209

08008208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800820e:	2300      	movs	r3, #0
 8008210:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008212:	4b13      	ldr	r3, [pc, #76]	@ (8008260 <prvTaskExitError+0x58>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821a:	d00b      	beq.n	8008234 <prvTaskExitError+0x2c>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008220:	f383 8811 	msr	BASEPRI, r3
 8008224:	f3bf 8f6f 	isb	sy
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	60fb      	str	r3, [r7, #12]
}
 800822e:	bf00      	nop
 8008230:	bf00      	nop
 8008232:	e7fd      	b.n	8008230 <prvTaskExitError+0x28>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	60bb      	str	r3, [r7, #8]
}
 8008246:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008248:	bf00      	nop
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0fc      	beq.n	800824a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008250:	bf00      	nop
 8008252:	bf00      	nop
 8008254:	3714      	adds	r7, #20
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr
 800825e:	bf00      	nop
 8008260:	24000010 	.word	0x24000010
	...

08008270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008270:	4b07      	ldr	r3, [pc, #28]	@ (8008290 <pxCurrentTCBConst2>)
 8008272:	6819      	ldr	r1, [r3, #0]
 8008274:	6808      	ldr	r0, [r1, #0]
 8008276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800827a:	f380 8809 	msr	PSP, r0
 800827e:	f3bf 8f6f 	isb	sy
 8008282:	f04f 0000 	mov.w	r0, #0
 8008286:	f380 8811 	msr	BASEPRI, r0
 800828a:	4770      	bx	lr
 800828c:	f3af 8000 	nop.w

08008290 <pxCurrentTCBConst2>:
 8008290:	24000484 	.word	0x24000484
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop

08008298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008298:	4808      	ldr	r0, [pc, #32]	@ (80082bc <prvPortStartFirstTask+0x24>)
 800829a:	6800      	ldr	r0, [r0, #0]
 800829c:	6800      	ldr	r0, [r0, #0]
 800829e:	f380 8808 	msr	MSP, r0
 80082a2:	f04f 0000 	mov.w	r0, #0
 80082a6:	f380 8814 	msr	CONTROL, r0
 80082aa:	b662      	cpsie	i
 80082ac:	b661      	cpsie	f
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	f3bf 8f6f 	isb	sy
 80082b6:	df00      	svc	0
 80082b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082ba:	bf00      	nop
 80082bc:	e000ed08 	.word	0xe000ed08

080082c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80082c6:	4b47      	ldr	r3, [pc, #284]	@ (80083e4 <xPortStartScheduler+0x124>)
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a47      	ldr	r2, [pc, #284]	@ (80083e8 <xPortStartScheduler+0x128>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d10b      	bne.n	80082e8 <xPortStartScheduler+0x28>
	__asm volatile
 80082d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d4:	f383 8811 	msr	BASEPRI, r3
 80082d8:	f3bf 8f6f 	isb	sy
 80082dc:	f3bf 8f4f 	dsb	sy
 80082e0:	60fb      	str	r3, [r7, #12]
}
 80082e2:	bf00      	nop
 80082e4:	bf00      	nop
 80082e6:	e7fd      	b.n	80082e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80082e8:	4b3e      	ldr	r3, [pc, #248]	@ (80083e4 <xPortStartScheduler+0x124>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a3f      	ldr	r2, [pc, #252]	@ (80083ec <xPortStartScheduler+0x12c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d10b      	bne.n	800830a <xPortStartScheduler+0x4a>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	613b      	str	r3, [r7, #16]
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop
 8008308:	e7fd      	b.n	8008306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800830a:	4b39      	ldr	r3, [pc, #228]	@ (80083f0 <xPortStartScheduler+0x130>)
 800830c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	b2db      	uxtb	r3, r3
 8008314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	22ff      	movs	r2, #255	@ 0xff
 800831a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	b2db      	uxtb	r3, r3
 8008322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	b2db      	uxtb	r3, r3
 8008328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800832c:	b2da      	uxtb	r2, r3
 800832e:	4b31      	ldr	r3, [pc, #196]	@ (80083f4 <xPortStartScheduler+0x134>)
 8008330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008332:	4b31      	ldr	r3, [pc, #196]	@ (80083f8 <xPortStartScheduler+0x138>)
 8008334:	2207      	movs	r2, #7
 8008336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008338:	e009      	b.n	800834e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800833a:	4b2f      	ldr	r3, [pc, #188]	@ (80083f8 <xPortStartScheduler+0x138>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	3b01      	subs	r3, #1
 8008340:	4a2d      	ldr	r2, [pc, #180]	@ (80083f8 <xPortStartScheduler+0x138>)
 8008342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008344:	78fb      	ldrb	r3, [r7, #3]
 8008346:	b2db      	uxtb	r3, r3
 8008348:	005b      	lsls	r3, r3, #1
 800834a:	b2db      	uxtb	r3, r3
 800834c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008356:	2b80      	cmp	r3, #128	@ 0x80
 8008358:	d0ef      	beq.n	800833a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800835a:	4b27      	ldr	r3, [pc, #156]	@ (80083f8 <xPortStartScheduler+0x138>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f1c3 0307 	rsb	r3, r3, #7
 8008362:	2b04      	cmp	r3, #4
 8008364:	d00b      	beq.n	800837e <xPortStartScheduler+0xbe>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	60bb      	str	r3, [r7, #8]
}
 8008378:	bf00      	nop
 800837a:	bf00      	nop
 800837c:	e7fd      	b.n	800837a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800837e:	4b1e      	ldr	r3, [pc, #120]	@ (80083f8 <xPortStartScheduler+0x138>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	021b      	lsls	r3, r3, #8
 8008384:	4a1c      	ldr	r2, [pc, #112]	@ (80083f8 <xPortStartScheduler+0x138>)
 8008386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008388:	4b1b      	ldr	r3, [pc, #108]	@ (80083f8 <xPortStartScheduler+0x138>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008390:	4a19      	ldr	r2, [pc, #100]	@ (80083f8 <xPortStartScheduler+0x138>)
 8008392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	b2da      	uxtb	r2, r3
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800839c:	4b17      	ldr	r3, [pc, #92]	@ (80083fc <xPortStartScheduler+0x13c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a16      	ldr	r2, [pc, #88]	@ (80083fc <xPortStartScheduler+0x13c>)
 80083a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80083a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083a8:	4b14      	ldr	r3, [pc, #80]	@ (80083fc <xPortStartScheduler+0x13c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a13      	ldr	r2, [pc, #76]	@ (80083fc <xPortStartScheduler+0x13c>)
 80083ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80083b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083b4:	f000 f8da 	bl	800856c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083b8:	4b11      	ldr	r3, [pc, #68]	@ (8008400 <xPortStartScheduler+0x140>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80083be:	f000 f8f9 	bl	80085b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80083c2:	4b10      	ldr	r3, [pc, #64]	@ (8008404 <xPortStartScheduler+0x144>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008404 <xPortStartScheduler+0x144>)
 80083c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80083cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083ce:	f7ff ff63 	bl	8008298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083d2:	f7ff fb97 	bl	8007b04 <vTaskSwitchContext>
	prvTaskExitError();
 80083d6:	f7ff ff17 	bl	8008208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	e000ed00 	.word	0xe000ed00
 80083e8:	410fc271 	.word	0x410fc271
 80083ec:	410fc270 	.word	0x410fc270
 80083f0:	e000e400 	.word	0xe000e400
 80083f4:	240005b0 	.word	0x240005b0
 80083f8:	240005b4 	.word	0x240005b4
 80083fc:	e000ed20 	.word	0xe000ed20
 8008400:	24000010 	.word	0x24000010
 8008404:	e000ef34 	.word	0xe000ef34

08008408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
	__asm volatile
 800840e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008412:	f383 8811 	msr	BASEPRI, r3
 8008416:	f3bf 8f6f 	isb	sy
 800841a:	f3bf 8f4f 	dsb	sy
 800841e:	607b      	str	r3, [r7, #4]
}
 8008420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008422:	4b10      	ldr	r3, [pc, #64]	@ (8008464 <vPortEnterCritical+0x5c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	3301      	adds	r3, #1
 8008428:	4a0e      	ldr	r2, [pc, #56]	@ (8008464 <vPortEnterCritical+0x5c>)
 800842a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800842c:	4b0d      	ldr	r3, [pc, #52]	@ (8008464 <vPortEnterCritical+0x5c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d110      	bne.n	8008456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008434:	4b0c      	ldr	r3, [pc, #48]	@ (8008468 <vPortEnterCritical+0x60>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b00      	cmp	r3, #0
 800843c:	d00b      	beq.n	8008456 <vPortEnterCritical+0x4e>
	__asm volatile
 800843e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008442:	f383 8811 	msr	BASEPRI, r3
 8008446:	f3bf 8f6f 	isb	sy
 800844a:	f3bf 8f4f 	dsb	sy
 800844e:	603b      	str	r3, [r7, #0]
}
 8008450:	bf00      	nop
 8008452:	bf00      	nop
 8008454:	e7fd      	b.n	8008452 <vPortEnterCritical+0x4a>
	}
}
 8008456:	bf00      	nop
 8008458:	370c      	adds	r7, #12
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	24000010 	.word	0x24000010
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008472:	4b12      	ldr	r3, [pc, #72]	@ (80084bc <vPortExitCritical+0x50>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10b      	bne.n	8008492 <vPortExitCritical+0x26>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	607b      	str	r3, [r7, #4]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008492:	4b0a      	ldr	r3, [pc, #40]	@ (80084bc <vPortExitCritical+0x50>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3b01      	subs	r3, #1
 8008498:	4a08      	ldr	r2, [pc, #32]	@ (80084bc <vPortExitCritical+0x50>)
 800849a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800849c:	4b07      	ldr	r3, [pc, #28]	@ (80084bc <vPortExitCritical+0x50>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d105      	bne.n	80084b0 <vPortExitCritical+0x44>
 80084a4:	2300      	movs	r3, #0
 80084a6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	24000010 	.word	0x24000010

080084c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084c0:	f3ef 8009 	mrs	r0, PSP
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	4b15      	ldr	r3, [pc, #84]	@ (8008520 <pxCurrentTCBConst>)
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	f01e 0f10 	tst.w	lr, #16
 80084d0:	bf08      	it	eq
 80084d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80084d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084da:	6010      	str	r0, [r2, #0]
 80084dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80084e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80084e4:	f380 8811 	msr	BASEPRI, r0
 80084e8:	f3bf 8f4f 	dsb	sy
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f7ff fb08 	bl	8007b04 <vTaskSwitchContext>
 80084f4:	f04f 0000 	mov.w	r0, #0
 80084f8:	f380 8811 	msr	BASEPRI, r0
 80084fc:	bc09      	pop	{r0, r3}
 80084fe:	6819      	ldr	r1, [r3, #0]
 8008500:	6808      	ldr	r0, [r1, #0]
 8008502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008506:	f01e 0f10 	tst.w	lr, #16
 800850a:	bf08      	it	eq
 800850c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008510:	f380 8809 	msr	PSP, r0
 8008514:	f3bf 8f6f 	isb	sy
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	f3af 8000 	nop.w

08008520 <pxCurrentTCBConst>:
 8008520:	24000484 	.word	0x24000484
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008524:	bf00      	nop
 8008526:	bf00      	nop

08008528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	607b      	str	r3, [r7, #4]
}
 8008540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008542:	f7ff fa25 	bl	8007990 <xTaskIncrementTick>
 8008546:	4603      	mov	r3, r0
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800854c:	4b06      	ldr	r3, [pc, #24]	@ (8008568 <xPortSysTickHandler+0x40>)
 800854e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	2300      	movs	r3, #0
 8008556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	f383 8811 	msr	BASEPRI, r3
}
 800855e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008560:	bf00      	nop
 8008562:	3708      	adds	r7, #8
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	e000ed04 	.word	0xe000ed04

0800856c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008570:	4b0b      	ldr	r3, [pc, #44]	@ (80085a0 <vPortSetupTimerInterrupt+0x34>)
 8008572:	2200      	movs	r2, #0
 8008574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008576:	4b0b      	ldr	r3, [pc, #44]	@ (80085a4 <vPortSetupTimerInterrupt+0x38>)
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800857c:	4b0a      	ldr	r3, [pc, #40]	@ (80085a8 <vPortSetupTimerInterrupt+0x3c>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a0a      	ldr	r2, [pc, #40]	@ (80085ac <vPortSetupTimerInterrupt+0x40>)
 8008582:	fba2 2303 	umull	r2, r3, r2, r3
 8008586:	099b      	lsrs	r3, r3, #6
 8008588:	4a09      	ldr	r2, [pc, #36]	@ (80085b0 <vPortSetupTimerInterrupt+0x44>)
 800858a:	3b01      	subs	r3, #1
 800858c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800858e:	4b04      	ldr	r3, [pc, #16]	@ (80085a0 <vPortSetupTimerInterrupt+0x34>)
 8008590:	2207      	movs	r2, #7
 8008592:	601a      	str	r2, [r3, #0]
}
 8008594:	bf00      	nop
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	e000e010 	.word	0xe000e010
 80085a4:	e000e018 	.word	0xe000e018
 80085a8:	24000000 	.word	0x24000000
 80085ac:	10624dd3 	.word	0x10624dd3
 80085b0:	e000e014 	.word	0xe000e014

080085b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80085b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80085c4 <vPortEnableVFP+0x10>
 80085b8:	6801      	ldr	r1, [r0, #0]
 80085ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80085be:	6001      	str	r1, [r0, #0]
 80085c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80085c2:	bf00      	nop
 80085c4:	e000ed88 	.word	0xe000ed88

080085c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b08a      	sub	sp, #40	@ 0x28
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085d4:	f7ff f930 	bl	8007838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085d8:	4b5c      	ldr	r3, [pc, #368]	@ (800874c <pvPortMalloc+0x184>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d101      	bne.n	80085e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085e0:	f000 f924 	bl	800882c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085e4:	4b5a      	ldr	r3, [pc, #360]	@ (8008750 <pvPortMalloc+0x188>)
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f040 8095 	bne.w	800871c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d01e      	beq.n	8008636 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80085f8:	2208      	movs	r2, #8
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4413      	add	r3, r2
 80085fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f003 0307 	and.w	r3, r3, #7
 8008606:	2b00      	cmp	r3, #0
 8008608:	d015      	beq.n	8008636 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f023 0307 	bic.w	r3, r3, #7
 8008610:	3308      	adds	r3, #8
 8008612:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00b      	beq.n	8008636 <pvPortMalloc+0x6e>
	__asm volatile
 800861e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008622:	f383 8811 	msr	BASEPRI, r3
 8008626:	f3bf 8f6f 	isb	sy
 800862a:	f3bf 8f4f 	dsb	sy
 800862e:	617b      	str	r3, [r7, #20]
}
 8008630:	bf00      	nop
 8008632:	bf00      	nop
 8008634:	e7fd      	b.n	8008632 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d06f      	beq.n	800871c <pvPortMalloc+0x154>
 800863c:	4b45      	ldr	r3, [pc, #276]	@ (8008754 <pvPortMalloc+0x18c>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	429a      	cmp	r2, r3
 8008644:	d86a      	bhi.n	800871c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008646:	4b44      	ldr	r3, [pc, #272]	@ (8008758 <pvPortMalloc+0x190>)
 8008648:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800864a:	4b43      	ldr	r3, [pc, #268]	@ (8008758 <pvPortMalloc+0x190>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008650:	e004      	b.n	800865c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008654:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800865c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	429a      	cmp	r2, r3
 8008664:	d903      	bls.n	800866e <pvPortMalloc+0xa6>
 8008666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d1f1      	bne.n	8008652 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800866e:	4b37      	ldr	r3, [pc, #220]	@ (800874c <pvPortMalloc+0x184>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008674:	429a      	cmp	r2, r3
 8008676:	d051      	beq.n	800871c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008678:	6a3b      	ldr	r3, [r7, #32]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2208      	movs	r2, #8
 800867e:	4413      	add	r3, r2
 8008680:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	6a3b      	ldr	r3, [r7, #32]
 8008688:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800868a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868c:	685a      	ldr	r2, [r3, #4]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	1ad2      	subs	r2, r2, r3
 8008692:	2308      	movs	r3, #8
 8008694:	005b      	lsls	r3, r3, #1
 8008696:	429a      	cmp	r2, r3
 8008698:	d920      	bls.n	80086dc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800869a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	4413      	add	r3, r2
 80086a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	f003 0307 	and.w	r3, r3, #7
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00b      	beq.n	80086c4 <pvPortMalloc+0xfc>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	613b      	str	r3, [r7, #16]
}
 80086be:	bf00      	nop
 80086c0:	bf00      	nop
 80086c2:	e7fd      	b.n	80086c0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c6:	685a      	ldr	r2, [r3, #4]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	1ad2      	subs	r2, r2, r3
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086d6:	69b8      	ldr	r0, [r7, #24]
 80086d8:	f000 f90a 	bl	80088f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086dc:	4b1d      	ldr	r3, [pc, #116]	@ (8008754 <pvPortMalloc+0x18c>)
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	1ad3      	subs	r3, r2, r3
 80086e6:	4a1b      	ldr	r2, [pc, #108]	@ (8008754 <pvPortMalloc+0x18c>)
 80086e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086ea:	4b1a      	ldr	r3, [pc, #104]	@ (8008754 <pvPortMalloc+0x18c>)
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	4b1b      	ldr	r3, [pc, #108]	@ (800875c <pvPortMalloc+0x194>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	429a      	cmp	r2, r3
 80086f4:	d203      	bcs.n	80086fe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086f6:	4b17      	ldr	r3, [pc, #92]	@ (8008754 <pvPortMalloc+0x18c>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a18      	ldr	r2, [pc, #96]	@ (800875c <pvPortMalloc+0x194>)
 80086fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	4b13      	ldr	r3, [pc, #76]	@ (8008750 <pvPortMalloc+0x188>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	431a      	orrs	r2, r3
 8008708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	2200      	movs	r2, #0
 8008710:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008712:	4b13      	ldr	r3, [pc, #76]	@ (8008760 <pvPortMalloc+0x198>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	3301      	adds	r3, #1
 8008718:	4a11      	ldr	r2, [pc, #68]	@ (8008760 <pvPortMalloc+0x198>)
 800871a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800871c:	f7ff f89a 	bl	8007854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	f003 0307 	and.w	r3, r3, #7
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <pvPortMalloc+0x17a>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	60fb      	str	r3, [r7, #12]
}
 800873c:	bf00      	nop
 800873e:	bf00      	nop
 8008740:	e7fd      	b.n	800873e <pvPortMalloc+0x176>
	return pvReturn;
 8008742:	69fb      	ldr	r3, [r7, #28]
}
 8008744:	4618      	mov	r0, r3
 8008746:	3728      	adds	r7, #40	@ 0x28
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}
 800874c:	240041c0 	.word	0x240041c0
 8008750:	240041d4 	.word	0x240041d4
 8008754:	240041c4 	.word	0x240041c4
 8008758:	240041b8 	.word	0x240041b8
 800875c:	240041c8 	.word	0x240041c8
 8008760:	240041cc 	.word	0x240041cc

08008764 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d04f      	beq.n	8008816 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008776:	2308      	movs	r3, #8
 8008778:	425b      	negs	r3, r3
 800877a:	697a      	ldr	r2, [r7, #20]
 800877c:	4413      	add	r3, r2
 800877e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	685a      	ldr	r2, [r3, #4]
 8008788:	4b25      	ldr	r3, [pc, #148]	@ (8008820 <vPortFree+0xbc>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4013      	ands	r3, r2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d10b      	bne.n	80087aa <vPortFree+0x46>
	__asm volatile
 8008792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008796:	f383 8811 	msr	BASEPRI, r3
 800879a:	f3bf 8f6f 	isb	sy
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	60fb      	str	r3, [r7, #12]
}
 80087a4:	bf00      	nop
 80087a6:	bf00      	nop
 80087a8:	e7fd      	b.n	80087a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d00b      	beq.n	80087ca <vPortFree+0x66>
	__asm volatile
 80087b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087b6:	f383 8811 	msr	BASEPRI, r3
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	f3bf 8f4f 	dsb	sy
 80087c2:	60bb      	str	r3, [r7, #8]
}
 80087c4:	bf00      	nop
 80087c6:	bf00      	nop
 80087c8:	e7fd      	b.n	80087c6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	4b14      	ldr	r3, [pc, #80]	@ (8008820 <vPortFree+0xbc>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4013      	ands	r3, r2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d01e      	beq.n	8008816 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d11a      	bne.n	8008816 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008820 <vPortFree+0xbc>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	43db      	mvns	r3, r3
 80087ea:	401a      	ands	r2, r3
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087f0:	f7ff f822 	bl	8007838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008824 <vPortFree+0xc0>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4413      	add	r3, r2
 80087fe:	4a09      	ldr	r2, [pc, #36]	@ (8008824 <vPortFree+0xc0>)
 8008800:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008802:	6938      	ldr	r0, [r7, #16]
 8008804:	f000 f874 	bl	80088f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008808:	4b07      	ldr	r3, [pc, #28]	@ (8008828 <vPortFree+0xc4>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	3301      	adds	r3, #1
 800880e:	4a06      	ldr	r2, [pc, #24]	@ (8008828 <vPortFree+0xc4>)
 8008810:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008812:	f7ff f81f 	bl	8007854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008816:	bf00      	nop
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	240041d4 	.word	0x240041d4
 8008824:	240041c4 	.word	0x240041c4
 8008828:	240041d0 	.word	0x240041d0

0800882c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008832:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008836:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008838:	4b27      	ldr	r3, [pc, #156]	@ (80088d8 <prvHeapInit+0xac>)
 800883a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f003 0307 	and.w	r3, r3, #7
 8008842:	2b00      	cmp	r3, #0
 8008844:	d00c      	beq.n	8008860 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3307      	adds	r3, #7
 800884a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f023 0307 	bic.w	r3, r3, #7
 8008852:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	1ad3      	subs	r3, r2, r3
 800885a:	4a1f      	ldr	r2, [pc, #124]	@ (80088d8 <prvHeapInit+0xac>)
 800885c:	4413      	add	r3, r2
 800885e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008864:	4a1d      	ldr	r2, [pc, #116]	@ (80088dc <prvHeapInit+0xb0>)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800886a:	4b1c      	ldr	r3, [pc, #112]	@ (80088dc <prvHeapInit+0xb0>)
 800886c:	2200      	movs	r2, #0
 800886e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	4413      	add	r3, r2
 8008876:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008878:	2208      	movs	r2, #8
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	1a9b      	subs	r3, r3, r2
 800887e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f023 0307 	bic.w	r3, r3, #7
 8008886:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	4a15      	ldr	r2, [pc, #84]	@ (80088e0 <prvHeapInit+0xb4>)
 800888c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800888e:	4b14      	ldr	r3, [pc, #80]	@ (80088e0 <prvHeapInit+0xb4>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2200      	movs	r2, #0
 8008894:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008896:	4b12      	ldr	r3, [pc, #72]	@ (80088e0 <prvHeapInit+0xb4>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2200      	movs	r2, #0
 800889c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	68fa      	ldr	r2, [r7, #12]
 80088a6:	1ad2      	subs	r2, r2, r3
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088ac:	4b0c      	ldr	r3, [pc, #48]	@ (80088e0 <prvHeapInit+0xb4>)
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	4a0a      	ldr	r2, [pc, #40]	@ (80088e4 <prvHeapInit+0xb8>)
 80088ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	4a09      	ldr	r2, [pc, #36]	@ (80088e8 <prvHeapInit+0xbc>)
 80088c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088c4:	4b09      	ldr	r3, [pc, #36]	@ (80088ec <prvHeapInit+0xc0>)
 80088c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80088ca:	601a      	str	r2, [r3, #0]
}
 80088cc:	bf00      	nop
 80088ce:	3714      	adds	r7, #20
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	240005b8 	.word	0x240005b8
 80088dc:	240041b8 	.word	0x240041b8
 80088e0:	240041c0 	.word	0x240041c0
 80088e4:	240041c8 	.word	0x240041c8
 80088e8:	240041c4 	.word	0x240041c4
 80088ec:	240041d4 	.word	0x240041d4

080088f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088f8:	4b28      	ldr	r3, [pc, #160]	@ (800899c <prvInsertBlockIntoFreeList+0xac>)
 80088fa:	60fb      	str	r3, [r7, #12]
 80088fc:	e002      	b.n	8008904 <prvInsertBlockIntoFreeList+0x14>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	429a      	cmp	r2, r3
 800890c:	d8f7      	bhi.n	80088fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	4413      	add	r3, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d108      	bne.n	8008932 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	685a      	ldr	r2, [r3, #4]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	685b      	ldr	r3, [r3, #4]
 8008928:	441a      	add	r2, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	68ba      	ldr	r2, [r7, #8]
 800893c:	441a      	add	r2, r3
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	429a      	cmp	r2, r3
 8008944:	d118      	bne.n	8008978 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	4b15      	ldr	r3, [pc, #84]	@ (80089a0 <prvInsertBlockIntoFreeList+0xb0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	429a      	cmp	r2, r3
 8008950:	d00d      	beq.n	800896e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	685a      	ldr	r2, [r3, #4]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	441a      	add	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	e008      	b.n	8008980 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800896e:	4b0c      	ldr	r3, [pc, #48]	@ (80089a0 <prvInsertBlockIntoFreeList+0xb0>)
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	601a      	str	r2, [r3, #0]
 8008976:	e003      	b.n	8008980 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	429a      	cmp	r2, r3
 8008986:	d002      	beq.n	800898e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800898e:	bf00      	nop
 8008990:	3714      	adds	r7, #20
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	240041b8 	.word	0x240041b8
 80089a0:	240041c0 	.word	0x240041c0

080089a4 <std>:
 80089a4:	2300      	movs	r3, #0
 80089a6:	b510      	push	{r4, lr}
 80089a8:	4604      	mov	r4, r0
 80089aa:	e9c0 3300 	strd	r3, r3, [r0]
 80089ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089b2:	6083      	str	r3, [r0, #8]
 80089b4:	8181      	strh	r1, [r0, #12]
 80089b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80089b8:	81c2      	strh	r2, [r0, #14]
 80089ba:	6183      	str	r3, [r0, #24]
 80089bc:	4619      	mov	r1, r3
 80089be:	2208      	movs	r2, #8
 80089c0:	305c      	adds	r0, #92	@ 0x5c
 80089c2:	f000 fa01 	bl	8008dc8 <memset>
 80089c6:	4b0d      	ldr	r3, [pc, #52]	@ (80089fc <std+0x58>)
 80089c8:	6263      	str	r3, [r4, #36]	@ 0x24
 80089ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008a00 <std+0x5c>)
 80089cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008a04 <std+0x60>)
 80089d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80089d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a08 <std+0x64>)
 80089d4:	6323      	str	r3, [r4, #48]	@ 0x30
 80089d6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <std+0x68>)
 80089d8:	6224      	str	r4, [r4, #32]
 80089da:	429c      	cmp	r4, r3
 80089dc:	d006      	beq.n	80089ec <std+0x48>
 80089de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80089e2:	4294      	cmp	r4, r2
 80089e4:	d002      	beq.n	80089ec <std+0x48>
 80089e6:	33d0      	adds	r3, #208	@ 0xd0
 80089e8:	429c      	cmp	r4, r3
 80089ea:	d105      	bne.n	80089f8 <std+0x54>
 80089ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089f4:	f000 ba60 	b.w	8008eb8 <__retarget_lock_init_recursive>
 80089f8:	bd10      	pop	{r4, pc}
 80089fa:	bf00      	nop
 80089fc:	08008c19 	.word	0x08008c19
 8008a00:	08008c3b 	.word	0x08008c3b
 8008a04:	08008c73 	.word	0x08008c73
 8008a08:	08008c97 	.word	0x08008c97
 8008a0c:	240041d8 	.word	0x240041d8

08008a10 <stdio_exit_handler>:
 8008a10:	4a02      	ldr	r2, [pc, #8]	@ (8008a1c <stdio_exit_handler+0xc>)
 8008a12:	4903      	ldr	r1, [pc, #12]	@ (8008a20 <stdio_exit_handler+0x10>)
 8008a14:	4803      	ldr	r0, [pc, #12]	@ (8008a24 <stdio_exit_handler+0x14>)
 8008a16:	f000 b869 	b.w	8008aec <_fwalk_sglue>
 8008a1a:	bf00      	nop
 8008a1c:	24000014 	.word	0x24000014
 8008a20:	08009771 	.word	0x08009771
 8008a24:	24000024 	.word	0x24000024

08008a28 <cleanup_stdio>:
 8008a28:	6841      	ldr	r1, [r0, #4]
 8008a2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a5c <cleanup_stdio+0x34>)
 8008a2c:	4299      	cmp	r1, r3
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	4604      	mov	r4, r0
 8008a32:	d001      	beq.n	8008a38 <cleanup_stdio+0x10>
 8008a34:	f000 fe9c 	bl	8009770 <_fflush_r>
 8008a38:	68a1      	ldr	r1, [r4, #8]
 8008a3a:	4b09      	ldr	r3, [pc, #36]	@ (8008a60 <cleanup_stdio+0x38>)
 8008a3c:	4299      	cmp	r1, r3
 8008a3e:	d002      	beq.n	8008a46 <cleanup_stdio+0x1e>
 8008a40:	4620      	mov	r0, r4
 8008a42:	f000 fe95 	bl	8009770 <_fflush_r>
 8008a46:	68e1      	ldr	r1, [r4, #12]
 8008a48:	4b06      	ldr	r3, [pc, #24]	@ (8008a64 <cleanup_stdio+0x3c>)
 8008a4a:	4299      	cmp	r1, r3
 8008a4c:	d004      	beq.n	8008a58 <cleanup_stdio+0x30>
 8008a4e:	4620      	mov	r0, r4
 8008a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a54:	f000 be8c 	b.w	8009770 <_fflush_r>
 8008a58:	bd10      	pop	{r4, pc}
 8008a5a:	bf00      	nop
 8008a5c:	240041d8 	.word	0x240041d8
 8008a60:	24004240 	.word	0x24004240
 8008a64:	240042a8 	.word	0x240042a8

08008a68 <global_stdio_init.part.0>:
 8008a68:	b510      	push	{r4, lr}
 8008a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a98 <global_stdio_init.part.0+0x30>)
 8008a6c:	4c0b      	ldr	r4, [pc, #44]	@ (8008a9c <global_stdio_init.part.0+0x34>)
 8008a6e:	4a0c      	ldr	r2, [pc, #48]	@ (8008aa0 <global_stdio_init.part.0+0x38>)
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	4620      	mov	r0, r4
 8008a74:	2200      	movs	r2, #0
 8008a76:	2104      	movs	r1, #4
 8008a78:	f7ff ff94 	bl	80089a4 <std>
 8008a7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a80:	2201      	movs	r2, #1
 8008a82:	2109      	movs	r1, #9
 8008a84:	f7ff ff8e 	bl	80089a4 <std>
 8008a88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a92:	2112      	movs	r1, #18
 8008a94:	f7ff bf86 	b.w	80089a4 <std>
 8008a98:	24004310 	.word	0x24004310
 8008a9c:	240041d8 	.word	0x240041d8
 8008aa0:	08008a11 	.word	0x08008a11

08008aa4 <__sfp_lock_acquire>:
 8008aa4:	4801      	ldr	r0, [pc, #4]	@ (8008aac <__sfp_lock_acquire+0x8>)
 8008aa6:	f000 ba08 	b.w	8008eba <__retarget_lock_acquire_recursive>
 8008aaa:	bf00      	nop
 8008aac:	24004319 	.word	0x24004319

08008ab0 <__sfp_lock_release>:
 8008ab0:	4801      	ldr	r0, [pc, #4]	@ (8008ab8 <__sfp_lock_release+0x8>)
 8008ab2:	f000 ba03 	b.w	8008ebc <__retarget_lock_release_recursive>
 8008ab6:	bf00      	nop
 8008ab8:	24004319 	.word	0x24004319

08008abc <__sinit>:
 8008abc:	b510      	push	{r4, lr}
 8008abe:	4604      	mov	r4, r0
 8008ac0:	f7ff fff0 	bl	8008aa4 <__sfp_lock_acquire>
 8008ac4:	6a23      	ldr	r3, [r4, #32]
 8008ac6:	b11b      	cbz	r3, 8008ad0 <__sinit+0x14>
 8008ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008acc:	f7ff bff0 	b.w	8008ab0 <__sfp_lock_release>
 8008ad0:	4b04      	ldr	r3, [pc, #16]	@ (8008ae4 <__sinit+0x28>)
 8008ad2:	6223      	str	r3, [r4, #32]
 8008ad4:	4b04      	ldr	r3, [pc, #16]	@ (8008ae8 <__sinit+0x2c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d1f5      	bne.n	8008ac8 <__sinit+0xc>
 8008adc:	f7ff ffc4 	bl	8008a68 <global_stdio_init.part.0>
 8008ae0:	e7f2      	b.n	8008ac8 <__sinit+0xc>
 8008ae2:	bf00      	nop
 8008ae4:	08008a29 	.word	0x08008a29
 8008ae8:	24004310 	.word	0x24004310

08008aec <_fwalk_sglue>:
 8008aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af0:	4607      	mov	r7, r0
 8008af2:	4688      	mov	r8, r1
 8008af4:	4614      	mov	r4, r2
 8008af6:	2600      	movs	r6, #0
 8008af8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008afc:	f1b9 0901 	subs.w	r9, r9, #1
 8008b00:	d505      	bpl.n	8008b0e <_fwalk_sglue+0x22>
 8008b02:	6824      	ldr	r4, [r4, #0]
 8008b04:	2c00      	cmp	r4, #0
 8008b06:	d1f7      	bne.n	8008af8 <_fwalk_sglue+0xc>
 8008b08:	4630      	mov	r0, r6
 8008b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b0e:	89ab      	ldrh	r3, [r5, #12]
 8008b10:	2b01      	cmp	r3, #1
 8008b12:	d907      	bls.n	8008b24 <_fwalk_sglue+0x38>
 8008b14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b18:	3301      	adds	r3, #1
 8008b1a:	d003      	beq.n	8008b24 <_fwalk_sglue+0x38>
 8008b1c:	4629      	mov	r1, r5
 8008b1e:	4638      	mov	r0, r7
 8008b20:	47c0      	blx	r8
 8008b22:	4306      	orrs	r6, r0
 8008b24:	3568      	adds	r5, #104	@ 0x68
 8008b26:	e7e9      	b.n	8008afc <_fwalk_sglue+0x10>

08008b28 <iprintf>:
 8008b28:	b40f      	push	{r0, r1, r2, r3}
 8008b2a:	b507      	push	{r0, r1, r2, lr}
 8008b2c:	4906      	ldr	r1, [pc, #24]	@ (8008b48 <iprintf+0x20>)
 8008b2e:	ab04      	add	r3, sp, #16
 8008b30:	6808      	ldr	r0, [r1, #0]
 8008b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b36:	6881      	ldr	r1, [r0, #8]
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	f000 faf1 	bl	8009120 <_vfiprintf_r>
 8008b3e:	b003      	add	sp, #12
 8008b40:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b44:	b004      	add	sp, #16
 8008b46:	4770      	bx	lr
 8008b48:	24000020 	.word	0x24000020

08008b4c <putchar>:
 8008b4c:	4b02      	ldr	r3, [pc, #8]	@ (8008b58 <putchar+0xc>)
 8008b4e:	4601      	mov	r1, r0
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	6882      	ldr	r2, [r0, #8]
 8008b54:	f000 be96 	b.w	8009884 <_putc_r>
 8008b58:	24000020 	.word	0x24000020

08008b5c <_puts_r>:
 8008b5c:	6a03      	ldr	r3, [r0, #32]
 8008b5e:	b570      	push	{r4, r5, r6, lr}
 8008b60:	6884      	ldr	r4, [r0, #8]
 8008b62:	4605      	mov	r5, r0
 8008b64:	460e      	mov	r6, r1
 8008b66:	b90b      	cbnz	r3, 8008b6c <_puts_r+0x10>
 8008b68:	f7ff ffa8 	bl	8008abc <__sinit>
 8008b6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b6e:	07db      	lsls	r3, r3, #31
 8008b70:	d405      	bmi.n	8008b7e <_puts_r+0x22>
 8008b72:	89a3      	ldrh	r3, [r4, #12]
 8008b74:	0598      	lsls	r0, r3, #22
 8008b76:	d402      	bmi.n	8008b7e <_puts_r+0x22>
 8008b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b7a:	f000 f99e 	bl	8008eba <__retarget_lock_acquire_recursive>
 8008b7e:	89a3      	ldrh	r3, [r4, #12]
 8008b80:	0719      	lsls	r1, r3, #28
 8008b82:	d502      	bpl.n	8008b8a <_puts_r+0x2e>
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d135      	bne.n	8008bf6 <_puts_r+0x9a>
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f000 f8c5 	bl	8008d1c <__swsetup_r>
 8008b92:	b380      	cbz	r0, 8008bf6 <_puts_r+0x9a>
 8008b94:	f04f 35ff 	mov.w	r5, #4294967295
 8008b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b9a:	07da      	lsls	r2, r3, #31
 8008b9c:	d405      	bmi.n	8008baa <_puts_r+0x4e>
 8008b9e:	89a3      	ldrh	r3, [r4, #12]
 8008ba0:	059b      	lsls	r3, r3, #22
 8008ba2:	d402      	bmi.n	8008baa <_puts_r+0x4e>
 8008ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ba6:	f000 f989 	bl	8008ebc <__retarget_lock_release_recursive>
 8008baa:	4628      	mov	r0, r5
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	da04      	bge.n	8008bbc <_puts_r+0x60>
 8008bb2:	69a2      	ldr	r2, [r4, #24]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	dc17      	bgt.n	8008be8 <_puts_r+0x8c>
 8008bb8:	290a      	cmp	r1, #10
 8008bba:	d015      	beq.n	8008be8 <_puts_r+0x8c>
 8008bbc:	6823      	ldr	r3, [r4, #0]
 8008bbe:	1c5a      	adds	r2, r3, #1
 8008bc0:	6022      	str	r2, [r4, #0]
 8008bc2:	7019      	strb	r1, [r3, #0]
 8008bc4:	68a3      	ldr	r3, [r4, #8]
 8008bc6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	60a3      	str	r3, [r4, #8]
 8008bce:	2900      	cmp	r1, #0
 8008bd0:	d1ed      	bne.n	8008bae <_puts_r+0x52>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	da11      	bge.n	8008bfa <_puts_r+0x9e>
 8008bd6:	4622      	mov	r2, r4
 8008bd8:	210a      	movs	r1, #10
 8008bda:	4628      	mov	r0, r5
 8008bdc:	f000 f85f 	bl	8008c9e <__swbuf_r>
 8008be0:	3001      	adds	r0, #1
 8008be2:	d0d7      	beq.n	8008b94 <_puts_r+0x38>
 8008be4:	250a      	movs	r5, #10
 8008be6:	e7d7      	b.n	8008b98 <_puts_r+0x3c>
 8008be8:	4622      	mov	r2, r4
 8008bea:	4628      	mov	r0, r5
 8008bec:	f000 f857 	bl	8008c9e <__swbuf_r>
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	d1e7      	bne.n	8008bc4 <_puts_r+0x68>
 8008bf4:	e7ce      	b.n	8008b94 <_puts_r+0x38>
 8008bf6:	3e01      	subs	r6, #1
 8008bf8:	e7e4      	b.n	8008bc4 <_puts_r+0x68>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	1c5a      	adds	r2, r3, #1
 8008bfe:	6022      	str	r2, [r4, #0]
 8008c00:	220a      	movs	r2, #10
 8008c02:	701a      	strb	r2, [r3, #0]
 8008c04:	e7ee      	b.n	8008be4 <_puts_r+0x88>
	...

08008c08 <puts>:
 8008c08:	4b02      	ldr	r3, [pc, #8]	@ (8008c14 <puts+0xc>)
 8008c0a:	4601      	mov	r1, r0
 8008c0c:	6818      	ldr	r0, [r3, #0]
 8008c0e:	f7ff bfa5 	b.w	8008b5c <_puts_r>
 8008c12:	bf00      	nop
 8008c14:	24000020 	.word	0x24000020

08008c18 <__sread>:
 8008c18:	b510      	push	{r4, lr}
 8008c1a:	460c      	mov	r4, r1
 8008c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c20:	f000 f8fc 	bl	8008e1c <_read_r>
 8008c24:	2800      	cmp	r0, #0
 8008c26:	bfab      	itete	ge
 8008c28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c2c:	181b      	addge	r3, r3, r0
 8008c2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c32:	bfac      	ite	ge
 8008c34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c36:	81a3      	strhlt	r3, [r4, #12]
 8008c38:	bd10      	pop	{r4, pc}

08008c3a <__swrite>:
 8008c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3e:	461f      	mov	r7, r3
 8008c40:	898b      	ldrh	r3, [r1, #12]
 8008c42:	05db      	lsls	r3, r3, #23
 8008c44:	4605      	mov	r5, r0
 8008c46:	460c      	mov	r4, r1
 8008c48:	4616      	mov	r6, r2
 8008c4a:	d505      	bpl.n	8008c58 <__swrite+0x1e>
 8008c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c50:	2302      	movs	r3, #2
 8008c52:	2200      	movs	r2, #0
 8008c54:	f000 f8d0 	bl	8008df8 <_lseek_r>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	4632      	mov	r2, r6
 8008c66:	463b      	mov	r3, r7
 8008c68:	4628      	mov	r0, r5
 8008c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c6e:	f000 b8e7 	b.w	8008e40 <_write_r>

08008c72 <__sseek>:
 8008c72:	b510      	push	{r4, lr}
 8008c74:	460c      	mov	r4, r1
 8008c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7a:	f000 f8bd 	bl	8008df8 <_lseek_r>
 8008c7e:	1c43      	adds	r3, r0, #1
 8008c80:	89a3      	ldrh	r3, [r4, #12]
 8008c82:	bf15      	itete	ne
 8008c84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008c86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008c8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008c8e:	81a3      	strheq	r3, [r4, #12]
 8008c90:	bf18      	it	ne
 8008c92:	81a3      	strhne	r3, [r4, #12]
 8008c94:	bd10      	pop	{r4, pc}

08008c96 <__sclose>:
 8008c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c9a:	f000 b89d 	b.w	8008dd8 <_close_r>

08008c9e <__swbuf_r>:
 8008c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca0:	460e      	mov	r6, r1
 8008ca2:	4614      	mov	r4, r2
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	b118      	cbz	r0, 8008cb0 <__swbuf_r+0x12>
 8008ca8:	6a03      	ldr	r3, [r0, #32]
 8008caa:	b90b      	cbnz	r3, 8008cb0 <__swbuf_r+0x12>
 8008cac:	f7ff ff06 	bl	8008abc <__sinit>
 8008cb0:	69a3      	ldr	r3, [r4, #24]
 8008cb2:	60a3      	str	r3, [r4, #8]
 8008cb4:	89a3      	ldrh	r3, [r4, #12]
 8008cb6:	071a      	lsls	r2, r3, #28
 8008cb8:	d501      	bpl.n	8008cbe <__swbuf_r+0x20>
 8008cba:	6923      	ldr	r3, [r4, #16]
 8008cbc:	b943      	cbnz	r3, 8008cd0 <__swbuf_r+0x32>
 8008cbe:	4621      	mov	r1, r4
 8008cc0:	4628      	mov	r0, r5
 8008cc2:	f000 f82b 	bl	8008d1c <__swsetup_r>
 8008cc6:	b118      	cbz	r0, 8008cd0 <__swbuf_r+0x32>
 8008cc8:	f04f 37ff 	mov.w	r7, #4294967295
 8008ccc:	4638      	mov	r0, r7
 8008cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	6922      	ldr	r2, [r4, #16]
 8008cd4:	1a98      	subs	r0, r3, r2
 8008cd6:	6963      	ldr	r3, [r4, #20]
 8008cd8:	b2f6      	uxtb	r6, r6
 8008cda:	4283      	cmp	r3, r0
 8008cdc:	4637      	mov	r7, r6
 8008cde:	dc05      	bgt.n	8008cec <__swbuf_r+0x4e>
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 fd44 	bl	8009770 <_fflush_r>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d1ed      	bne.n	8008cc8 <__swbuf_r+0x2a>
 8008cec:	68a3      	ldr	r3, [r4, #8]
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	60a3      	str	r3, [r4, #8]
 8008cf2:	6823      	ldr	r3, [r4, #0]
 8008cf4:	1c5a      	adds	r2, r3, #1
 8008cf6:	6022      	str	r2, [r4, #0]
 8008cf8:	701e      	strb	r6, [r3, #0]
 8008cfa:	6962      	ldr	r2, [r4, #20]
 8008cfc:	1c43      	adds	r3, r0, #1
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d004      	beq.n	8008d0c <__swbuf_r+0x6e>
 8008d02:	89a3      	ldrh	r3, [r4, #12]
 8008d04:	07db      	lsls	r3, r3, #31
 8008d06:	d5e1      	bpl.n	8008ccc <__swbuf_r+0x2e>
 8008d08:	2e0a      	cmp	r6, #10
 8008d0a:	d1df      	bne.n	8008ccc <__swbuf_r+0x2e>
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	4628      	mov	r0, r5
 8008d10:	f000 fd2e 	bl	8009770 <_fflush_r>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	d0d9      	beq.n	8008ccc <__swbuf_r+0x2e>
 8008d18:	e7d6      	b.n	8008cc8 <__swbuf_r+0x2a>
	...

08008d1c <__swsetup_r>:
 8008d1c:	b538      	push	{r3, r4, r5, lr}
 8008d1e:	4b29      	ldr	r3, [pc, #164]	@ (8008dc4 <__swsetup_r+0xa8>)
 8008d20:	4605      	mov	r5, r0
 8008d22:	6818      	ldr	r0, [r3, #0]
 8008d24:	460c      	mov	r4, r1
 8008d26:	b118      	cbz	r0, 8008d30 <__swsetup_r+0x14>
 8008d28:	6a03      	ldr	r3, [r0, #32]
 8008d2a:	b90b      	cbnz	r3, 8008d30 <__swsetup_r+0x14>
 8008d2c:	f7ff fec6 	bl	8008abc <__sinit>
 8008d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d34:	0719      	lsls	r1, r3, #28
 8008d36:	d422      	bmi.n	8008d7e <__swsetup_r+0x62>
 8008d38:	06da      	lsls	r2, r3, #27
 8008d3a:	d407      	bmi.n	8008d4c <__swsetup_r+0x30>
 8008d3c:	2209      	movs	r2, #9
 8008d3e:	602a      	str	r2, [r5, #0]
 8008d40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d44:	81a3      	strh	r3, [r4, #12]
 8008d46:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4a:	e033      	b.n	8008db4 <__swsetup_r+0x98>
 8008d4c:	0758      	lsls	r0, r3, #29
 8008d4e:	d512      	bpl.n	8008d76 <__swsetup_r+0x5a>
 8008d50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d52:	b141      	cbz	r1, 8008d66 <__swsetup_r+0x4a>
 8008d54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d58:	4299      	cmp	r1, r3
 8008d5a:	d002      	beq.n	8008d62 <__swsetup_r+0x46>
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	f000 f8bd 	bl	8008edc <_free_r>
 8008d62:	2300      	movs	r3, #0
 8008d64:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d6c:	81a3      	strh	r3, [r4, #12]
 8008d6e:	2300      	movs	r3, #0
 8008d70:	6063      	str	r3, [r4, #4]
 8008d72:	6923      	ldr	r3, [r4, #16]
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	89a3      	ldrh	r3, [r4, #12]
 8008d78:	f043 0308 	orr.w	r3, r3, #8
 8008d7c:	81a3      	strh	r3, [r4, #12]
 8008d7e:	6923      	ldr	r3, [r4, #16]
 8008d80:	b94b      	cbnz	r3, 8008d96 <__swsetup_r+0x7a>
 8008d82:	89a3      	ldrh	r3, [r4, #12]
 8008d84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d8c:	d003      	beq.n	8008d96 <__swsetup_r+0x7a>
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4628      	mov	r0, r5
 8008d92:	f000 fd3b 	bl	800980c <__smakebuf_r>
 8008d96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d9a:	f013 0201 	ands.w	r2, r3, #1
 8008d9e:	d00a      	beq.n	8008db6 <__swsetup_r+0x9a>
 8008da0:	2200      	movs	r2, #0
 8008da2:	60a2      	str	r2, [r4, #8]
 8008da4:	6962      	ldr	r2, [r4, #20]
 8008da6:	4252      	negs	r2, r2
 8008da8:	61a2      	str	r2, [r4, #24]
 8008daa:	6922      	ldr	r2, [r4, #16]
 8008dac:	b942      	cbnz	r2, 8008dc0 <__swsetup_r+0xa4>
 8008dae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008db2:	d1c5      	bne.n	8008d40 <__swsetup_r+0x24>
 8008db4:	bd38      	pop	{r3, r4, r5, pc}
 8008db6:	0799      	lsls	r1, r3, #30
 8008db8:	bf58      	it	pl
 8008dba:	6962      	ldrpl	r2, [r4, #20]
 8008dbc:	60a2      	str	r2, [r4, #8]
 8008dbe:	e7f4      	b.n	8008daa <__swsetup_r+0x8e>
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	e7f7      	b.n	8008db4 <__swsetup_r+0x98>
 8008dc4:	24000020 	.word	0x24000020

08008dc8 <memset>:
 8008dc8:	4402      	add	r2, r0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d100      	bne.n	8008dd2 <memset+0xa>
 8008dd0:	4770      	bx	lr
 8008dd2:	f803 1b01 	strb.w	r1, [r3], #1
 8008dd6:	e7f9      	b.n	8008dcc <memset+0x4>

08008dd8 <_close_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4d06      	ldr	r5, [pc, #24]	@ (8008df4 <_close_r+0x1c>)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	f7f8 f879 	bl	8000eda <_close>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_close_r+0x1a>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_close_r+0x1a>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	24004314 	.word	0x24004314

08008df8 <_lseek_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	@ (8008e18 <_lseek_r+0x20>)
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4611      	mov	r1, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7f8 f88e 	bl	8000f28 <_lseek>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_lseek_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_lseek_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	24004314 	.word	0x24004314

08008e1c <_read_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d07      	ldr	r5, [pc, #28]	@ (8008e3c <_read_r+0x20>)
 8008e20:	4604      	mov	r4, r0
 8008e22:	4608      	mov	r0, r1
 8008e24:	4611      	mov	r1, r2
 8008e26:	2200      	movs	r2, #0
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7f8 f81c 	bl	8000e68 <_read>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_read_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_read_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	24004314 	.word	0x24004314

08008e40 <_write_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d07      	ldr	r5, [pc, #28]	@ (8008e60 <_write_r+0x20>)
 8008e44:	4604      	mov	r4, r0
 8008e46:	4608      	mov	r0, r1
 8008e48:	4611      	mov	r1, r2
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	602a      	str	r2, [r5, #0]
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f7f8 f827 	bl	8000ea2 <_write>
 8008e54:	1c43      	adds	r3, r0, #1
 8008e56:	d102      	bne.n	8008e5e <_write_r+0x1e>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	b103      	cbz	r3, 8008e5e <_write_r+0x1e>
 8008e5c:	6023      	str	r3, [r4, #0]
 8008e5e:	bd38      	pop	{r3, r4, r5, pc}
 8008e60:	24004314 	.word	0x24004314

08008e64 <__errno>:
 8008e64:	4b01      	ldr	r3, [pc, #4]	@ (8008e6c <__errno+0x8>)
 8008e66:	6818      	ldr	r0, [r3, #0]
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	24000020 	.word	0x24000020

08008e70 <__libc_init_array>:
 8008e70:	b570      	push	{r4, r5, r6, lr}
 8008e72:	4d0d      	ldr	r5, [pc, #52]	@ (8008ea8 <__libc_init_array+0x38>)
 8008e74:	4c0d      	ldr	r4, [pc, #52]	@ (8008eac <__libc_init_array+0x3c>)
 8008e76:	1b64      	subs	r4, r4, r5
 8008e78:	10a4      	asrs	r4, r4, #2
 8008e7a:	2600      	movs	r6, #0
 8008e7c:	42a6      	cmp	r6, r4
 8008e7e:	d109      	bne.n	8008e94 <__libc_init_array+0x24>
 8008e80:	4d0b      	ldr	r5, [pc, #44]	@ (8008eb0 <__libc_init_array+0x40>)
 8008e82:	4c0c      	ldr	r4, [pc, #48]	@ (8008eb4 <__libc_init_array+0x44>)
 8008e84:	f000 fd64 	bl	8009950 <_init>
 8008e88:	1b64      	subs	r4, r4, r5
 8008e8a:	10a4      	asrs	r4, r4, #2
 8008e8c:	2600      	movs	r6, #0
 8008e8e:	42a6      	cmp	r6, r4
 8008e90:	d105      	bne.n	8008e9e <__libc_init_array+0x2e>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e98:	4798      	blx	r3
 8008e9a:	3601      	adds	r6, #1
 8008e9c:	e7ee      	b.n	8008e7c <__libc_init_array+0xc>
 8008e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ea2:	4798      	blx	r3
 8008ea4:	3601      	adds	r6, #1
 8008ea6:	e7f2      	b.n	8008e8e <__libc_init_array+0x1e>
 8008ea8:	08009aa0 	.word	0x08009aa0
 8008eac:	08009aa0 	.word	0x08009aa0
 8008eb0:	08009aa0 	.word	0x08009aa0
 8008eb4:	08009aa4 	.word	0x08009aa4

08008eb8 <__retarget_lock_init_recursive>:
 8008eb8:	4770      	bx	lr

08008eba <__retarget_lock_acquire_recursive>:
 8008eba:	4770      	bx	lr

08008ebc <__retarget_lock_release_recursive>:
 8008ebc:	4770      	bx	lr

08008ebe <memcpy>:
 8008ebe:	440a      	add	r2, r1
 8008ec0:	4291      	cmp	r1, r2
 8008ec2:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ec6:	d100      	bne.n	8008eca <memcpy+0xc>
 8008ec8:	4770      	bx	lr
 8008eca:	b510      	push	{r4, lr}
 8008ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed4:	4291      	cmp	r1, r2
 8008ed6:	d1f9      	bne.n	8008ecc <memcpy+0xe>
 8008ed8:	bd10      	pop	{r4, pc}
	...

08008edc <_free_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4605      	mov	r5, r0
 8008ee0:	2900      	cmp	r1, #0
 8008ee2:	d041      	beq.n	8008f68 <_free_r+0x8c>
 8008ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee8:	1f0c      	subs	r4, r1, #4
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	bfb8      	it	lt
 8008eee:	18e4      	addlt	r4, r4, r3
 8008ef0:	f000 f8e0 	bl	80090b4 <__malloc_lock>
 8008ef4:	4a1d      	ldr	r2, [pc, #116]	@ (8008f6c <_free_r+0x90>)
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	b933      	cbnz	r3, 8008f08 <_free_r+0x2c>
 8008efa:	6063      	str	r3, [r4, #4]
 8008efc:	6014      	str	r4, [r2, #0]
 8008efe:	4628      	mov	r0, r5
 8008f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f04:	f000 b8dc 	b.w	80090c0 <__malloc_unlock>
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	d908      	bls.n	8008f1e <_free_r+0x42>
 8008f0c:	6820      	ldr	r0, [r4, #0]
 8008f0e:	1821      	adds	r1, r4, r0
 8008f10:	428b      	cmp	r3, r1
 8008f12:	bf01      	itttt	eq
 8008f14:	6819      	ldreq	r1, [r3, #0]
 8008f16:	685b      	ldreq	r3, [r3, #4]
 8008f18:	1809      	addeq	r1, r1, r0
 8008f1a:	6021      	streq	r1, [r4, #0]
 8008f1c:	e7ed      	b.n	8008efa <_free_r+0x1e>
 8008f1e:	461a      	mov	r2, r3
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	b10b      	cbz	r3, 8008f28 <_free_r+0x4c>
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d9fa      	bls.n	8008f1e <_free_r+0x42>
 8008f28:	6811      	ldr	r1, [r2, #0]
 8008f2a:	1850      	adds	r0, r2, r1
 8008f2c:	42a0      	cmp	r0, r4
 8008f2e:	d10b      	bne.n	8008f48 <_free_r+0x6c>
 8008f30:	6820      	ldr	r0, [r4, #0]
 8008f32:	4401      	add	r1, r0
 8008f34:	1850      	adds	r0, r2, r1
 8008f36:	4283      	cmp	r3, r0
 8008f38:	6011      	str	r1, [r2, #0]
 8008f3a:	d1e0      	bne.n	8008efe <_free_r+0x22>
 8008f3c:	6818      	ldr	r0, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	6053      	str	r3, [r2, #4]
 8008f42:	4408      	add	r0, r1
 8008f44:	6010      	str	r0, [r2, #0]
 8008f46:	e7da      	b.n	8008efe <_free_r+0x22>
 8008f48:	d902      	bls.n	8008f50 <_free_r+0x74>
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	e7d6      	b.n	8008efe <_free_r+0x22>
 8008f50:	6820      	ldr	r0, [r4, #0]
 8008f52:	1821      	adds	r1, r4, r0
 8008f54:	428b      	cmp	r3, r1
 8008f56:	bf04      	itt	eq
 8008f58:	6819      	ldreq	r1, [r3, #0]
 8008f5a:	685b      	ldreq	r3, [r3, #4]
 8008f5c:	6063      	str	r3, [r4, #4]
 8008f5e:	bf04      	itt	eq
 8008f60:	1809      	addeq	r1, r1, r0
 8008f62:	6021      	streq	r1, [r4, #0]
 8008f64:	6054      	str	r4, [r2, #4]
 8008f66:	e7ca      	b.n	8008efe <_free_r+0x22>
 8008f68:	bd38      	pop	{r3, r4, r5, pc}
 8008f6a:	bf00      	nop
 8008f6c:	24004320 	.word	0x24004320

08008f70 <sbrk_aligned>:
 8008f70:	b570      	push	{r4, r5, r6, lr}
 8008f72:	4e0f      	ldr	r6, [pc, #60]	@ (8008fb0 <sbrk_aligned+0x40>)
 8008f74:	460c      	mov	r4, r1
 8008f76:	6831      	ldr	r1, [r6, #0]
 8008f78:	4605      	mov	r5, r0
 8008f7a:	b911      	cbnz	r1, 8008f82 <sbrk_aligned+0x12>
 8008f7c:	f000 fcd8 	bl	8009930 <_sbrk_r>
 8008f80:	6030      	str	r0, [r6, #0]
 8008f82:	4621      	mov	r1, r4
 8008f84:	4628      	mov	r0, r5
 8008f86:	f000 fcd3 	bl	8009930 <_sbrk_r>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	d103      	bne.n	8008f96 <sbrk_aligned+0x26>
 8008f8e:	f04f 34ff 	mov.w	r4, #4294967295
 8008f92:	4620      	mov	r0, r4
 8008f94:	bd70      	pop	{r4, r5, r6, pc}
 8008f96:	1cc4      	adds	r4, r0, #3
 8008f98:	f024 0403 	bic.w	r4, r4, #3
 8008f9c:	42a0      	cmp	r0, r4
 8008f9e:	d0f8      	beq.n	8008f92 <sbrk_aligned+0x22>
 8008fa0:	1a21      	subs	r1, r4, r0
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 fcc4 	bl	8009930 <_sbrk_r>
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d1f2      	bne.n	8008f92 <sbrk_aligned+0x22>
 8008fac:	e7ef      	b.n	8008f8e <sbrk_aligned+0x1e>
 8008fae:	bf00      	nop
 8008fb0:	2400431c 	.word	0x2400431c

08008fb4 <_malloc_r>:
 8008fb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb8:	1ccd      	adds	r5, r1, #3
 8008fba:	f025 0503 	bic.w	r5, r5, #3
 8008fbe:	3508      	adds	r5, #8
 8008fc0:	2d0c      	cmp	r5, #12
 8008fc2:	bf38      	it	cc
 8008fc4:	250c      	movcc	r5, #12
 8008fc6:	2d00      	cmp	r5, #0
 8008fc8:	4606      	mov	r6, r0
 8008fca:	db01      	blt.n	8008fd0 <_malloc_r+0x1c>
 8008fcc:	42a9      	cmp	r1, r5
 8008fce:	d904      	bls.n	8008fda <_malloc_r+0x26>
 8008fd0:	230c      	movs	r3, #12
 8008fd2:	6033      	str	r3, [r6, #0]
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090b0 <_malloc_r+0xfc>
 8008fde:	f000 f869 	bl	80090b4 <__malloc_lock>
 8008fe2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fe6:	461c      	mov	r4, r3
 8008fe8:	bb44      	cbnz	r4, 800903c <_malloc_r+0x88>
 8008fea:	4629      	mov	r1, r5
 8008fec:	4630      	mov	r0, r6
 8008fee:	f7ff ffbf 	bl	8008f70 <sbrk_aligned>
 8008ff2:	1c43      	adds	r3, r0, #1
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	d158      	bne.n	80090aa <_malloc_r+0xf6>
 8008ff8:	f8d8 4000 	ldr.w	r4, [r8]
 8008ffc:	4627      	mov	r7, r4
 8008ffe:	2f00      	cmp	r7, #0
 8009000:	d143      	bne.n	800908a <_malloc_r+0xd6>
 8009002:	2c00      	cmp	r4, #0
 8009004:	d04b      	beq.n	800909e <_malloc_r+0xea>
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	4639      	mov	r1, r7
 800900a:	4630      	mov	r0, r6
 800900c:	eb04 0903 	add.w	r9, r4, r3
 8009010:	f000 fc8e 	bl	8009930 <_sbrk_r>
 8009014:	4581      	cmp	r9, r0
 8009016:	d142      	bne.n	800909e <_malloc_r+0xea>
 8009018:	6821      	ldr	r1, [r4, #0]
 800901a:	1a6d      	subs	r5, r5, r1
 800901c:	4629      	mov	r1, r5
 800901e:	4630      	mov	r0, r6
 8009020:	f7ff ffa6 	bl	8008f70 <sbrk_aligned>
 8009024:	3001      	adds	r0, #1
 8009026:	d03a      	beq.n	800909e <_malloc_r+0xea>
 8009028:	6823      	ldr	r3, [r4, #0]
 800902a:	442b      	add	r3, r5
 800902c:	6023      	str	r3, [r4, #0]
 800902e:	f8d8 3000 	ldr.w	r3, [r8]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	bb62      	cbnz	r2, 8009090 <_malloc_r+0xdc>
 8009036:	f8c8 7000 	str.w	r7, [r8]
 800903a:	e00f      	b.n	800905c <_malloc_r+0xa8>
 800903c:	6822      	ldr	r2, [r4, #0]
 800903e:	1b52      	subs	r2, r2, r5
 8009040:	d420      	bmi.n	8009084 <_malloc_r+0xd0>
 8009042:	2a0b      	cmp	r2, #11
 8009044:	d917      	bls.n	8009076 <_malloc_r+0xc2>
 8009046:	1961      	adds	r1, r4, r5
 8009048:	42a3      	cmp	r3, r4
 800904a:	6025      	str	r5, [r4, #0]
 800904c:	bf18      	it	ne
 800904e:	6059      	strne	r1, [r3, #4]
 8009050:	6863      	ldr	r3, [r4, #4]
 8009052:	bf08      	it	eq
 8009054:	f8c8 1000 	streq.w	r1, [r8]
 8009058:	5162      	str	r2, [r4, r5]
 800905a:	604b      	str	r3, [r1, #4]
 800905c:	4630      	mov	r0, r6
 800905e:	f000 f82f 	bl	80090c0 <__malloc_unlock>
 8009062:	f104 000b 	add.w	r0, r4, #11
 8009066:	1d23      	adds	r3, r4, #4
 8009068:	f020 0007 	bic.w	r0, r0, #7
 800906c:	1ac2      	subs	r2, r0, r3
 800906e:	bf1c      	itt	ne
 8009070:	1a1b      	subne	r3, r3, r0
 8009072:	50a3      	strne	r3, [r4, r2]
 8009074:	e7af      	b.n	8008fd6 <_malloc_r+0x22>
 8009076:	6862      	ldr	r2, [r4, #4]
 8009078:	42a3      	cmp	r3, r4
 800907a:	bf0c      	ite	eq
 800907c:	f8c8 2000 	streq.w	r2, [r8]
 8009080:	605a      	strne	r2, [r3, #4]
 8009082:	e7eb      	b.n	800905c <_malloc_r+0xa8>
 8009084:	4623      	mov	r3, r4
 8009086:	6864      	ldr	r4, [r4, #4]
 8009088:	e7ae      	b.n	8008fe8 <_malloc_r+0x34>
 800908a:	463c      	mov	r4, r7
 800908c:	687f      	ldr	r7, [r7, #4]
 800908e:	e7b6      	b.n	8008ffe <_malloc_r+0x4a>
 8009090:	461a      	mov	r2, r3
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	42a3      	cmp	r3, r4
 8009096:	d1fb      	bne.n	8009090 <_malloc_r+0xdc>
 8009098:	2300      	movs	r3, #0
 800909a:	6053      	str	r3, [r2, #4]
 800909c:	e7de      	b.n	800905c <_malloc_r+0xa8>
 800909e:	230c      	movs	r3, #12
 80090a0:	6033      	str	r3, [r6, #0]
 80090a2:	4630      	mov	r0, r6
 80090a4:	f000 f80c 	bl	80090c0 <__malloc_unlock>
 80090a8:	e794      	b.n	8008fd4 <_malloc_r+0x20>
 80090aa:	6005      	str	r5, [r0, #0]
 80090ac:	e7d6      	b.n	800905c <_malloc_r+0xa8>
 80090ae:	bf00      	nop
 80090b0:	24004320 	.word	0x24004320

080090b4 <__malloc_lock>:
 80090b4:	4801      	ldr	r0, [pc, #4]	@ (80090bc <__malloc_lock+0x8>)
 80090b6:	f7ff bf00 	b.w	8008eba <__retarget_lock_acquire_recursive>
 80090ba:	bf00      	nop
 80090bc:	24004318 	.word	0x24004318

080090c0 <__malloc_unlock>:
 80090c0:	4801      	ldr	r0, [pc, #4]	@ (80090c8 <__malloc_unlock+0x8>)
 80090c2:	f7ff befb 	b.w	8008ebc <__retarget_lock_release_recursive>
 80090c6:	bf00      	nop
 80090c8:	24004318 	.word	0x24004318

080090cc <__sfputc_r>:
 80090cc:	6893      	ldr	r3, [r2, #8]
 80090ce:	3b01      	subs	r3, #1
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	b410      	push	{r4}
 80090d4:	6093      	str	r3, [r2, #8]
 80090d6:	da08      	bge.n	80090ea <__sfputc_r+0x1e>
 80090d8:	6994      	ldr	r4, [r2, #24]
 80090da:	42a3      	cmp	r3, r4
 80090dc:	db01      	blt.n	80090e2 <__sfputc_r+0x16>
 80090de:	290a      	cmp	r1, #10
 80090e0:	d103      	bne.n	80090ea <__sfputc_r+0x1e>
 80090e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090e6:	f7ff bdda 	b.w	8008c9e <__swbuf_r>
 80090ea:	6813      	ldr	r3, [r2, #0]
 80090ec:	1c58      	adds	r0, r3, #1
 80090ee:	6010      	str	r0, [r2, #0]
 80090f0:	7019      	strb	r1, [r3, #0]
 80090f2:	4608      	mov	r0, r1
 80090f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <__sfputs_r>:
 80090fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fc:	4606      	mov	r6, r0
 80090fe:	460f      	mov	r7, r1
 8009100:	4614      	mov	r4, r2
 8009102:	18d5      	adds	r5, r2, r3
 8009104:	42ac      	cmp	r4, r5
 8009106:	d101      	bne.n	800910c <__sfputs_r+0x12>
 8009108:	2000      	movs	r0, #0
 800910a:	e007      	b.n	800911c <__sfputs_r+0x22>
 800910c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009110:	463a      	mov	r2, r7
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ffda 	bl	80090cc <__sfputc_r>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d1f3      	bne.n	8009104 <__sfputs_r+0xa>
 800911c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009120 <_vfiprintf_r>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	460d      	mov	r5, r1
 8009126:	b09d      	sub	sp, #116	@ 0x74
 8009128:	4614      	mov	r4, r2
 800912a:	4698      	mov	r8, r3
 800912c:	4606      	mov	r6, r0
 800912e:	b118      	cbz	r0, 8009138 <_vfiprintf_r+0x18>
 8009130:	6a03      	ldr	r3, [r0, #32]
 8009132:	b90b      	cbnz	r3, 8009138 <_vfiprintf_r+0x18>
 8009134:	f7ff fcc2 	bl	8008abc <__sinit>
 8009138:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800913a:	07d9      	lsls	r1, r3, #31
 800913c:	d405      	bmi.n	800914a <_vfiprintf_r+0x2a>
 800913e:	89ab      	ldrh	r3, [r5, #12]
 8009140:	059a      	lsls	r2, r3, #22
 8009142:	d402      	bmi.n	800914a <_vfiprintf_r+0x2a>
 8009144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009146:	f7ff feb8 	bl	8008eba <__retarget_lock_acquire_recursive>
 800914a:	89ab      	ldrh	r3, [r5, #12]
 800914c:	071b      	lsls	r3, r3, #28
 800914e:	d501      	bpl.n	8009154 <_vfiprintf_r+0x34>
 8009150:	692b      	ldr	r3, [r5, #16]
 8009152:	b99b      	cbnz	r3, 800917c <_vfiprintf_r+0x5c>
 8009154:	4629      	mov	r1, r5
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff fde0 	bl	8008d1c <__swsetup_r>
 800915c:	b170      	cbz	r0, 800917c <_vfiprintf_r+0x5c>
 800915e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009160:	07dc      	lsls	r4, r3, #31
 8009162:	d504      	bpl.n	800916e <_vfiprintf_r+0x4e>
 8009164:	f04f 30ff 	mov.w	r0, #4294967295
 8009168:	b01d      	add	sp, #116	@ 0x74
 800916a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916e:	89ab      	ldrh	r3, [r5, #12]
 8009170:	0598      	lsls	r0, r3, #22
 8009172:	d4f7      	bmi.n	8009164 <_vfiprintf_r+0x44>
 8009174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009176:	f7ff fea1 	bl	8008ebc <__retarget_lock_release_recursive>
 800917a:	e7f3      	b.n	8009164 <_vfiprintf_r+0x44>
 800917c:	2300      	movs	r3, #0
 800917e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009180:	2320      	movs	r3, #32
 8009182:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009186:	f8cd 800c 	str.w	r8, [sp, #12]
 800918a:	2330      	movs	r3, #48	@ 0x30
 800918c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800933c <_vfiprintf_r+0x21c>
 8009190:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009194:	f04f 0901 	mov.w	r9, #1
 8009198:	4623      	mov	r3, r4
 800919a:	469a      	mov	sl, r3
 800919c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80091a0:	b10a      	cbz	r2, 80091a6 <_vfiprintf_r+0x86>
 80091a2:	2a25      	cmp	r2, #37	@ 0x25
 80091a4:	d1f9      	bne.n	800919a <_vfiprintf_r+0x7a>
 80091a6:	ebba 0b04 	subs.w	fp, sl, r4
 80091aa:	d00b      	beq.n	80091c4 <_vfiprintf_r+0xa4>
 80091ac:	465b      	mov	r3, fp
 80091ae:	4622      	mov	r2, r4
 80091b0:	4629      	mov	r1, r5
 80091b2:	4630      	mov	r0, r6
 80091b4:	f7ff ffa1 	bl	80090fa <__sfputs_r>
 80091b8:	3001      	adds	r0, #1
 80091ba:	f000 80a7 	beq.w	800930c <_vfiprintf_r+0x1ec>
 80091be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091c0:	445a      	add	r2, fp
 80091c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80091c4:	f89a 3000 	ldrb.w	r3, [sl]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 809f 	beq.w	800930c <_vfiprintf_r+0x1ec>
 80091ce:	2300      	movs	r3, #0
 80091d0:	f04f 32ff 	mov.w	r2, #4294967295
 80091d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d8:	f10a 0a01 	add.w	sl, sl, #1
 80091dc:	9304      	str	r3, [sp, #16]
 80091de:	9307      	str	r3, [sp, #28]
 80091e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80091e6:	4654      	mov	r4, sl
 80091e8:	2205      	movs	r2, #5
 80091ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ee:	4853      	ldr	r0, [pc, #332]	@ (800933c <_vfiprintf_r+0x21c>)
 80091f0:	f7f7 f876 	bl	80002e0 <memchr>
 80091f4:	9a04      	ldr	r2, [sp, #16]
 80091f6:	b9d8      	cbnz	r0, 8009230 <_vfiprintf_r+0x110>
 80091f8:	06d1      	lsls	r1, r2, #27
 80091fa:	bf44      	itt	mi
 80091fc:	2320      	movmi	r3, #32
 80091fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009202:	0713      	lsls	r3, r2, #28
 8009204:	bf44      	itt	mi
 8009206:	232b      	movmi	r3, #43	@ 0x2b
 8009208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800920c:	f89a 3000 	ldrb.w	r3, [sl]
 8009210:	2b2a      	cmp	r3, #42	@ 0x2a
 8009212:	d015      	beq.n	8009240 <_vfiprintf_r+0x120>
 8009214:	9a07      	ldr	r2, [sp, #28]
 8009216:	4654      	mov	r4, sl
 8009218:	2000      	movs	r0, #0
 800921a:	f04f 0c0a 	mov.w	ip, #10
 800921e:	4621      	mov	r1, r4
 8009220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009224:	3b30      	subs	r3, #48	@ 0x30
 8009226:	2b09      	cmp	r3, #9
 8009228:	d94b      	bls.n	80092c2 <_vfiprintf_r+0x1a2>
 800922a:	b1b0      	cbz	r0, 800925a <_vfiprintf_r+0x13a>
 800922c:	9207      	str	r2, [sp, #28]
 800922e:	e014      	b.n	800925a <_vfiprintf_r+0x13a>
 8009230:	eba0 0308 	sub.w	r3, r0, r8
 8009234:	fa09 f303 	lsl.w	r3, r9, r3
 8009238:	4313      	orrs	r3, r2
 800923a:	9304      	str	r3, [sp, #16]
 800923c:	46a2      	mov	sl, r4
 800923e:	e7d2      	b.n	80091e6 <_vfiprintf_r+0xc6>
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	1d19      	adds	r1, r3, #4
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	9103      	str	r1, [sp, #12]
 8009248:	2b00      	cmp	r3, #0
 800924a:	bfbb      	ittet	lt
 800924c:	425b      	neglt	r3, r3
 800924e:	f042 0202 	orrlt.w	r2, r2, #2
 8009252:	9307      	strge	r3, [sp, #28]
 8009254:	9307      	strlt	r3, [sp, #28]
 8009256:	bfb8      	it	lt
 8009258:	9204      	strlt	r2, [sp, #16]
 800925a:	7823      	ldrb	r3, [r4, #0]
 800925c:	2b2e      	cmp	r3, #46	@ 0x2e
 800925e:	d10a      	bne.n	8009276 <_vfiprintf_r+0x156>
 8009260:	7863      	ldrb	r3, [r4, #1]
 8009262:	2b2a      	cmp	r3, #42	@ 0x2a
 8009264:	d132      	bne.n	80092cc <_vfiprintf_r+0x1ac>
 8009266:	9b03      	ldr	r3, [sp, #12]
 8009268:	1d1a      	adds	r2, r3, #4
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	9203      	str	r2, [sp, #12]
 800926e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009272:	3402      	adds	r4, #2
 8009274:	9305      	str	r3, [sp, #20]
 8009276:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800934c <_vfiprintf_r+0x22c>
 800927a:	7821      	ldrb	r1, [r4, #0]
 800927c:	2203      	movs	r2, #3
 800927e:	4650      	mov	r0, sl
 8009280:	f7f7 f82e 	bl	80002e0 <memchr>
 8009284:	b138      	cbz	r0, 8009296 <_vfiprintf_r+0x176>
 8009286:	9b04      	ldr	r3, [sp, #16]
 8009288:	eba0 000a 	sub.w	r0, r0, sl
 800928c:	2240      	movs	r2, #64	@ 0x40
 800928e:	4082      	lsls	r2, r0
 8009290:	4313      	orrs	r3, r2
 8009292:	3401      	adds	r4, #1
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929a:	4829      	ldr	r0, [pc, #164]	@ (8009340 <_vfiprintf_r+0x220>)
 800929c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80092a0:	2206      	movs	r2, #6
 80092a2:	f7f7 f81d 	bl	80002e0 <memchr>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d03f      	beq.n	800932a <_vfiprintf_r+0x20a>
 80092aa:	4b26      	ldr	r3, [pc, #152]	@ (8009344 <_vfiprintf_r+0x224>)
 80092ac:	bb1b      	cbnz	r3, 80092f6 <_vfiprintf_r+0x1d6>
 80092ae:	9b03      	ldr	r3, [sp, #12]
 80092b0:	3307      	adds	r3, #7
 80092b2:	f023 0307 	bic.w	r3, r3, #7
 80092b6:	3308      	adds	r3, #8
 80092b8:	9303      	str	r3, [sp, #12]
 80092ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092bc:	443b      	add	r3, r7
 80092be:	9309      	str	r3, [sp, #36]	@ 0x24
 80092c0:	e76a      	b.n	8009198 <_vfiprintf_r+0x78>
 80092c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80092c6:	460c      	mov	r4, r1
 80092c8:	2001      	movs	r0, #1
 80092ca:	e7a8      	b.n	800921e <_vfiprintf_r+0xfe>
 80092cc:	2300      	movs	r3, #0
 80092ce:	3401      	adds	r4, #1
 80092d0:	9305      	str	r3, [sp, #20]
 80092d2:	4619      	mov	r1, r3
 80092d4:	f04f 0c0a 	mov.w	ip, #10
 80092d8:	4620      	mov	r0, r4
 80092da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092de:	3a30      	subs	r2, #48	@ 0x30
 80092e0:	2a09      	cmp	r2, #9
 80092e2:	d903      	bls.n	80092ec <_vfiprintf_r+0x1cc>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d0c6      	beq.n	8009276 <_vfiprintf_r+0x156>
 80092e8:	9105      	str	r1, [sp, #20]
 80092ea:	e7c4      	b.n	8009276 <_vfiprintf_r+0x156>
 80092ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80092f0:	4604      	mov	r4, r0
 80092f2:	2301      	movs	r3, #1
 80092f4:	e7f0      	b.n	80092d8 <_vfiprintf_r+0x1b8>
 80092f6:	ab03      	add	r3, sp, #12
 80092f8:	9300      	str	r3, [sp, #0]
 80092fa:	462a      	mov	r2, r5
 80092fc:	4b12      	ldr	r3, [pc, #72]	@ (8009348 <_vfiprintf_r+0x228>)
 80092fe:	a904      	add	r1, sp, #16
 8009300:	4630      	mov	r0, r6
 8009302:	f3af 8000 	nop.w
 8009306:	4607      	mov	r7, r0
 8009308:	1c78      	adds	r0, r7, #1
 800930a:	d1d6      	bne.n	80092ba <_vfiprintf_r+0x19a>
 800930c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800930e:	07d9      	lsls	r1, r3, #31
 8009310:	d405      	bmi.n	800931e <_vfiprintf_r+0x1fe>
 8009312:	89ab      	ldrh	r3, [r5, #12]
 8009314:	059a      	lsls	r2, r3, #22
 8009316:	d402      	bmi.n	800931e <_vfiprintf_r+0x1fe>
 8009318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800931a:	f7ff fdcf 	bl	8008ebc <__retarget_lock_release_recursive>
 800931e:	89ab      	ldrh	r3, [r5, #12]
 8009320:	065b      	lsls	r3, r3, #25
 8009322:	f53f af1f 	bmi.w	8009164 <_vfiprintf_r+0x44>
 8009326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009328:	e71e      	b.n	8009168 <_vfiprintf_r+0x48>
 800932a:	ab03      	add	r3, sp, #12
 800932c:	9300      	str	r3, [sp, #0]
 800932e:	462a      	mov	r2, r5
 8009330:	4b05      	ldr	r3, [pc, #20]	@ (8009348 <_vfiprintf_r+0x228>)
 8009332:	a904      	add	r1, sp, #16
 8009334:	4630      	mov	r0, r6
 8009336:	f000 f879 	bl	800942c <_printf_i>
 800933a:	e7e4      	b.n	8009306 <_vfiprintf_r+0x1e6>
 800933c:	08009a64 	.word	0x08009a64
 8009340:	08009a6e 	.word	0x08009a6e
 8009344:	00000000 	.word	0x00000000
 8009348:	080090fb 	.word	0x080090fb
 800934c:	08009a6a 	.word	0x08009a6a

08009350 <_printf_common>:
 8009350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009354:	4616      	mov	r6, r2
 8009356:	4698      	mov	r8, r3
 8009358:	688a      	ldr	r2, [r1, #8]
 800935a:	690b      	ldr	r3, [r1, #16]
 800935c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009360:	4293      	cmp	r3, r2
 8009362:	bfb8      	it	lt
 8009364:	4613      	movlt	r3, r2
 8009366:	6033      	str	r3, [r6, #0]
 8009368:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800936c:	4607      	mov	r7, r0
 800936e:	460c      	mov	r4, r1
 8009370:	b10a      	cbz	r2, 8009376 <_printf_common+0x26>
 8009372:	3301      	adds	r3, #1
 8009374:	6033      	str	r3, [r6, #0]
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	0699      	lsls	r1, r3, #26
 800937a:	bf42      	ittt	mi
 800937c:	6833      	ldrmi	r3, [r6, #0]
 800937e:	3302      	addmi	r3, #2
 8009380:	6033      	strmi	r3, [r6, #0]
 8009382:	6825      	ldr	r5, [r4, #0]
 8009384:	f015 0506 	ands.w	r5, r5, #6
 8009388:	d106      	bne.n	8009398 <_printf_common+0x48>
 800938a:	f104 0a19 	add.w	sl, r4, #25
 800938e:	68e3      	ldr	r3, [r4, #12]
 8009390:	6832      	ldr	r2, [r6, #0]
 8009392:	1a9b      	subs	r3, r3, r2
 8009394:	42ab      	cmp	r3, r5
 8009396:	dc26      	bgt.n	80093e6 <_printf_common+0x96>
 8009398:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800939c:	6822      	ldr	r2, [r4, #0]
 800939e:	3b00      	subs	r3, #0
 80093a0:	bf18      	it	ne
 80093a2:	2301      	movne	r3, #1
 80093a4:	0692      	lsls	r2, r2, #26
 80093a6:	d42b      	bmi.n	8009400 <_printf_common+0xb0>
 80093a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093ac:	4641      	mov	r1, r8
 80093ae:	4638      	mov	r0, r7
 80093b0:	47c8      	blx	r9
 80093b2:	3001      	adds	r0, #1
 80093b4:	d01e      	beq.n	80093f4 <_printf_common+0xa4>
 80093b6:	6823      	ldr	r3, [r4, #0]
 80093b8:	6922      	ldr	r2, [r4, #16]
 80093ba:	f003 0306 	and.w	r3, r3, #6
 80093be:	2b04      	cmp	r3, #4
 80093c0:	bf02      	ittt	eq
 80093c2:	68e5      	ldreq	r5, [r4, #12]
 80093c4:	6833      	ldreq	r3, [r6, #0]
 80093c6:	1aed      	subeq	r5, r5, r3
 80093c8:	68a3      	ldr	r3, [r4, #8]
 80093ca:	bf0c      	ite	eq
 80093cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093d0:	2500      	movne	r5, #0
 80093d2:	4293      	cmp	r3, r2
 80093d4:	bfc4      	itt	gt
 80093d6:	1a9b      	subgt	r3, r3, r2
 80093d8:	18ed      	addgt	r5, r5, r3
 80093da:	2600      	movs	r6, #0
 80093dc:	341a      	adds	r4, #26
 80093de:	42b5      	cmp	r5, r6
 80093e0:	d11a      	bne.n	8009418 <_printf_common+0xc8>
 80093e2:	2000      	movs	r0, #0
 80093e4:	e008      	b.n	80093f8 <_printf_common+0xa8>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4652      	mov	r2, sl
 80093ea:	4641      	mov	r1, r8
 80093ec:	4638      	mov	r0, r7
 80093ee:	47c8      	blx	r9
 80093f0:	3001      	adds	r0, #1
 80093f2:	d103      	bne.n	80093fc <_printf_common+0xac>
 80093f4:	f04f 30ff 	mov.w	r0, #4294967295
 80093f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093fc:	3501      	adds	r5, #1
 80093fe:	e7c6      	b.n	800938e <_printf_common+0x3e>
 8009400:	18e1      	adds	r1, r4, r3
 8009402:	1c5a      	adds	r2, r3, #1
 8009404:	2030      	movs	r0, #48	@ 0x30
 8009406:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800940a:	4422      	add	r2, r4
 800940c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009410:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009414:	3302      	adds	r3, #2
 8009416:	e7c7      	b.n	80093a8 <_printf_common+0x58>
 8009418:	2301      	movs	r3, #1
 800941a:	4622      	mov	r2, r4
 800941c:	4641      	mov	r1, r8
 800941e:	4638      	mov	r0, r7
 8009420:	47c8      	blx	r9
 8009422:	3001      	adds	r0, #1
 8009424:	d0e6      	beq.n	80093f4 <_printf_common+0xa4>
 8009426:	3601      	adds	r6, #1
 8009428:	e7d9      	b.n	80093de <_printf_common+0x8e>
	...

0800942c <_printf_i>:
 800942c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	7e0f      	ldrb	r7, [r1, #24]
 8009432:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009434:	2f78      	cmp	r7, #120	@ 0x78
 8009436:	4691      	mov	r9, r2
 8009438:	4680      	mov	r8, r0
 800943a:	460c      	mov	r4, r1
 800943c:	469a      	mov	sl, r3
 800943e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009442:	d807      	bhi.n	8009454 <_printf_i+0x28>
 8009444:	2f62      	cmp	r7, #98	@ 0x62
 8009446:	d80a      	bhi.n	800945e <_printf_i+0x32>
 8009448:	2f00      	cmp	r7, #0
 800944a:	f000 80d1 	beq.w	80095f0 <_printf_i+0x1c4>
 800944e:	2f58      	cmp	r7, #88	@ 0x58
 8009450:	f000 80b8 	beq.w	80095c4 <_printf_i+0x198>
 8009454:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009458:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800945c:	e03a      	b.n	80094d4 <_printf_i+0xa8>
 800945e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009462:	2b15      	cmp	r3, #21
 8009464:	d8f6      	bhi.n	8009454 <_printf_i+0x28>
 8009466:	a101      	add	r1, pc, #4	@ (adr r1, 800946c <_printf_i+0x40>)
 8009468:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800946c:	080094c5 	.word	0x080094c5
 8009470:	080094d9 	.word	0x080094d9
 8009474:	08009455 	.word	0x08009455
 8009478:	08009455 	.word	0x08009455
 800947c:	08009455 	.word	0x08009455
 8009480:	08009455 	.word	0x08009455
 8009484:	080094d9 	.word	0x080094d9
 8009488:	08009455 	.word	0x08009455
 800948c:	08009455 	.word	0x08009455
 8009490:	08009455 	.word	0x08009455
 8009494:	08009455 	.word	0x08009455
 8009498:	080095d7 	.word	0x080095d7
 800949c:	08009503 	.word	0x08009503
 80094a0:	08009591 	.word	0x08009591
 80094a4:	08009455 	.word	0x08009455
 80094a8:	08009455 	.word	0x08009455
 80094ac:	080095f9 	.word	0x080095f9
 80094b0:	08009455 	.word	0x08009455
 80094b4:	08009503 	.word	0x08009503
 80094b8:	08009455 	.word	0x08009455
 80094bc:	08009455 	.word	0x08009455
 80094c0:	08009599 	.word	0x08009599
 80094c4:	6833      	ldr	r3, [r6, #0]
 80094c6:	1d1a      	adds	r2, r3, #4
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	6032      	str	r2, [r6, #0]
 80094cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094d4:	2301      	movs	r3, #1
 80094d6:	e09c      	b.n	8009612 <_printf_i+0x1e6>
 80094d8:	6833      	ldr	r3, [r6, #0]
 80094da:	6820      	ldr	r0, [r4, #0]
 80094dc:	1d19      	adds	r1, r3, #4
 80094de:	6031      	str	r1, [r6, #0]
 80094e0:	0606      	lsls	r6, r0, #24
 80094e2:	d501      	bpl.n	80094e8 <_printf_i+0xbc>
 80094e4:	681d      	ldr	r5, [r3, #0]
 80094e6:	e003      	b.n	80094f0 <_printf_i+0xc4>
 80094e8:	0645      	lsls	r5, r0, #25
 80094ea:	d5fb      	bpl.n	80094e4 <_printf_i+0xb8>
 80094ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094f0:	2d00      	cmp	r5, #0
 80094f2:	da03      	bge.n	80094fc <_printf_i+0xd0>
 80094f4:	232d      	movs	r3, #45	@ 0x2d
 80094f6:	426d      	negs	r5, r5
 80094f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094fc:	4858      	ldr	r0, [pc, #352]	@ (8009660 <_printf_i+0x234>)
 80094fe:	230a      	movs	r3, #10
 8009500:	e011      	b.n	8009526 <_printf_i+0xfa>
 8009502:	6821      	ldr	r1, [r4, #0]
 8009504:	6833      	ldr	r3, [r6, #0]
 8009506:	0608      	lsls	r0, r1, #24
 8009508:	f853 5b04 	ldr.w	r5, [r3], #4
 800950c:	d402      	bmi.n	8009514 <_printf_i+0xe8>
 800950e:	0649      	lsls	r1, r1, #25
 8009510:	bf48      	it	mi
 8009512:	b2ad      	uxthmi	r5, r5
 8009514:	2f6f      	cmp	r7, #111	@ 0x6f
 8009516:	4852      	ldr	r0, [pc, #328]	@ (8009660 <_printf_i+0x234>)
 8009518:	6033      	str	r3, [r6, #0]
 800951a:	bf14      	ite	ne
 800951c:	230a      	movne	r3, #10
 800951e:	2308      	moveq	r3, #8
 8009520:	2100      	movs	r1, #0
 8009522:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009526:	6866      	ldr	r6, [r4, #4]
 8009528:	60a6      	str	r6, [r4, #8]
 800952a:	2e00      	cmp	r6, #0
 800952c:	db05      	blt.n	800953a <_printf_i+0x10e>
 800952e:	6821      	ldr	r1, [r4, #0]
 8009530:	432e      	orrs	r6, r5
 8009532:	f021 0104 	bic.w	r1, r1, #4
 8009536:	6021      	str	r1, [r4, #0]
 8009538:	d04b      	beq.n	80095d2 <_printf_i+0x1a6>
 800953a:	4616      	mov	r6, r2
 800953c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009540:	fb03 5711 	mls	r7, r3, r1, r5
 8009544:	5dc7      	ldrb	r7, [r0, r7]
 8009546:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800954a:	462f      	mov	r7, r5
 800954c:	42bb      	cmp	r3, r7
 800954e:	460d      	mov	r5, r1
 8009550:	d9f4      	bls.n	800953c <_printf_i+0x110>
 8009552:	2b08      	cmp	r3, #8
 8009554:	d10b      	bne.n	800956e <_printf_i+0x142>
 8009556:	6823      	ldr	r3, [r4, #0]
 8009558:	07df      	lsls	r7, r3, #31
 800955a:	d508      	bpl.n	800956e <_printf_i+0x142>
 800955c:	6923      	ldr	r3, [r4, #16]
 800955e:	6861      	ldr	r1, [r4, #4]
 8009560:	4299      	cmp	r1, r3
 8009562:	bfde      	ittt	le
 8009564:	2330      	movle	r3, #48	@ 0x30
 8009566:	f806 3c01 	strble.w	r3, [r6, #-1]
 800956a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800956e:	1b92      	subs	r2, r2, r6
 8009570:	6122      	str	r2, [r4, #16]
 8009572:	f8cd a000 	str.w	sl, [sp]
 8009576:	464b      	mov	r3, r9
 8009578:	aa03      	add	r2, sp, #12
 800957a:	4621      	mov	r1, r4
 800957c:	4640      	mov	r0, r8
 800957e:	f7ff fee7 	bl	8009350 <_printf_common>
 8009582:	3001      	adds	r0, #1
 8009584:	d14a      	bne.n	800961c <_printf_i+0x1f0>
 8009586:	f04f 30ff 	mov.w	r0, #4294967295
 800958a:	b004      	add	sp, #16
 800958c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	f043 0320 	orr.w	r3, r3, #32
 8009596:	6023      	str	r3, [r4, #0]
 8009598:	4832      	ldr	r0, [pc, #200]	@ (8009664 <_printf_i+0x238>)
 800959a:	2778      	movs	r7, #120	@ 0x78
 800959c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095a0:	6823      	ldr	r3, [r4, #0]
 80095a2:	6831      	ldr	r1, [r6, #0]
 80095a4:	061f      	lsls	r7, r3, #24
 80095a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80095aa:	d402      	bmi.n	80095b2 <_printf_i+0x186>
 80095ac:	065f      	lsls	r7, r3, #25
 80095ae:	bf48      	it	mi
 80095b0:	b2ad      	uxthmi	r5, r5
 80095b2:	6031      	str	r1, [r6, #0]
 80095b4:	07d9      	lsls	r1, r3, #31
 80095b6:	bf44      	itt	mi
 80095b8:	f043 0320 	orrmi.w	r3, r3, #32
 80095bc:	6023      	strmi	r3, [r4, #0]
 80095be:	b11d      	cbz	r5, 80095c8 <_printf_i+0x19c>
 80095c0:	2310      	movs	r3, #16
 80095c2:	e7ad      	b.n	8009520 <_printf_i+0xf4>
 80095c4:	4826      	ldr	r0, [pc, #152]	@ (8009660 <_printf_i+0x234>)
 80095c6:	e7e9      	b.n	800959c <_printf_i+0x170>
 80095c8:	6823      	ldr	r3, [r4, #0]
 80095ca:	f023 0320 	bic.w	r3, r3, #32
 80095ce:	6023      	str	r3, [r4, #0]
 80095d0:	e7f6      	b.n	80095c0 <_printf_i+0x194>
 80095d2:	4616      	mov	r6, r2
 80095d4:	e7bd      	b.n	8009552 <_printf_i+0x126>
 80095d6:	6833      	ldr	r3, [r6, #0]
 80095d8:	6825      	ldr	r5, [r4, #0]
 80095da:	6961      	ldr	r1, [r4, #20]
 80095dc:	1d18      	adds	r0, r3, #4
 80095de:	6030      	str	r0, [r6, #0]
 80095e0:	062e      	lsls	r6, r5, #24
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	d501      	bpl.n	80095ea <_printf_i+0x1be>
 80095e6:	6019      	str	r1, [r3, #0]
 80095e8:	e002      	b.n	80095f0 <_printf_i+0x1c4>
 80095ea:	0668      	lsls	r0, r5, #25
 80095ec:	d5fb      	bpl.n	80095e6 <_printf_i+0x1ba>
 80095ee:	8019      	strh	r1, [r3, #0]
 80095f0:	2300      	movs	r3, #0
 80095f2:	6123      	str	r3, [r4, #16]
 80095f4:	4616      	mov	r6, r2
 80095f6:	e7bc      	b.n	8009572 <_printf_i+0x146>
 80095f8:	6833      	ldr	r3, [r6, #0]
 80095fa:	1d1a      	adds	r2, r3, #4
 80095fc:	6032      	str	r2, [r6, #0]
 80095fe:	681e      	ldr	r6, [r3, #0]
 8009600:	6862      	ldr	r2, [r4, #4]
 8009602:	2100      	movs	r1, #0
 8009604:	4630      	mov	r0, r6
 8009606:	f7f6 fe6b 	bl	80002e0 <memchr>
 800960a:	b108      	cbz	r0, 8009610 <_printf_i+0x1e4>
 800960c:	1b80      	subs	r0, r0, r6
 800960e:	6060      	str	r0, [r4, #4]
 8009610:	6863      	ldr	r3, [r4, #4]
 8009612:	6123      	str	r3, [r4, #16]
 8009614:	2300      	movs	r3, #0
 8009616:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800961a:	e7aa      	b.n	8009572 <_printf_i+0x146>
 800961c:	6923      	ldr	r3, [r4, #16]
 800961e:	4632      	mov	r2, r6
 8009620:	4649      	mov	r1, r9
 8009622:	4640      	mov	r0, r8
 8009624:	47d0      	blx	sl
 8009626:	3001      	adds	r0, #1
 8009628:	d0ad      	beq.n	8009586 <_printf_i+0x15a>
 800962a:	6823      	ldr	r3, [r4, #0]
 800962c:	079b      	lsls	r3, r3, #30
 800962e:	d413      	bmi.n	8009658 <_printf_i+0x22c>
 8009630:	68e0      	ldr	r0, [r4, #12]
 8009632:	9b03      	ldr	r3, [sp, #12]
 8009634:	4298      	cmp	r0, r3
 8009636:	bfb8      	it	lt
 8009638:	4618      	movlt	r0, r3
 800963a:	e7a6      	b.n	800958a <_printf_i+0x15e>
 800963c:	2301      	movs	r3, #1
 800963e:	4632      	mov	r2, r6
 8009640:	4649      	mov	r1, r9
 8009642:	4640      	mov	r0, r8
 8009644:	47d0      	blx	sl
 8009646:	3001      	adds	r0, #1
 8009648:	d09d      	beq.n	8009586 <_printf_i+0x15a>
 800964a:	3501      	adds	r5, #1
 800964c:	68e3      	ldr	r3, [r4, #12]
 800964e:	9903      	ldr	r1, [sp, #12]
 8009650:	1a5b      	subs	r3, r3, r1
 8009652:	42ab      	cmp	r3, r5
 8009654:	dcf2      	bgt.n	800963c <_printf_i+0x210>
 8009656:	e7eb      	b.n	8009630 <_printf_i+0x204>
 8009658:	2500      	movs	r5, #0
 800965a:	f104 0619 	add.w	r6, r4, #25
 800965e:	e7f5      	b.n	800964c <_printf_i+0x220>
 8009660:	08009a75 	.word	0x08009a75
 8009664:	08009a86 	.word	0x08009a86

08009668 <__sflush_r>:
 8009668:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800966c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009670:	0716      	lsls	r6, r2, #28
 8009672:	4605      	mov	r5, r0
 8009674:	460c      	mov	r4, r1
 8009676:	d454      	bmi.n	8009722 <__sflush_r+0xba>
 8009678:	684b      	ldr	r3, [r1, #4]
 800967a:	2b00      	cmp	r3, #0
 800967c:	dc02      	bgt.n	8009684 <__sflush_r+0x1c>
 800967e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009680:	2b00      	cmp	r3, #0
 8009682:	dd48      	ble.n	8009716 <__sflush_r+0xae>
 8009684:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009686:	2e00      	cmp	r6, #0
 8009688:	d045      	beq.n	8009716 <__sflush_r+0xae>
 800968a:	2300      	movs	r3, #0
 800968c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009690:	682f      	ldr	r7, [r5, #0]
 8009692:	6a21      	ldr	r1, [r4, #32]
 8009694:	602b      	str	r3, [r5, #0]
 8009696:	d030      	beq.n	80096fa <__sflush_r+0x92>
 8009698:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800969a:	89a3      	ldrh	r3, [r4, #12]
 800969c:	0759      	lsls	r1, r3, #29
 800969e:	d505      	bpl.n	80096ac <__sflush_r+0x44>
 80096a0:	6863      	ldr	r3, [r4, #4]
 80096a2:	1ad2      	subs	r2, r2, r3
 80096a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80096a6:	b10b      	cbz	r3, 80096ac <__sflush_r+0x44>
 80096a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80096aa:	1ad2      	subs	r2, r2, r3
 80096ac:	2300      	movs	r3, #0
 80096ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80096b0:	6a21      	ldr	r1, [r4, #32]
 80096b2:	4628      	mov	r0, r5
 80096b4:	47b0      	blx	r6
 80096b6:	1c43      	adds	r3, r0, #1
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	d106      	bne.n	80096ca <__sflush_r+0x62>
 80096bc:	6829      	ldr	r1, [r5, #0]
 80096be:	291d      	cmp	r1, #29
 80096c0:	d82b      	bhi.n	800971a <__sflush_r+0xb2>
 80096c2:	4a2a      	ldr	r2, [pc, #168]	@ (800976c <__sflush_r+0x104>)
 80096c4:	40ca      	lsrs	r2, r1
 80096c6:	07d6      	lsls	r6, r2, #31
 80096c8:	d527      	bpl.n	800971a <__sflush_r+0xb2>
 80096ca:	2200      	movs	r2, #0
 80096cc:	6062      	str	r2, [r4, #4]
 80096ce:	04d9      	lsls	r1, r3, #19
 80096d0:	6922      	ldr	r2, [r4, #16]
 80096d2:	6022      	str	r2, [r4, #0]
 80096d4:	d504      	bpl.n	80096e0 <__sflush_r+0x78>
 80096d6:	1c42      	adds	r2, r0, #1
 80096d8:	d101      	bne.n	80096de <__sflush_r+0x76>
 80096da:	682b      	ldr	r3, [r5, #0]
 80096dc:	b903      	cbnz	r3, 80096e0 <__sflush_r+0x78>
 80096de:	6560      	str	r0, [r4, #84]	@ 0x54
 80096e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096e2:	602f      	str	r7, [r5, #0]
 80096e4:	b1b9      	cbz	r1, 8009716 <__sflush_r+0xae>
 80096e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096ea:	4299      	cmp	r1, r3
 80096ec:	d002      	beq.n	80096f4 <__sflush_r+0x8c>
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7ff fbf4 	bl	8008edc <_free_r>
 80096f4:	2300      	movs	r3, #0
 80096f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80096f8:	e00d      	b.n	8009716 <__sflush_r+0xae>
 80096fa:	2301      	movs	r3, #1
 80096fc:	4628      	mov	r0, r5
 80096fe:	47b0      	blx	r6
 8009700:	4602      	mov	r2, r0
 8009702:	1c50      	adds	r0, r2, #1
 8009704:	d1c9      	bne.n	800969a <__sflush_r+0x32>
 8009706:	682b      	ldr	r3, [r5, #0]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0c6      	beq.n	800969a <__sflush_r+0x32>
 800970c:	2b1d      	cmp	r3, #29
 800970e:	d001      	beq.n	8009714 <__sflush_r+0xac>
 8009710:	2b16      	cmp	r3, #22
 8009712:	d11e      	bne.n	8009752 <__sflush_r+0xea>
 8009714:	602f      	str	r7, [r5, #0]
 8009716:	2000      	movs	r0, #0
 8009718:	e022      	b.n	8009760 <__sflush_r+0xf8>
 800971a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800971e:	b21b      	sxth	r3, r3
 8009720:	e01b      	b.n	800975a <__sflush_r+0xf2>
 8009722:	690f      	ldr	r7, [r1, #16]
 8009724:	2f00      	cmp	r7, #0
 8009726:	d0f6      	beq.n	8009716 <__sflush_r+0xae>
 8009728:	0793      	lsls	r3, r2, #30
 800972a:	680e      	ldr	r6, [r1, #0]
 800972c:	bf08      	it	eq
 800972e:	694b      	ldreq	r3, [r1, #20]
 8009730:	600f      	str	r7, [r1, #0]
 8009732:	bf18      	it	ne
 8009734:	2300      	movne	r3, #0
 8009736:	eba6 0807 	sub.w	r8, r6, r7
 800973a:	608b      	str	r3, [r1, #8]
 800973c:	f1b8 0f00 	cmp.w	r8, #0
 8009740:	dde9      	ble.n	8009716 <__sflush_r+0xae>
 8009742:	6a21      	ldr	r1, [r4, #32]
 8009744:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009746:	4643      	mov	r3, r8
 8009748:	463a      	mov	r2, r7
 800974a:	4628      	mov	r0, r5
 800974c:	47b0      	blx	r6
 800974e:	2800      	cmp	r0, #0
 8009750:	dc08      	bgt.n	8009764 <__sflush_r+0xfc>
 8009752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800975a:	81a3      	strh	r3, [r4, #12]
 800975c:	f04f 30ff 	mov.w	r0, #4294967295
 8009760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009764:	4407      	add	r7, r0
 8009766:	eba8 0800 	sub.w	r8, r8, r0
 800976a:	e7e7      	b.n	800973c <__sflush_r+0xd4>
 800976c:	20400001 	.word	0x20400001

08009770 <_fflush_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	690b      	ldr	r3, [r1, #16]
 8009774:	4605      	mov	r5, r0
 8009776:	460c      	mov	r4, r1
 8009778:	b913      	cbnz	r3, 8009780 <_fflush_r+0x10>
 800977a:	2500      	movs	r5, #0
 800977c:	4628      	mov	r0, r5
 800977e:	bd38      	pop	{r3, r4, r5, pc}
 8009780:	b118      	cbz	r0, 800978a <_fflush_r+0x1a>
 8009782:	6a03      	ldr	r3, [r0, #32]
 8009784:	b90b      	cbnz	r3, 800978a <_fflush_r+0x1a>
 8009786:	f7ff f999 	bl	8008abc <__sinit>
 800978a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d0f3      	beq.n	800977a <_fflush_r+0xa>
 8009792:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009794:	07d0      	lsls	r0, r2, #31
 8009796:	d404      	bmi.n	80097a2 <_fflush_r+0x32>
 8009798:	0599      	lsls	r1, r3, #22
 800979a:	d402      	bmi.n	80097a2 <_fflush_r+0x32>
 800979c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800979e:	f7ff fb8c 	bl	8008eba <__retarget_lock_acquire_recursive>
 80097a2:	4628      	mov	r0, r5
 80097a4:	4621      	mov	r1, r4
 80097a6:	f7ff ff5f 	bl	8009668 <__sflush_r>
 80097aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80097ac:	07da      	lsls	r2, r3, #31
 80097ae:	4605      	mov	r5, r0
 80097b0:	d4e4      	bmi.n	800977c <_fflush_r+0xc>
 80097b2:	89a3      	ldrh	r3, [r4, #12]
 80097b4:	059b      	lsls	r3, r3, #22
 80097b6:	d4e1      	bmi.n	800977c <_fflush_r+0xc>
 80097b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80097ba:	f7ff fb7f 	bl	8008ebc <__retarget_lock_release_recursive>
 80097be:	e7dd      	b.n	800977c <_fflush_r+0xc>

080097c0 <__swhatbuf_r>:
 80097c0:	b570      	push	{r4, r5, r6, lr}
 80097c2:	460c      	mov	r4, r1
 80097c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097c8:	2900      	cmp	r1, #0
 80097ca:	b096      	sub	sp, #88	@ 0x58
 80097cc:	4615      	mov	r5, r2
 80097ce:	461e      	mov	r6, r3
 80097d0:	da0d      	bge.n	80097ee <__swhatbuf_r+0x2e>
 80097d2:	89a3      	ldrh	r3, [r4, #12]
 80097d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80097d8:	f04f 0100 	mov.w	r1, #0
 80097dc:	bf14      	ite	ne
 80097de:	2340      	movne	r3, #64	@ 0x40
 80097e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80097e4:	2000      	movs	r0, #0
 80097e6:	6031      	str	r1, [r6, #0]
 80097e8:	602b      	str	r3, [r5, #0]
 80097ea:	b016      	add	sp, #88	@ 0x58
 80097ec:	bd70      	pop	{r4, r5, r6, pc}
 80097ee:	466a      	mov	r2, sp
 80097f0:	f000 f87c 	bl	80098ec <_fstat_r>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	dbec      	blt.n	80097d2 <__swhatbuf_r+0x12>
 80097f8:	9901      	ldr	r1, [sp, #4]
 80097fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80097fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009802:	4259      	negs	r1, r3
 8009804:	4159      	adcs	r1, r3
 8009806:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800980a:	e7eb      	b.n	80097e4 <__swhatbuf_r+0x24>

0800980c <__smakebuf_r>:
 800980c:	898b      	ldrh	r3, [r1, #12]
 800980e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009810:	079d      	lsls	r5, r3, #30
 8009812:	4606      	mov	r6, r0
 8009814:	460c      	mov	r4, r1
 8009816:	d507      	bpl.n	8009828 <__smakebuf_r+0x1c>
 8009818:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800981c:	6023      	str	r3, [r4, #0]
 800981e:	6123      	str	r3, [r4, #16]
 8009820:	2301      	movs	r3, #1
 8009822:	6163      	str	r3, [r4, #20]
 8009824:	b003      	add	sp, #12
 8009826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009828:	ab01      	add	r3, sp, #4
 800982a:	466a      	mov	r2, sp
 800982c:	f7ff ffc8 	bl	80097c0 <__swhatbuf_r>
 8009830:	9f00      	ldr	r7, [sp, #0]
 8009832:	4605      	mov	r5, r0
 8009834:	4639      	mov	r1, r7
 8009836:	4630      	mov	r0, r6
 8009838:	f7ff fbbc 	bl	8008fb4 <_malloc_r>
 800983c:	b948      	cbnz	r0, 8009852 <__smakebuf_r+0x46>
 800983e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009842:	059a      	lsls	r2, r3, #22
 8009844:	d4ee      	bmi.n	8009824 <__smakebuf_r+0x18>
 8009846:	f023 0303 	bic.w	r3, r3, #3
 800984a:	f043 0302 	orr.w	r3, r3, #2
 800984e:	81a3      	strh	r3, [r4, #12]
 8009850:	e7e2      	b.n	8009818 <__smakebuf_r+0xc>
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	6020      	str	r0, [r4, #0]
 8009856:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800985a:	81a3      	strh	r3, [r4, #12]
 800985c:	9b01      	ldr	r3, [sp, #4]
 800985e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009862:	b15b      	cbz	r3, 800987c <__smakebuf_r+0x70>
 8009864:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009868:	4630      	mov	r0, r6
 800986a:	f000 f851 	bl	8009910 <_isatty_r>
 800986e:	b128      	cbz	r0, 800987c <__smakebuf_r+0x70>
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	f023 0303 	bic.w	r3, r3, #3
 8009876:	f043 0301 	orr.w	r3, r3, #1
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	89a3      	ldrh	r3, [r4, #12]
 800987e:	431d      	orrs	r5, r3
 8009880:	81a5      	strh	r5, [r4, #12]
 8009882:	e7cf      	b.n	8009824 <__smakebuf_r+0x18>

08009884 <_putc_r>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	460d      	mov	r5, r1
 8009888:	4614      	mov	r4, r2
 800988a:	4606      	mov	r6, r0
 800988c:	b118      	cbz	r0, 8009896 <_putc_r+0x12>
 800988e:	6a03      	ldr	r3, [r0, #32]
 8009890:	b90b      	cbnz	r3, 8009896 <_putc_r+0x12>
 8009892:	f7ff f913 	bl	8008abc <__sinit>
 8009896:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009898:	07d8      	lsls	r0, r3, #31
 800989a:	d405      	bmi.n	80098a8 <_putc_r+0x24>
 800989c:	89a3      	ldrh	r3, [r4, #12]
 800989e:	0599      	lsls	r1, r3, #22
 80098a0:	d402      	bmi.n	80098a8 <_putc_r+0x24>
 80098a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098a4:	f7ff fb09 	bl	8008eba <__retarget_lock_acquire_recursive>
 80098a8:	68a3      	ldr	r3, [r4, #8]
 80098aa:	3b01      	subs	r3, #1
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	60a3      	str	r3, [r4, #8]
 80098b0:	da05      	bge.n	80098be <_putc_r+0x3a>
 80098b2:	69a2      	ldr	r2, [r4, #24]
 80098b4:	4293      	cmp	r3, r2
 80098b6:	db12      	blt.n	80098de <_putc_r+0x5a>
 80098b8:	b2eb      	uxtb	r3, r5
 80098ba:	2b0a      	cmp	r3, #10
 80098bc:	d00f      	beq.n	80098de <_putc_r+0x5a>
 80098be:	6823      	ldr	r3, [r4, #0]
 80098c0:	1c5a      	adds	r2, r3, #1
 80098c2:	6022      	str	r2, [r4, #0]
 80098c4:	701d      	strb	r5, [r3, #0]
 80098c6:	b2ed      	uxtb	r5, r5
 80098c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80098ca:	07da      	lsls	r2, r3, #31
 80098cc:	d405      	bmi.n	80098da <_putc_r+0x56>
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	059b      	lsls	r3, r3, #22
 80098d2:	d402      	bmi.n	80098da <_putc_r+0x56>
 80098d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80098d6:	f7ff faf1 	bl	8008ebc <__retarget_lock_release_recursive>
 80098da:	4628      	mov	r0, r5
 80098dc:	bd70      	pop	{r4, r5, r6, pc}
 80098de:	4629      	mov	r1, r5
 80098e0:	4622      	mov	r2, r4
 80098e2:	4630      	mov	r0, r6
 80098e4:	f7ff f9db 	bl	8008c9e <__swbuf_r>
 80098e8:	4605      	mov	r5, r0
 80098ea:	e7ed      	b.n	80098c8 <_putc_r+0x44>

080098ec <_fstat_r>:
 80098ec:	b538      	push	{r3, r4, r5, lr}
 80098ee:	4d07      	ldr	r5, [pc, #28]	@ (800990c <_fstat_r+0x20>)
 80098f0:	2300      	movs	r3, #0
 80098f2:	4604      	mov	r4, r0
 80098f4:	4608      	mov	r0, r1
 80098f6:	4611      	mov	r1, r2
 80098f8:	602b      	str	r3, [r5, #0]
 80098fa:	f7f7 fafa 	bl	8000ef2 <_fstat>
 80098fe:	1c43      	adds	r3, r0, #1
 8009900:	d102      	bne.n	8009908 <_fstat_r+0x1c>
 8009902:	682b      	ldr	r3, [r5, #0]
 8009904:	b103      	cbz	r3, 8009908 <_fstat_r+0x1c>
 8009906:	6023      	str	r3, [r4, #0]
 8009908:	bd38      	pop	{r3, r4, r5, pc}
 800990a:	bf00      	nop
 800990c:	24004314 	.word	0x24004314

08009910 <_isatty_r>:
 8009910:	b538      	push	{r3, r4, r5, lr}
 8009912:	4d06      	ldr	r5, [pc, #24]	@ (800992c <_isatty_r+0x1c>)
 8009914:	2300      	movs	r3, #0
 8009916:	4604      	mov	r4, r0
 8009918:	4608      	mov	r0, r1
 800991a:	602b      	str	r3, [r5, #0]
 800991c:	f7f7 faf9 	bl	8000f12 <_isatty>
 8009920:	1c43      	adds	r3, r0, #1
 8009922:	d102      	bne.n	800992a <_isatty_r+0x1a>
 8009924:	682b      	ldr	r3, [r5, #0]
 8009926:	b103      	cbz	r3, 800992a <_isatty_r+0x1a>
 8009928:	6023      	str	r3, [r4, #0]
 800992a:	bd38      	pop	{r3, r4, r5, pc}
 800992c:	24004314 	.word	0x24004314

08009930 <_sbrk_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4d06      	ldr	r5, [pc, #24]	@ (800994c <_sbrk_r+0x1c>)
 8009934:	2300      	movs	r3, #0
 8009936:	4604      	mov	r4, r0
 8009938:	4608      	mov	r0, r1
 800993a:	602b      	str	r3, [r5, #0]
 800993c:	f7f7 fb02 	bl	8000f44 <_sbrk>
 8009940:	1c43      	adds	r3, r0, #1
 8009942:	d102      	bne.n	800994a <_sbrk_r+0x1a>
 8009944:	682b      	ldr	r3, [r5, #0]
 8009946:	b103      	cbz	r3, 800994a <_sbrk_r+0x1a>
 8009948:	6023      	str	r3, [r4, #0]
 800994a:	bd38      	pop	{r3, r4, r5, pc}
 800994c:	24004314 	.word	0x24004314

08009950 <_init>:
 8009950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009952:	bf00      	nop
 8009954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009956:	bc08      	pop	{r3}
 8009958:	469e      	mov	lr, r3
 800995a:	4770      	bx	lr

0800995c <_fini>:
 800995c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995e:	bf00      	nop
 8009960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009962:	bc08      	pop	{r3}
 8009964:	469e      	mov	lr, r3
 8009966:	4770      	bx	lr
